// ==============================================================================
// sayon5.mjs - VERSION GEMINI COMPL√àTE + GESTION NIVEAUX PAR POURCENTAGES
// MODIFICATION MAJEURE : Claude/GPT ‚Üí Gemini 2.0 Flash + Gestion intelligente des niveaux
// CONSERVATION : Toutes les fonctionnalit√©s + NOUVEAU : R√©partition niveaux par %
// OBJECTIF : M√™mes performances, 90-95% d'√©conomies + √©quilibrage parfait des niveaux
// AM√âLIORATIONS : Descriptions de niveaux renforc√©es pour Gemini
// ==============================================================================

import { GoogleGenerativeAI } from '@google/generative-ai';
import Replicate from 'replicate';
import { createClient } from '@supabase/supabase-js';
import fetch from 'node-fetch';
import sharp from 'sharp';
import readline from 'readline';
import 'dotenv/config';

// --- Configuration GEMINI (Remplace Claude + GPT) ---
const GEMINI_CONFIG = {
    eventGeneration: "gemini-2.0-flash",        // Remplace claude-3-5-sonnet-20241022
    historicalVerification: "gemini-2.0-flash", // Remplace claude-3-5-sonnet-20241022
    contextEnrichment: "gemini-2.0-flash",      // Remplace claude-3-5-sonnet-20241022
    promptGeneration: "gemini-2.0-flash",       // Remplace gpt-4o
    imageValidation: "gemini-2.0-flash"         // Remplace gpt-4o-mini
};

const MAX_IMAGE_ATTEMPTS = 4; 
const BATCH_SIZE = 4;
const MIN_VALIDATION_SCORE = 4;

// Limites optimis√©es Flux-schnell (CONSERV√âES)
const FLUX_SCHNELL_LIMITS = {
    MAX_T5_TOKENS: 256,
    OPTIMAL_T5_TOKENS: 200,
    TARGET_T5_TOKENS: 180,
    TARGET_WORDS: 45,
    MAX_WORDS: 60
};

const FLUX_SCHNELL_CONFIG = {
    steps: 4,
    quality: 85,
    seed: () => Math.floor(Math.random() * 1000000)
};

// --- Initialisation APIs ---
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const replicate = new Replicate({ auth: process.env.REPLICATE_API_TOKEN });
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_KEY);
const rl = readline.createInterface({ input: process.stdin, output: process.stdout });

// ==============================================================================
// WRAPPERS GEMINI ROBUSTES (REMPLACENT CLAUDE + OPENAI)
// ==============================================================================

async function callGemini(prompt, options = {}) {
    const {
        model = GEMINI_CONFIG.eventGeneration,
        maxOutputTokens = 1000,
        temperature = 0.3,
        responseFormat = null,
        retryAttempt = 1
    } = options;
    
    console.log(`      ü§ñ [GEMINI] Appel ${model} (${prompt.length} chars)${retryAttempt > 1 ? ` - Retry ${retryAttempt}/3` : ''}`);
    
    try {
        const geminiModel = genAI.getGenerativeModel({ 
            model,
            generationConfig: {
                maxOutputTokens,
                temperature,
                ...(responseFormat === 'json' && { responseMimeType: "application/json" })
            }
        });
        
        const result = await geminiModel.generateContent(prompt);
        const response = result.response.text();
        
        console.log(`      ‚úÖ [GEMINI] R√©ponse re√ßue (${response.length} chars)`);
        return response;
        
    } catch (error) {
        console.error(`      ‚ùå [GEMINI] Erreur:`, error.message);
        
        // CONSERVATION: Retry automatique pour erreurs temporaires (comme Claude)
        if ((error.message.includes('quota') || 
             error.message.includes('rate_limit') || 
             error.message.includes('overloaded') ||
             error.message.includes('timeout')) && retryAttempt < 3) {
            const waitTime = retryAttempt * 5000;
            console.log(`      üîÑ [GEMINI] Retry automatique dans ${waitTime/1000}s...`);
            await new Promise(resolve => setTimeout(resolve, waitTime));
            return await callGemini(prompt, { ...options, retryAttempt: retryAttempt + 1 });
        }
        
        throw error;
    }
}

async function callGeminiWithImage(prompt, imageUrl, options = {}) {
    const {
        model = GEMINI_CONFIG.imageValidation,
        maxOutputTokens = 350,
        temperature = 0.05,
        retryAttempt = 1
    } = options;
    
    console.log(`      ü§ñ [GEMINI-VISION] Appel ${model} pour validation image${retryAttempt > 1 ? ` - Retry ${retryAttempt}/3` : ''}`);
    
    try {
        const geminiModel = genAI.getGenerativeModel({ 
            model,
            generationConfig: {
                maxOutputTokens,
                temperature,
                responseMimeType: "application/json"
            }
        });
        
        // T√©l√©charger l'image pour Gemini
        const imageResponse = await fetch(imageUrl);
        const imageBuffer = await imageResponse.arrayBuffer();
        
        const imagePart = {
            inlineData: {
                data: Buffer.from(imageBuffer).toString('base64'),
                mimeType: 'image/webp'
            }
        };
        
        const result = await geminiModel.generateContent([prompt, imagePart]);
        const response = result.response.text();
        
        console.log(`      ‚úÖ [GEMINI-VISION] Validation termin√©e`);
        return response;
        
    } catch (error) {
        console.error(`      ‚ùå [GEMINI-VISION] Erreur:`, error.message);
        
        // CONSERVATION: Retry automatique (comme OpenAI)
        if ((error.message.includes('quota') || 
             error.message.includes('rate_limit')) && retryAttempt < 3) {
            const waitTime = retryAttempt * 3000;
            console.log(`      üîÑ [GEMINI-VISION] Retry automatique dans ${waitTime/1000}s...`);
            await new Promise(resolve => setTimeout(resolve, waitTime));
            return await callGeminiWithImage(prompt, imageUrl, { ...options, retryAttempt: retryAttempt + 1 });
        }
        
        throw error;
    }
}

// ==============================================================================
// D√âTECTION INTELLIGENTE DES DOUBLONS (CONSERVATION COMPL√àTE)
// ==============================================================================

let existingNormalizedTitles = new Set();
let titleMappings = new Map();

function extractYear(dateString) {
    if (!dateString) return null;
    const yearMatch = dateString.match(/(\d{4})/);
    return yearMatch ? parseInt(yearMatch[1]) : null;
}

function normalizeTitle(titre) {
    if (!titre) return '';
    
    let normalized = titre.toLowerCase().trim();
    
    normalized = normalized
        .replace(/\s*\(?\d{4}\)?$/g, '')
        .replace(/\s+\d{4}\s*$/g, '')
        .replace(/^trait√©\s+(de\s+|du\s+|des\s+)?/g, 'traite de ')
        .replace(/^traite\s+(de\s+|du\s+|des\s+)?/g, 'traite de ')
        .replace(/^acte\s+(de\s+|d'|du\s+|des\s+)?/g, 'acte de ')
        .replace(/^bataille\s+(de\s+|du\s+|des\s+)?/g, 'bataille de ')
        .replace(/^guerre\s+(de\s+|du\s+|des\s+)?/g, 'guerre de ')
        .replace(/^r√©volution\s+(de\s+|du\s+|des\s+)?/g, 'revolution de ')
        .replace(/^revolution\s+(de\s+|du\s+|des\s+)?/g, 'revolution de ')
        .replace(/^d√©couverte\s+(de\s+|du\s+|des\s+)?/g, 'decouverte de ')
        .replace(/^decouverte\s+(de\s+|du\s+|des\s+)?/g, 'decouverte de ')
        .normalize('NFD')
        .replace(/[\u0300-\u036f]/g, '')
        .replace(/\s+(le|la|les|du|de|des|en|et|ou|dans|pour|avec|par|sur)\s+/g, ' ')
        .replace(/\s+/g, ' ')
        .trim();
    
    return normalized;
}

async function loadExistingTitles(startYear, endYear) {
    console.log(`üîç Chargement de TOUS les √©v√©nements existants (tables 'evenements' + 'goju')...`);
    
    try {
        const [gojuResult, eventsResult] = await Promise.all([
            supabase.from('goju').select('titre, date, date_formatee'),
            supabase.from('evenements').select('titre, date, date_formatee')
        ]);
        
        const allEvents = [
            ...(gojuResult.data || []),
            ...(eventsResult.data || [])
        ];
        
        console.log(`   üìä Total √©v√©nements charg√©s: ${allEvents.length} (goju: ${gojuResult.data?.length || 0}, evenements: ${eventsResult.data?.length || 0})`);
        
        const periodEvents = [];
        const allNormalizedTitles = new Set();
        const allMappings = new Map();
        
        allEvents.forEach(event => {
            const eventYear = extractYear(event.date || event.date_formatee);
            const normalized = normalizeTitle(event.titre);
            
            allNormalizedTitles.add(normalized);
            if (!allMappings.has(normalized)) {
                allMappings.set(normalized, []);
            }
            allMappings.get(normalized).push(event.titre);
            
            if (eventYear >= startYear && eventYear <= endYear) {
                periodEvents.push(event);
            }
        });
        
        console.log(`   üéØ √âv√©nements dans la p√©riode ${startYear}-${endYear}: ${periodEvents.length}`);
        console.log(`   üö´ Titres normalis√©s √† √©viter: ${allNormalizedTitles.size}`);
        
        existingNormalizedTitles = allNormalizedTitles;
        titleMappings = allMappings;
        
        return { allNormalizedTitles, periodEvents: periodEvents.map(e => e.titre) };
        
    } catch (error) {
        console.error("‚ùå Erreur chargement titres:", error.message);
        return { allNormalizedTitles: new Set(), periodEvents: [] };
    }
}

function isDuplicate(titre) {
    const normalized = normalizeTitle(titre);
    const exists = existingNormalizedTitles.has(normalized);
    
    if (exists) {
        const existingVersions = titleMappings.get(normalized) || [];
        console.log(`   ‚ùå Doublon d√©tect√©: "${titre}" -> normalis√©: "${normalized}"`);
        console.log(`      Versions existantes: [${existingVersions.join(', ')}]`);
        return true;
    }
    
    // CONSERVATION: V√©rification stricte mais intelligente pour √©viter rejets excessifs
    if (normalized.length < 10) { // Seulement titres tr√®s courts
        for (const existingNormalized of existingNormalizedTitles) {
            if (existingNormalized.length < 10 && existingNormalized === normalized) {
                console.log(`   ‚ö†Ô∏è Similarit√© exacte d√©tect√©e: "${titre}" = "${existingNormalized}"`);
                return true;
            }
        }
    }
    
    return false;
}

function addToCache(titre) {
    const normalized = normalizeTitle(titre);
    existingNormalizedTitles.add(normalized);
    
    if (!titleMappings.has(normalized)) {
        titleMappings.set(normalized, []);
    }
    titleMappings.get(normalized).push(titre);
}

// ==============================================================================
// NOUVEAU : FONCTIONS GESTION NIVEAUX PAR POURCENTAGES
// ==============================================================================

function getPresetDistributions() {
    return {
        "equilibre": { 1: 15, 2: 20, 3: 20, 4: 20, 5: 15, 6: 10, 7: 0 },
        "debutant": { 1: 30, 2: 30, 3: 25, 4: 15, 5: 0, 6: 0, 7: 0 },
        "avance": { 1: 5, 2: 10, 3: 15, 4: 20, 5: 25, 6: 20, 7: 5 },
        "expert": { 1: 0, 2: 5, 3: 10, 4: 15, 5: 25, 6: 30, 7: 15 },
        "lacunes": { 1: 20, 2: 0, 3: 0, 4: 0, 5: 20, 6: 30, 7: 30 }
    };
}

async function askDifficultyDistribution() {
    console.log("\nüéØ === CONFIGURATION R√âPARTITION NIVEAUX DE DIFFICULT√â ===");
    console.log("üìä D√©finissez les pourcentages pour chaque niveau (total = 100%)");
    console.log("\nüìã Rappel des niveaux :");
    console.log("   Niveau 1 : √âv√©nements universels tr√®s connus");
    console.log("   Niveau 2 : √âv√©nements connus, accessibles");
    console.log("   Niveau 3 : √âv√©nements moyennement connus");
    console.log("   Niveau 4 : √âv√©nements moins connus, sp√©cialis√©s");
    console.log("   Niveau 5 : √âv√©nements sp√©cialis√©s avanc√©s");
    console.log("   Niveau 6 : √âv√©nements tr√®s sp√©cialis√©s");
    console.log("   Niveau 7 : √âv√©nements d'experts, tr√®s pointus");
    
    const distribution = {};
    let totalPercentage = 0;
    
    // Demander les pourcentages pour chaque niveau
    for (let level = 1; level <= 7; level++) {
        let percentage;
        do {
            const remaining = 100 - totalPercentage;
            percentage = parseInt(await askQuestion(`   üìä Niveau ${level} (reste ${remaining}%) : `));
            
            if (isNaN(percentage) || percentage < 0 || percentage > remaining) {
                console.log(`   ‚ùå Erreur : Entrez un nombre entre 0 et ${remaining}`);
                percentage = null;
            }
        } while (percentage === null);
        
        distribution[level] = percentage;
        totalPercentage += percentage;
        
        if (totalPercentage === 100) {
            // Auto-compl√©ter les niveaux restants √† 0
            for (let remainingLevel = level + 1; remainingLevel <= 7; remainingLevel++) {
                distribution[remainingLevel] = 0;
            }
            break;
        }
    }
    
    // V√©rification finale
    if (totalPercentage !== 100) {
        console.log(`‚ùå Erreur : Total = ${totalPercentage}% (doit √™tre 100%)`);
        return await askDifficultyDistribution(); // Recommencer
    }
    
    console.log("\n‚úÖ === R√âPARTITION VALID√âE ===");
    Object.entries(distribution).forEach(([level, percentage]) => {
        if (percentage > 0) {
            console.log(`   Niveau ${level}: ${percentage}%`);
        }
    });
    
    return distribution;
}

async function askDistributionChoice() {
    console.log("\nüéØ === CHOIX R√âPARTITION NIVEAUX ===");
    console.log("1. ‚öñÔ∏è  √âquilibr√©e (polyvalente)");
    console.log("2. üå± D√©butant (niveaux faciles)");
    console.log("3. üéì Avanc√©e (niveaux moyens-√©lev√©s)");
    console.log("4. üë®‚Äçüî¨ Expert (niveaux difficiles)");
    console.log("5. üîß Combler lacunes (niveaux sous-repr√©sent√©s)");
    console.log("6. ‚úèÔ∏è  Personnalis√©e");
    
    const choice = await askQuestion("Votre choix (1-6) : ");
    const presets = getPresetDistributions();
    
    switch (choice) {
        case '1': return presets.equilibre;
        case '2': return presets.debutant;
        case '3': return presets.avance;
        case '4': return presets.expert;
        case '5': return presets.lacunes;
        case '6': return await askDifficultyDistribution();
        default:
            console.log("‚ùå Choix invalide, r√©partition √©quilibr√©e s√©lectionn√©e");
            return presets.equilibre;
    }
}

function calculateBatchDistribution(batchSize, globalDistribution) {
    const batchDistribution = {};
    let totalAssigned = 0;
    
    // Calculer le nombre d'√©v√©nements par niveau
    for (let level = 1; level <= 7; level++) {
        if (globalDistribution[level] > 0) {
            const exactCount = (batchSize * globalDistribution[level]) / 100;
            batchDistribution[level] = Math.round(exactCount);
            totalAssigned += batchDistribution[level];
        } else {
            batchDistribution[level] = 0;
        }
    }
    
    // Ajuster si n√©cessaire pour respecter exactement batchSize
    const difference = batchSize - totalAssigned;
    if (difference !== 0) {
        // Trouver le niveau avec le plus grand pourcentage pour ajuster
        const maxLevel = Object.entries(globalDistribution)
            .filter(([_, percentage]) => percentage > 0)
            .sort((a, b) => b[1] - a[1])[0]?.[0];
        
        if (maxLevel) {
            batchDistribution[maxLevel] += difference;
        }
    }
    
    return batchDistribution;
}

// ==============================================================================
// AM√âLIORATIONS DESCRIPTIONS NIVEAUX POUR GEMINI
// ==============================================================================

function createDifficultyPromptSection(batchDistribution) {
    const targetLevels = Object.entries(batchDistribution)
        .filter(([level, count]) => count > 0)
        .map(([level, count]) => ({ level: parseInt(level), count }));
    
    if (targetLevels.length === 0) return "";
    
    let promptSection = "\nüéØ NIVEAUX DE DIFFICULT√â CIBL√âS AVEC EXEMPLES CONCRETS :\n";
    
    targetLevels.forEach(({ level, count }) => {
        const difficultyDescriptions = {
            1: {
                description: "NIVEAU 1 (UNIVERSELS) : √âv√©nements dans TOUS les manuels scolaires",
                criteria: "‚Ä¢ Enseign√©s au coll√®ge/lyc√©e partout dans le monde\n‚Ä¢ Dates m√©moris√©es par la plupart des gens\n‚Ä¢ √âv√©nements fondateurs de civilisations",
                examples: "Exemples : Chute de Rome (476), D√©couverte Am√©rique (1492), R√©volution fran√ßaise (1789), 1√®re/2√®me Guerre mondiale, R√©volution russe (1917)"
            },
            2: {
                description: "NIVEAU 2 (ACCESSIBLES) : Culture g√©n√©rale standard, documentaires TV",
                criteria: "‚Ä¢ Vus dans documentaires grand public\n‚Ä¢ Connus par personnes avec culture g√©n√©rale\n‚Ä¢ √âv√©nements nationaux majeurs",
                examples: "Exemples : Bataille Hastings (1066), Peste noire (1347), Guerre de 100 ans, Renaissance italienne, R√©forme protestante (1517)"
            },
            3: {
                description: "NIVEAU 3 (MOYENS) : Passionn√©s d'histoire, √©tudiants universitaires",
                criteria: "‚Ä¢ N√©cessite passion pour l'histoire\n‚Ä¢ √âtudes sup√©rieures en histoire\n‚Ä¢ √âv√©nements r√©gionaux importants",
                examples: "Exemples : Bataille Poitiers (732), Croisades sp√©cifiques, Guerres de religion France, Jacqueries m√©di√©vales, Schisme d'Occident"
            },
            4: {
                description: "NIVEAU 4 (SP√âCIALIS√âS) : Connaisseurs, guides touristiques sp√©cialis√©s",
                criteria: "‚Ä¢ Lecture de livres sp√©cialis√©s requise\n‚Ä¢ √âv√©nements locaux/r√©gionaux pr√©cis\n‚Ä¢ Dates secondaires d'√©v√©nements majeurs",
                examples: "Exemples : Bataille Pavie (1525), Paix Augsbourg (1555), Fondations villes coloniales, R√©voltes paysannes locales, Trait√©s mineurs"
            },
            5: {
                description: "NIVEAU 5 (AVANC√âS) : √âtudiants master/doctorat, historiens amateurs",
                criteria: "‚Ä¢ Recherches acad√©miques n√©cessaires\n‚Ä¢ √âv√©nements administratifs/institutionnels\n‚Ä¢ Personnages secondaires mais importants",
                examples: "Exemples : R√©formes administratives pr√©cises, Cr√©ations d'institutions, Nominations d'√©v√™ques influents, √âdits royaux sp√©cialis√©s"
            },
            6: {
                description: "NIVEAU 6 (TR√àS SP√âCIALIS√âS) : Historiens professionnels, chercheurs",
                criteria: "‚Ä¢ Sources primaires et archives\n‚Ä¢ √âv√©nements micro-historiques\n‚Ä¢ D√©tails chronologiques pr√©cis",
                examples: "Exemples : Sessions parlementaires pr√©cises, Nominations administratives, Fondations monast√®res, Accords commerciaux locaux"
            },
            7: {
                description: "NIVEAU 7 (EXPERTS) : Sp√©cialistes de p√©riode, historiens pointus",
                criteria: "‚Ä¢ Expertise ultra-pointue requise\n‚Ä¢ √âv√©nements dans th√®ses de doctorat\n‚Ä¢ Sources rares et peu connues",
                examples: "Exemples : D√©cisions de conseils municipaux, Nominations eccl√©siastiques mineures, Accords entre guildes, R√©voltes hyperlocales"
            }
        };
        
        const desc = difficultyDescriptions[level];
        promptSection += `\n${count}x ${desc.description}\n`;
        promptSection += `${desc.criteria}\n`;
        promptSection += `${desc.examples}\n`;
    });
    
    promptSection += `\nüîß CONSIGNE CRITIQUE POUR GEMINI :\n`;
    promptSection += `- NIVEAU 1-2 : Si c'est dans Wikip√©dia avec page d√©taill√©e = OK\n`;
    promptSection += `- NIVEAU 3-4 : Si c'est dans livres d'histoire sp√©cialis√©s = OK\n`;
    promptSection += `- NIVEAU 5-7 : Si c'est dans archives/sources acad√©miques = OK\n`;
    promptSection += `- TOUJOURS v√©rifier : "Est-ce que quelqu'un du niveau cibl√© conna√Ætrait cet √©v√©nement ?"\n`;
    
    return promptSection;
}

// ==============================================================================
// VALIDATION AM√âLIOR√âE DES NIVEAUX
// ==============================================================================

function validateEventLevel(event) {
    const levelValidation = {
        1: {
            keywords: ["r√©volution", "guerre mondiale", "d√©couverte am√©rique", "chute rome", "renaissance"],
            avoid: ["local", "r√©gional", "municipal", "administratif"]
        },
        2: {
            keywords: ["bataille", "trait√©", "peste", "croisade", "r√©forme"],
            avoid: ["nomination", "conseil", "accord mineur"]
        },
        3: {
            keywords: ["guerre", "si√®ge", "alliance", "schisme"],
            avoid: ["√©dit mineur", "fondation monast√®re"]
        },
        4: {
            keywords: ["fondation", "r√©volte", "paix", "cr√©ation"],
            avoid: ["session", "nomination √©v√™que"]
        },
        5: {
            keywords: ["r√©forme administrative", "cr√©ation institution", "√©dit"],
            avoid: ["d√©cision municipale"]
        },
        6: {
            keywords: ["nomination", "accord commercial", "session"],
            avoid: ["querelle locale"]
        },
        7: {
            keywords: ["conseil municipal", "d√©cision administrative", "accord guildes"],
            avoid: []
        }
    };
    
    const level = event.difficultyLevel;
    const title = event.titre.toLowerCase();
    const validation = levelValidation[level];
    
    if (validation) {
        // V√©rifier mots-cl√©s appropri√©s
        const hasGoodKeywords = validation.keywords.some(keyword => 
            title.includes(keyword)
        );
        
        // V√©rifier absence de mots √† √©viter
        const hasAvoidKeywords = validation.avoid.some(avoid => 
            title.includes(avoid)
        );
        
        return hasGoodKeywords && !hasAvoidKeywords;
    }
    
    return true; // Par d√©faut, accepter
}

// ==============================================================================
// G√âN√âRATION D'√âV√âNEMENTS OPTIMIS√âE AVEC NIVEAUX (GEMINI + LISTE COMPL√àTE)
// ==============================================================================

async function generateEventBatchWithGeminiLevels(startYear, endYear, batchDistribution, attemptNumber = 1) {
    const totalCount = Object.values(batchDistribution).reduce((sum, count) => sum + count, 0);
    
    console.log(`   üì¶ [GEMINI] G√©n√©ration de ${totalCount} √©v√©nements avec niveaux cibl√©s (tentative ${attemptNumber})...`);
    
    // Afficher la r√©partition du lot
    console.log(`      üìä R√©partition du lot :`);
    Object.entries(batchDistribution).forEach(([level, count]) => {
        if (count > 0) {
            console.log(`         Niveau ${level}: ${count} √©v√©nements`);
        }
    });
    
    // üéØ MODIFICATION UTILISATEUR: Prendre TOUS les √©v√©nements de la p√©riode (pas seulement 15)
    const periodExistingTitles = [];
    titleMappings.forEach((originals, normalized) => {
        originals.forEach(original => {
            const eventYear = extractYear(original);
            if (eventYear >= startYear && eventYear <= endYear) {
                periodExistingTitles.push(original);
            }
        });
    });
    
    // üéØ CHANGEMENT MAJEUR: Utiliser TOUS les √©v√©nements existants dans la p√©riode
    const allExistingInPeriod = periodExistingTitles.join('", "');
    console.log(`      üö´ √âv√©nements interdits dans p√©riode: ${periodExistingTitles.length} titres`);
    console.log(`      üìè Longueur liste interdite: ${allExistingInPeriod.length} caract√®res`);
    
    // CONSERVATION: Variations de prompts pour diversit√©
    const promptVariations = [
        "√©v√©nements politiques et diplomatiques document√©s",
        "inventions techniques et d√©couvertes scientifiques v√©rifi√©es", 
        "constructions d'infrastructures et monuments historiques",
        "batailles et conflits militaires r√©gionaux",
        "fondations de villes et institutions importantes",
        "catastrophes naturelles et ph√©nom√®nes g√©ologiques",
        "mouvements artistiques et culturels significatifs",
        "trait√©s commerciaux et accords √©conomiques",
        "explorations g√©ographiques et d√©couvertes maritimes",
        "innovations religieuses et r√©formes eccl√©siastiques",
        "d√©veloppements √©conomiques et innovations financi√®res",
        "avanc√©es m√©dicales et anatomiques document√©es",
        "innovations technologiques et m√©caniques",
        "√©v√©nements juridiques et l√©gislatifs",
        "fondations d'universit√©s et institutions savantes"
    ];
    
    const focusArea = promptVariations[attemptNumber % promptVariations.length];
    const difficultyPromptSection = createDifficultyPromptSection(batchDistribution);
    
    // Instructions renforc√©es pour Gemini
    const enhancedLevelInstructions = `
üîß INSTRUCTIONS NIVEAUX RENFORC√âES :
- NIVEAU 1 : "Grand-m√®re fran√ßaise/anglaise/allemande conna√Æt" ‚Üí √âv√©nements dans manuels scolaires mondiaux
- NIVEAU 2 : "Pr√©sentateur TV culture g√©n√©rale conna√Æt" ‚Üí Documentaires Histoire grand public  
- NIVEAU 3 : "Professeur lyc√©e histoire conna√Æt" ‚Üí Sp√©cialisation r√©gionale requise
- NIVEAU 4 : "Guide touristique ch√¢teau/mus√©e conna√Æt" ‚Üí Lecture livres sp√©cialis√©s
- NIVEAU 5 : "√âtudiant master histoire conna√Æt" ‚Üí Recherche acad√©mique n√©cessaire
- NIVEAU 6 : "Historien professionnel conna√Æt" ‚Üí Sources primaires et archives  
- NIVEAU 7 : "Sp√©cialiste p√©riode pr√©cise conna√Æt" ‚Üí Expertise ultra-pointue

üéØ TEST GEMINI : Avant de proposer un √©v√©nement, demande-toi :
"Une personne du niveau X cibl√© conna√Ætrait-elle cet √©v√©nement ?"
- Si OUI ‚Üí Bon niveau
- Si NON ‚Üí Ajuster vers niveau sup√©rieur
- Si TROP FACILE ‚Üí Ajuster vers niveau inf√©rieur

üö´ PI√àGES √Ä √âVITER :
- Ne pas confondre "importance historique" et "niveau de connaissance"
- Guerres mondiales = Niveau 1 m√™me si tr√®s importantes
- D√©tails administratifs = Niveau 6-7 m√™me si moins "importants"
- Toujours penser : "Qui conna√Æt cet √©v√©nement dans la vraie vie ?"`;
    
    // üéØ MODIFICATION: Utiliser la liste compl√®te au lieu d'un √©chantillon + niveaux cibl√©s
    const prompt = `Tu es un historien expert reconnu. G√©n√®re EXACTEMENT ${totalCount} √©v√©nements historiques DOCUMENT√âS et V√âRIFIABLES entre ${startYear}-${endYear}.

üö´ √âV√âNEMENTS STRICTEMENT INTERDITS (TOUS ceux de la p√©riode ${startYear}-${endYear}) :
"${allExistingInPeriod}"

üéØ FOCUS SP√âCIALIS√â : ${focusArea}

${difficultyPromptSection}

${enhancedLevelInstructions}

üîß STRAT√âGIE ANTI-DOUBLONS : Privil√©gie des √©v√©nements adapt√©s au niveau ET g√©ographiquement vari√©s.

R√àGLES CRITIQUES :
1. DATES EXACTES obligatoires - V√âRIFIE CHAQUE DATE avec pr√©cision absolue
2. √âV√âNEMENTS DOCUMENT√âS uniquement - Sources historiques v√©rifiables
3. Z√âRO DOUBLON avec les ${periodExistingTitles.length} √©v√©nements interdits ci-dessus
4. DIVERSIT√â G√âOGRAPHIQUE MAXIMALE (Europe, Asie, Am√©rique, Afrique)
5. TITRES pr√©cis (max 60 caract√®res) SANS l'ann√©e
6. RESPECTER les niveaux de difficult√© demand√©s

CONSIGNE QUALIT√â :
- Privil√©gie des √©v√©nements adapt√©s au niveau ET g√©ographiquement vari√©s
- VARIE absolument les r√©gions : au moins 2 continents diff√©rents
- Assure-toi de la pr√©cision des dates (¬±0 tol√©rance d'erreur)
- √âvite les "grands classiques" pour niveaux √©lev√©s

FORMAT JSON STRICT :
{
  "events": [
    {
      "year": number (ann√©e exacte v√©rifi√©e),
      "titre": "Titre factuel pr√©cis SANS ann√©e",
      "description": "Contexte historique bref", 
      "type": "Militaire|Architecture|Invention|Institution|D√©couverte|Catastrophe|Exploration|Religion|√âconomie",
      "region": "Europe|Asie|Afrique|Am√©rique",
      "specificLocation": "Pays/r√©gion pr√©cise",
      "difficultyLevel": number (1-7, selon la r√©partition demand√©e),
      "confidence": "high|medium" (niveau de certitude historique)
    }
  ]
}

PRIORIT√â ABSOLUE : Pr√©cision historique + NIVEAUX DE DIFFICULT√â RESPECT√âS + DIVERSIT√â G√âOGRAPHIQUE + Z√âRO ressemblance avec les ${periodExistingTitles.length} √©v√©nements interdits.`;

    try {
        const responseText = await callGemini(prompt, {
            model: GEMINI_CONFIG.eventGeneration,
            maxOutputTokens: 2500,
            temperature: 0.25,
            responseFormat: 'json'
        });
        
        // CONSERVATION: Extraction JSON intelligente
        let jsonText = responseText;
        if (responseText.includes('```json')) {
            const match = responseText.match(/```json\s*([\s\S]*?)\s*```/);
            if (match) {
                jsonText = match[1];
            }
        } else if (responseText.includes('{')) {
            const startIndex = responseText.indexOf('{');
            const endIndex = responseText.lastIndexOf('}') + 1;
            jsonText = responseText.substring(startIndex, endIndex);
        }
        
        console.log(`      üìä [GEMINI] JSON extrait: ${jsonText.substring(0, 200)}...`);
        
        const batchData = JSON.parse(jsonText);
        
        if (!batchData.events || !Array.isArray(batchData.events)) {
            console.log(`      ‚ùå Structure invalide, tentative ${attemptNumber + 1}...`);
            if (attemptNumber < 3) {
                return await generateEventBatchWithGeminiLevels(startYear, endYear, batchDistribution, attemptNumber + 1);
            }
            return [];
        }
        
        const validEvents = [];
        const rejectedEvents = [];
        
        batchData.events.forEach(event => {
            if (!event.titre || !event.year || event.titre.length >= 100) {
                rejectedEvents.push({ event: event.titre, reason: 'Format invalide' });
                return;
            }
            
            // CONSERVATION: Regex compl√®te pour caract√®res fran√ßais
            if (!event.titre.match(/^[a-zA-Z0-9\s\-√†√°√¢√§√®√©√™√´√¨√≠√Æ√Ø√≤√≥√¥√∂√π√∫√ª√º√ß√±√Ä√Å√Ç√Ñ√à√â√ä√ã√å√ç√é√è√í√ì√î√ñ√ô√ö√õ√ú√á√ë'():.,]+$/) || event.titre.includes('undefined')) {
                rejectedEvents.push({ event: event.titre, reason: 'Caract√®res invalides' });
                return;
            }
            
            // V√©rification doublons AVANT validation
            if (isDuplicate(event.titre)) {
                rejectedEvents.push({ event: event.titre, reason: 'Doublon d√©tect√© (pr√©-v√©rification)' });
                return;
            }
            
            // NOUVEAU : V√©rification niveau de difficult√©
            if (!event.difficultyLevel || event.difficultyLevel < 1 || event.difficultyLevel > 7) {
                // Assigner un niveau par d√©faut si manquant
                event.difficultyLevel = 4; // Niveau moyen par d√©faut
            }
            
            // Validation du niveau avec la nouvelle fonction
            if (!validateEventLevel(event)) {
                console.log(`      ‚ö†Ô∏è [GEMINI] Niveau possiblement inappropri√© pour "${event.titre}" (Niveau ${event.difficultyLevel})`);
                // Ne pas rejeter, mais noter pour am√©lioration future
            }
            
            validEvents.push(event);
        });
        
        // V√©rification de la r√©partition obtenue
        const actualDistribution = {};
        for (let i = 1; i <= 7; i++) actualDistribution[i] = 0;
        
        validEvents.forEach(event => {
            actualDistribution[event.difficultyLevel]++;
        });
        
        console.log(`      ‚úÖ [GEMINI] Lot g√©n√©r√©: ${validEvents.length} √©v√©nements uniques apr√®s pr√©-v√©rification`);
        console.log(`      üìä R√©partition obtenue:`);
        Object.entries(actualDistribution).forEach(([level, count]) => {
            if (count > 0) {
                const expected = batchDistribution[level] || 0;
                const status = count === expected ? '‚úÖ' : (count > expected ? '‚¨ÜÔ∏è' : '‚¨áÔ∏è');
                console.log(`         Niveau ${level}: ${count}/${expected} ${status}`);
            }
        });
        console.log(`      üîç [GEMINI] Pr√©-v√©rification: ${batchData.events.length - validEvents.length} doublons √©vit√©s`);
        
        if (rejectedEvents.length > 0) {
            console.log(`      ‚ùå √âv√©nements rejet√©s en pr√©-v√©rification: ${rejectedEvents.length}`);
            rejectedEvents.slice(0, 3).forEach(rejected => {
                console.log(`        - "${rejected.event}" (${rejected.reason})`);
            });
        }
        
        validEvents.forEach(event => {
            console.log(`        ‚úÖ "${event.titre}" (${event.year}) [Niveau ${event.difficultyLevel}|${event.type}|${event.region}] - Confiance: ${event.confidence || 'N/A'}`);
        });
        
        return validEvents;
        
    } catch (error) {
        console.error(`      ‚ùå [GEMINI] Erreur g√©n√©ration:`, error.message);
        
        if (attemptNumber < 3) {
            console.log(`      üîÑ Retry avec param√®tres modifi√©s...`);
            return await generateEventBatchWithGeminiLevels(startYear, endYear, batchDistribution, attemptNumber + 1);
        }
        return [];
    }
}

// ==============================================================================
// V√âRIFICATION HISTORIQUE OPTIMIS√âE (GEMINI)
// ==============================================================================

async function verifyEventBatchWithGemini(events) {
    console.log(`   üïµÔ∏è [GEMINI] V√©rification historique approfondie...`);
    
    const eventsText = events.map(e => `"${e.titre}" (${e.year}) [Niveau ${e.difficultyLevel || 'N/A'}]`).join('\n');
    
    const prompt = `Tu es un historien expert. V√âRIFIE RIGOUREUSEMENT ces √©v√©nements historiques :

${eventsText}

Pour chaque √©v√©nement, VALIDE :
1. EXISTENCE dans l'histoire document√©e (sources primaires/secondaires)
2. DATE EXACTE (tol√©rance ¬±1 an maximum) - V√âRIFIE CHAQUE DATE avec pr√©cision absolue
3. TITRE coh√©rent avec les faits historiques
4. NIVEAU DE DIFFICULT√â appropri√©

üéØ OPTIMAL: V√âRIFIE CHAQUE DATE avec pr√©cision absolue avant validation.

SOIS STRICT sur la pr√©cision factuelle. En cas de doute, REJETTE.

FORMAT JSON REQUIS :
{
  "validations": [
    {
      "titre": "titre exact",
      "isValid": true/false,
      "dateCorrect": true/false,
      "difficultyAppropriate": true/false,
      "reason": "explication d√©taill√©e si rejet√©",
      "confidence": "high|medium|low"
    }
  ]
}

PRIORIT√â : Pr√©cision historique absolue avec dates v√©rifi√©es.`;

    try {
        const responseText = await callGemini(prompt, {
            model: GEMINI_CONFIG.historicalVerification,
            maxOutputTokens: 1200,
            temperature: 0.1,
            responseFormat: 'json'
        });
        
        // CONSERVATION: Extraction JSON
        let jsonText = responseText;
        if (responseText.includes('```json')) {
            const match = responseText.match(/```json\s*([\s\S]*?)\s*```/);
            if (match) {
                jsonText = match[1];
            }
        } else if (responseText.includes('{')) {
            const startIndex = responseText.indexOf('{');
            const endIndex = responseText.lastIndexOf('}') + 1;
            jsonText = responseText.substring(startIndex, endIndex);
        }
        
        const verification = JSON.parse(jsonText);
        
        const validEvents = [];
        const invalidEvents = [];
        
        events.forEach((event, index) => {
            const validation = verification.validations?.[index];
            if (validation && validation.isValid && validation.dateCorrect) {
                validEvents.push(event);
                console.log(`      ‚úÖ [GEMINI] "${event.titre}" (${event.year}) [Niveau ${event.difficultyLevel || 'N/A'}] - Valid√© (${validation.confidence})`);
            } else {
                invalidEvents.push({ event, reason: validation?.reason || 'Non v√©rifi√© par Gemini' });
                console.log(`      ‚ùå [GEMINI] "${event.titre}" (${event.year}) [Niveau ${event.difficultyLevel || 'N/A'}] - ${validation?.reason || 'Erreur validation'}`);
            }
        });
        
        console.log(`      üìä [GEMINI] V√©rification: ${validEvents.length}/${events.length} valid√©s`);
        
        return { validEvents, invalidEvents };
        
    } catch (error) {
        console.error(`      ‚ùå [GEMINI] Erreur v√©rification:`, error.message);
        // CONSERVATION: Fallback conservateur
        return { validEvents: events, invalidEvents: [] };
    }
}

// ==============================================================================
// ENRICHISSEMENT CONTEXTUEL ROBUSTE (GEMINI)
// ==============================================================================

async function enrichEventWithGemini(event, attemptNumber = 1) {
    console.log(`      üîç [GEMINI] Enrichissement contextuel: "${event.titre}" (${event.year}) [Niveau ${event.difficultyLevel || 'N/A'}]...`);
    
    if (attemptNumber > 1) {
        console.log(`      üîÑ [GEMINI] Tentative ${attemptNumber}/2 apr√®s erreur connexion`);
    }
    
    const prompt = `Tu es un historien expert. Enrichis cet √©v√©nement pour une illustration historiquement exacte :

√âV√âNEMENT : "${event.titre}" (${event.year})
TYPE : ${event.type}
R√âGION : ${event.region}
LIEU : ${event.specificLocation}
NIVEAU DIFFICULT√â : ${event.difficultyLevel || 'N/A'}

MISSION : Fournir contexte historique pr√©cis et √©l√©ments visuels essentiels pour Flux-schnell.

FORMAT JSON REQUIS :
{
  "contextHistorique": "Description pr√©cise 1-2 phrases avec acteurs cl√©s",
  "elementsVisuelsEssentiels": [
    "3-4 √©l√©ments visuels PRIORITAIRES et sp√©cifiques",
    "Personnages avec v√™tements pr√©cis ${event.year}", 
    "Objets/armes/outils caract√©ristiques √©poque",
    "Architecture/lieu distinctif"
  ],
  "sceneIdeale": "Description concise sc√®ne principale",
  "motsClesVisuels": ["5-6 mots-cl√©s visuels pr√©cis"],
  "atmosphere": "Ambiance (dramatique, c√©r√©monielle, etc.)",
  "periodeSpecifique": "Contexte temporel pr√©cis"
}

EXIGENCE : Exactitude historique absolue pour ${event.year}.`;

    try {
        const responseText = await callGemini(prompt, {
            model: GEMINI_CONFIG.contextEnrichment,
            maxOutputTokens: 600,
            temperature: 0.3,
            responseFormat: 'json'
        });
        
        // CONSERVATION: Extraction JSON
        let jsonText = responseText;
        if (responseText.includes('```json')) {
            const match = responseText.match(/```json\s*([\s\S]*?)\s*```/);
            if (match) {
                jsonText = match[1];
            }
        } else if (responseText.includes('{')) {
            const startIndex = responseText.indexOf('{');
            const endIndex = responseText.lastIndexOf('}') + 1;
            jsonText = responseText.substring(startIndex, endIndex);
        }
        
        const enrichedData = JSON.parse(jsonText);
        
        console.log(`      üìä [GEMINI] Enrichissement re√ßu:`);
        console.log(`      üìÑ Contexte: "${enrichedData.contextHistorique}"`);
        console.log(`      üé® √âl√©ments (${enrichedData.elementsVisuelsEssentiels.length}): ${JSON.stringify(enrichedData.elementsVisuelsEssentiels)}`);
        console.log(`      üè∑Ô∏è Mots-cl√©s: ${JSON.stringify(enrichedData.motsClesVisuels)}`);
        console.log(`      üé¨ Sc√®ne: "${enrichedData.sceneIdeale}"`);
        console.log(`      üåü Atmosph√®re: "${enrichedData.atmosphere}"`);
        
        return {
            ...event,
            enrichissement: enrichedData
        };
        
    } catch (error) {
        console.error(`      ‚ùå [GEMINI] Erreur enrichissement:`, error.message);
        
        // CONSERVATION: Retry automatique pour erreurs de connexion
        if (error.message.includes('Connection error') && attemptNumber < 2) {
            console.log(`      üîÑ [GEMINI] Retry enrichissement (erreur connexion)...`);
            await new Promise(resolve => setTimeout(resolve, 3000));
            return await enrichEventWithGemini(event, attemptNumber + 1);
        }
        
        return {
            ...event,
            enrichissement: {
                contextHistorique: `√âv√©nement historique de ${event.year}`,
                elementsVisuelsEssentiels: [`Sc√®ne ${event.type.toLowerCase()}`, `V√™tements ${event.year}`, "Architecture d'√©poque"],
                sceneIdeale: `Repr√©sentation ${event.titre}`,
                motsClesVisuels: ["historical", "period", "scene"],
                atmosphere: "historique",
                periodeSpecifique: event.year.toString()
            }
        };
    }
}

// ==============================================================================
// G√âN√âRATION PROMPTS OPTIMIS√âE POUR FLUX-SCHNELL (GEMINI)
// ==============================================================================

function countWords(text) {
    return text.trim().split(/\s+/).length;
}

function optimizePromptIntelligently(prompt) {
    console.log(`      üîß Optimisation intelligente de ${countWords(prompt)} mots:`);
    
    // CONSERVATION: Extraire et pr√©server les √©l√©ments critiques AVANT optimisation
    const yearMatch = prompt.match(/\b(1\d{3}|20\d{2})\b/);
    const periodMatch = prompt.match(/\b(ancient|medieval|renaissance|industrial|modern)\s+period\b/i);
    
    let optimized = prompt
        .replace(/\b(the|a|an|with|and|of|in|at|on|for|very|quite|rather|extremely)\b/gi, '')
        .replace(/\b(also|furthermore|moreover|however|therefore|thus)\b/gi, '')
        .replace(/historical accuracy/gi, 'historical')
        .replace(/photorealistic/gi, 'realistic')
        .replace(/dramatic scene/gi, 'dramatic')
        .replace(/\s+/g, ' ')
        .replace(/,\s*/g, ',')
        .replace(/\.\s*/g, ' ')
        .trim();
    
    // CONSERVATION: RESTAURER les √©l√©ments critiques si supprim√©s par l'optimisation
    if (yearMatch && !optimized.includes(yearMatch[0])) {
        optimized = `${optimized}, ${yearMatch[0]}`;
        console.log(`      üîß Ann√©e ${yearMatch[0]} restaur√©e`);
    }
    
    if (periodMatch && !optimized.toLowerCase().includes(periodMatch[0].toLowerCase())) {
        optimized = `${optimized}, ${periodMatch[0]}`;
        console.log(`      üîß P√©riode ${periodMatch[0]} restaur√©e`);
    }
    
    const wordsAfter = countWords(optimized);
    console.log(`      üìä R√©duction intelligente: ${countWords(prompt)} ‚Üí ${wordsAfter} mots`);
    console.log(`      üõ°Ô∏è √âl√©ments critiques pr√©serv√©s: ann√©e + p√©riode`);
    
    return optimized;
}

async function generateOptimizedFluxPromptWithGemini(enrichedEvent) {
    console.log(`      üé® [GEMINI] G√©n√©ration prompt visuel optimis√© pour "${enrichedEvent.titre}"...`);
    
    const enrichissement = enrichedEvent.enrichissement;
    const epoch = enrichedEvent.year < 476 ? 'ancient' : 
                  enrichedEvent.year < 1492 ? 'medieval' : 
                  enrichedEvent.year < 1789 ? 'renaissance' : 
                  enrichedEvent.year < 1914 ? 'industrial' : 'modern';
    
    const promptForGemini = `Tu es un expert en prompts pour Flux-schnell. G√©n√®re le MEILLEUR prompt possible pour illustrer cet √©v√©nement historique.

√âV√âNEMENT √Ä ILLUSTRER :
- Titre : "${enrichedEvent.titre}"
- Ann√©e : ${enrichedEvent.year} (p√©riode ${epoch})
- Niveau : ${enrichedEvent.difficultyLevel || 'N/A'}
- Contexte : ${enrichissement.contextHistorique}
- Sc√®ne id√©ale : ${enrichissement.sceneIdeale}
- √âl√©ments visuels : ${enrichissement.elementsVisuelsEssentiels.join(', ')}
- Atmosph√®re : ${enrichissement.atmosphere}

üéØ MISSION CRITIQUE : Cr√©er un prompt Flux-schnell qui g√©n√®re une illustration PARFAITE de cet √©v√©nement historique.

üìã R√àGLES ABSOLUES FLUX-SCHNELL :
1. INCLURE OBLIGATOIREMENT : "${enrichedEvent.year}" ET "${epoch} period" dans le prompt
2. Z√âRO TEXTE dans l'image : Aucun mot, chiffre, panneau, inscription visible
3. MAXIMUM ${FLUX_SCHNELL_LIMITS.TARGET_WORDS} mots (limite T5 : ${FLUX_SCHNELL_LIMITS.TARGET_T5_TOKENS} tokens)
4. Mots-cl√©s CONCRETS et visuellement PR√âCIS
5. Structure : [Personnages p√©riode] [action] [objets √©poque] [environnement] [style]

üé® OPTIMISATIONS FLUX-SCHNELL :
- Utiliser "cinematic", "detailed", "realistic" (mots-cl√©s Flux performants)
- √âviter articles (the, a, an) et pr√©positions inutiles  
- Prioriser : V√äTEMENTS √âPOQUE + OBJETS + ACTION + COULEURS
- Sp√©cifier mat√©riaux (wood, stone, metal, fabric)

üö´ INTERDICTIONS STRICTES :
- text, writing, letters, numbers, signs, inscriptions, words
- wings, angel, flying, supernatural, god, deity, magical, glowing, divine
- modern objects, cars, phones, contemporary clothing

üìê STRUCTURE OPTIMALE R√âALISTE :
[People in ${enrichedEvent.year} clothing] [specific action] [period objects] [${epoch} environment], cinematic, detailed

üéØ EXEMPLES PERFORMANTS :
- "Soldiers in 1798 blue uniforms firing muskets, battlefield smoke, ${epoch} period, cinematic, detailed"
- "Man in 1752 colonial coat holding brass key, stormy sky, wooden shelter, ${epoch} period, realistic"

‚ö° R√âPONDS UNIQUEMENT avec le prompt Flux-schnell OPTIMAL incluant "${enrichedEvent.year}" et "${epoch} period", MAXIMUM ${FLUX_SCHNELL_LIMITS.TARGET_WORDS} MOTS.`;

    try {
        const fluxPrompt = await callGemini(promptForGemini, {
            model: GEMINI_CONFIG.promptGeneration,
            maxOutputTokens: 120,
            temperature: 0.7
        });
        
        let cleanPrompt = fluxPrompt.trim().replace(/^["']|["']$/g, '');
        
        const initialWords = countWords(cleanPrompt);
        console.log(`      üìä [GEMINI] Prompt initial: "${cleanPrompt}" (${initialWords} mots)`);
        
        // CONSERVATION: V√âRIFICATION CRITIQUE : Ann√©e et p√©riode pr√©sentes
        const epoch = enrichedEvent.year < 476 ? 'ancient' : 
                     enrichedEvent.year < 1492 ? 'medieval' : 
                     enrichedEvent.year < 1789 ? 'renaissance' : 
                     enrichedEvent.year < 1914 ? 'industrial' : 'modern';
        
        const hasYear = cleanPrompt.includes(enrichedEvent.year.toString());
        const hasPeriod = cleanPrompt.includes('period') || cleanPrompt.includes(epoch);
        
        console.log(`      üîç V√©rification ann√©e ${enrichedEvent.year}: ${hasYear ? '‚úÖ' : '‚ùå'}`);
        console.log(`      üîç V√©rification p√©riode ${epoch}: ${hasPeriod ? '‚úÖ' : '‚ùå'}`);
        
        // CONSERVATION: CORRECTION AUTOMATIQUE si manquants
        if (!hasYear || !hasPeriod) {
            console.log(`      üîß Correction automatique: ajout ann√©e/p√©riode manquante`);
            let corrections = [];
            if (!hasYear) corrections.push(enrichedEvent.year.toString());
            if (!hasPeriod) corrections.push(`${epoch} period`);
            cleanPrompt = `${cleanPrompt}, ${corrections.join(', ')}`;
            console.log(`      ‚úÖ Prompt corrig√©: "${cleanPrompt}"`);
        }
        
        // CONSERVATION: Optimisation si n√©cessaire
        if (countWords(cleanPrompt) > FLUX_SCHNELL_LIMITS.TARGET_WORDS) {
            console.log(`      ‚ö†Ô∏è D√©passement limite, optimisation intelligente...`);
            cleanPrompt = optimizePromptIntelligently(cleanPrompt);
            
            // Re-v√©rification apr√®s optimisation
            if (!cleanPrompt.includes(enrichedEvent.year.toString())) {
                cleanPrompt = `${cleanPrompt}, ${enrichedEvent.year}`;
            }
            if (!cleanPrompt.includes('period') && !cleanPrompt.includes(epoch)) {
                cleanPrompt = `${cleanPrompt}, ${epoch} period`;
            }
        }
        
        // CONSERVATION: Ajout enhancers optimis√©s pour Flux-schnell
        const finalWords = countWords(cleanPrompt);
        const remainingWords = FLUX_SCHNELL_LIMITS.TARGET_WORDS - finalWords;
        
        let enhancers = [];
        if (remainingWords >= 2) enhancers.push("cinematic");
        if (remainingWords >= 3) enhancers.push("detailed");
        if (remainingWords >= 4) enhancers.push("realistic");
        
        const finalPrompt = enhancers.length > 0 ? `${cleanPrompt}, ${enhancers.join(', ')}` : cleanPrompt;
        const finalWordCount = countWords(finalPrompt);
        
        console.log(`      üìä [GEMINI] Prompt final OPTIMIS√â: "${finalPrompt}"`);
        console.log(`      üìè Longueur: ${finalWordCount} mots (~${Math.round(finalWordCount * 4)} tokens T5)`);
        console.log(`      ‚úÖ Limite respect√©e: ${finalWordCount <= FLUX_SCHNELL_LIMITS.TARGET_WORDS ? 'OUI' : 'NON'}`);
        console.log(`      üìÖ Ann√©e ${enrichedEvent.year}: ${finalPrompt.includes(enrichedEvent.year.toString()) ? '‚úÖ' : '‚ùå'}`);
        console.log(`      üèõÔ∏è P√©riode ${epoch}: ${finalPrompt.includes('period') || finalPrompt.includes(epoch) ? '‚úÖ' : '‚ùå'}`);
        console.log(`      üõ°Ô∏è Anti-texte/surnaturel: ACTIV√â`);
        
        return finalPrompt;
        
    } catch (error) {
        console.error(`      ‚ùå [GEMINI] Erreur g√©n√©ration prompt:`, error.message);
        // CONSERVATION: Fallback intelligent avec ann√©e et p√©riode OBLIGATOIRES
        const epoch = enrichedEvent.year < 476 ? 'ancient' : 
                     enrichedEvent.year < 1492 ? 'medieval' : 
                     enrichedEvent.year < 1789 ? 'renaissance' : 
                     enrichedEvent.year < 1914 ? 'industrial' : 'modern';
        
        const fallbackPrompt = `${enrichissement.motsClesVisuels.slice(0, 2).join(' ')}, ${enrichedEvent.year}, ${epoch} period, historical scene, cinematic`;
        console.log(`      üîÑ Prompt de secours OPTIMIS√â: "${fallbackPrompt}"`);
        return fallbackPrompt;
    }
}

// ==============================================================================
// G√âN√âRATION D'IMAGE OPTIMIS√âE FLUX-SCHNELL (CONSERVATION COMPL√àTE)
// ==============================================================================

async function generateImageEnhanced(prompt, event) {
    console.log(`      üñºÔ∏è [FLUX] G√©n√©ration optimis√©e: ${prompt.substring(0, 60)}...`);
    console.log(`      üìä Analyse: ${countWords(prompt)} mots (~${Math.round(countWords(prompt) * 4)} tokens)`);
    
    // CONSERVATION: Configuration Flux-schnell OPTIMIS√âE pour √©v√©nements historiques
    const fluxConfig = {
        prompt,
        negative_prompt: `modern text, dates, titles, large inscriptions, contemporary writing, modern typography, ${event.year}, "${event.titre}", wings, angel, flying, supernatural, mythological, god, deity, magical, glowing, divine, fantasy creature, unrealistic anatomy, modern objects, smartphones, cars, phones, computers, electronics, contemporary clothing, jeans, t-shirt, sneakers, digital art, cartoon, anime, manga, abstract, blurry, low quality, science fiction, alien, spaceship, robot, cyberpunk`,
        aspect_ratio: "16:9",
        num_inference_steps: FLUX_SCHNELL_CONFIG.steps,
        output_format: "webp",
        output_quality: FLUX_SCHNELL_CONFIG.quality,
        seed: FLUX_SCHNELL_CONFIG.seed(),
        guidance_scale: 2.5  // Optimis√© pour Flux-schnell historique
    };
    
    console.log(`      üõ°Ô∏è [FLUX] Protection intelligente activ√©e (√©vite date ${event.year} et titre)`);
    console.log(`      üé® [FLUX] Configuration historique optimis√©e`);
    
    try {
        const output = await replicate.run("black-forest-labs/flux-schnell", {
            input: fluxConfig
        });

        if (Array.isArray(output) && output[0] && typeof output[0] === 'string' && output[0].startsWith('http')) {
            console.log(`      ‚úÖ [FLUX] Image g√©n√©r√©e avec succ√®s: ${output[0]}`);
            return output[0];
        }

        // CONSERVATION: Fallback avec predictions pour monitoring avanc√©
        console.log(`      üîÑ [FLUX] Passage en mode prediction pour monitoring...`);
        const model = await replicate.models.get("black-forest-labs", "flux-schnell");
        const prediction = await replicate.predictions.create({
            version: model.latest_version.id,
            input: fluxConfig
        });

        let finalPrediction = prediction;
        let attempts = 0;
        const maxAttempts = 30;

        while (finalPrediction.status !== 'succeeded' && finalPrediction.status !== 'failed' && attempts < maxAttempts) {
            await new Promise(resolve => setTimeout(resolve, 2000));
            finalPrediction = await replicate.predictions.get(prediction.id);
            attempts++;
            
            if (attempts % 5 === 0) {
                console.log(`      ‚è≥ [FLUX] G√©n√©ration en cours... (${attempts}/${maxAttempts}) - Status: ${finalPrediction.status}`);
            }
        }

        if (finalPrediction.status === 'succeeded' && finalPrediction.output?.[0]) {
            console.log(`      ‚úÖ [FLUX] Image g√©n√©r√©e avec succ√®s (prediction): ${finalPrediction.output[0]}`);
            return finalPrediction.output[0];
        }

        if (finalPrediction.status === 'failed') {
            console.log(`      ‚ùå [FLUX] √âchec de g√©n√©ration: ${finalPrediction.error || 'Erreur inconnue'}`);
            console.log(`      üìù [FLUX] Prompt utilis√©: "${prompt}"`);
        }

        return null;

    } catch (error) {
        console.error(`      ‚ùå [FLUX] Erreur de g√©n√©ration:`, error.message);
        console.log(`      üìù [FLUX] Prompt qui a √©chou√©: "${prompt}"`);
        return null;
    }
}

// ==============================================================================
// VALIDATION INTELLIGENTE GEMINI VISION (REMPLACE GPT-4O-MINI)
// ==============================================================================

async function validateImageWithGemini(event, imageUrl) {
    console.log(`   üîç [GEMINI-VISION] Validation intelligente pour ${event.year} [Niveau ${event.difficultyLevel || 'N/A'}]...`);
    
    const prompt = `√âvalue cette image pour l'√©v√©nement "${event.titre}" (${event.year}).

VALIDATION HISTORIQUE INTELLIGENTE :

üö´ CRIT√àRES DE REJET AUTOMATIQUE UNIQUEMENT SI :
1. TEXTE INTERDIT : Date "${event.year}" visible ou titre "${event.titre}" √©crit dans l'image
2. TEXTE PRO√âMINENT : Gros titre, panneau principal, inscription majeure au premier plan
3. ANACHRONISMES MYTHOLOGIQUES : ailes, cr√©atures volantes, anges, dieux, pouvoirs surnaturels
4. ANACHRONISMES MODERNES : voitures, smartphones, v√™tements contemporains
5. ANATOMIE IMPOSSIBLE : humains volants, cr√©atures fantastiques
6. √âPOQUE INCORRECTE : diff√©rence >50 ans avec ${event.year}

‚úÖ TEXTE ACCEPTABLE (ne pas rejeter) :
- Texte sur livres, manuscrits, parchemins (arri√®re-plan)
- Inscriptions sur banni√®res, blasons, architecture
- Texte flou, illisible ou d√©coratif
- √âcritures anciennes sur objets d'√©poque

‚úÖ ACCEPTER SI :
1. Aucun texte interdit (date ${event.year} ou titre "${event.titre}")
2. Texte √©ventuel reste discret et d'√©poque
3. PERSONNAGES HUMAINS NORMAUX avec anatomie r√©aliste
4. V√äTEMENTS coh√©rents avec l'√©poque (tol√©rance ¬±25 ans)
5. OBJETS/OUTILS d'√©poque appropri√©s
6. √âVOQUE l'√©v√©nement historique sans fantaisie

‚ö†Ô∏è ATTENTION SP√âCIALE :
- Les personnages historiques √©taient des HUMAINS NORMAUX
- Aucun pouvoir surnaturel, vol, magie
- R√©alisme documentaire requis
- Un peu de texte d'√©poque est historiquement normal

JSON OBLIGATOIRE:
{
  "hasForbiddenText": true/false,
  "forbiddenTextDescription": "description du texte interdit s'il y en a (date ${event.year} ou titre visible)",
  "hasAcceptableText": true/false,
  "acceptableTextDescription": "description du texte acceptable (livres, banni√®res, etc.)",
  "representsEvent": true/false,
  "eventRelevance": "description pr√©cise de ce que montre l'image",
  "hasWingsOrSupernatural": true/false,
  "hasModernObjects": true/false,
  "anatomyRealistic": true/false,
  "historicalAccuracy": true/false,
  "periodClothing": true/false,
  "overallValid": true/false,
  "score": number 1-10,
  "reason": "explication d√©taill√©e de l'√©valuation"
}`;

    try {
        const responseText = await callGeminiWithImage(prompt, imageUrl, {
            model: GEMINI_CONFIG.imageValidation,
            maxOutputTokens: 350,
            temperature: 0.05
        });

        const result = JSON.parse(responseText);
        
        console.log(`      üìä [GEMINI-VISION] Validation INTELLIGENTE:`);
        console.log(`      üö´ Texte interdit (date/titre): ${result.hasForbiddenText ? '‚ùå' : '‚úÖ'}`);
        if (result.hasForbiddenText) {
            console.log(`      üö´ Texte interdit d√©tect√©: "${result.forbiddenTextDescription}"`);
        }
        console.log(`      üìù Texte acceptable: ${result.hasAcceptableText ? '‚úÖ' : 'Aucun'}`);
        if (result.hasAcceptableText) {
            console.log(`      üìù Texte acceptable: "${result.acceptableTextDescription}"`);
        }
        console.log(`      üéØ Repr√©sente √©v√©nement: ${result.representsEvent}`);
        console.log(`      üëº Ailes/Surnaturel: ${result.hasWingsOrSupernatural}`);
        console.log(`      üì± Objets modernes: ${result.hasModernObjects}`);
        console.log(`      üßç Anatomie r√©aliste: ${result.anatomyRealistic}`);
        console.log(`      üëî V√™tements d'√©poque: ${result.periodClothing}`);
        console.log(`      üìù Pertinence: "${result.eventRelevance}"`);
        console.log(`      üìä Score: ${result.score}/10`);
        console.log(`      üí≠ Raison: "${result.reason}"`);
        
        // CONSERVATION: REJET SEULEMENT SI TEXTE VRAIMENT INTERDIT
        const isValid = !result.hasForbiddenText && 
                       !result.hasWingsOrSupernatural && 
                       !result.hasModernObjects && 
                       result.anatomyRealistic && 
                       result.periodClothing && 
                       result.score >= MIN_VALIDATION_SCORE && 
                       result.overallValid && 
                       result.historicalAccuracy && 
                       result.representsEvent;

        if (isValid) {
            console.log(`      ‚úÖ [GEMINI-VISION] Image VALID√âE (${result.score}/10) - Crit√®res respect√©s`);
            if (result.hasAcceptableText) {
                console.log(`      üéØ SUCC√àS: Texte acceptable tol√©r√© + R√©alisme historique confirm√©`);
            } else {
                console.log(`      üéØ SUCC√àS: Aucun texte + R√©alisme historique confirm√©`);
            }
        } else {
            console.log(`      ‚ùå [GEMINI-VISION] Validation √©chou√©e - Score/crit√®res insuffisants`);
        }
        
        // CONSERVATION: Retourner les donn√©es compl√®tes au lieu d'un simple bool√©en
        return {
            isValid,
            score: result.score,
            explanation: result.reason,
            detailedAnalysis: {
                hasForbiddenText: result.hasForbiddenText,
                forbiddenTextDescription: result.forbiddenTextDescription,
                hasAcceptableText: result.hasAcceptableText,
                acceptableTextDescription: result.acceptableTextDescription,
                representsEvent: result.representsEvent,
                eventRelevance: result.eventRelevance,
                hasWingsOrSupernatural: result.hasWingsOrSupernatural,
                hasModernObjects: result.hasModernObjects,
                anatomyRealistic: result.anatomyRealistic,
                historicalAccuracy: result.historicalAccuracy,
                periodClothing: result.periodClothing,
                overallValid: result.overallValid
            }
        };
        
    } catch (error) {
        console.error(`      ‚ùå [GEMINI-VISION] Erreur validation:`, error.message);
        return {
            isValid: false,
            score: 0,
            explanation: `Erreur de validation: ${error.message}`,
            detailedAnalysis: {
                hasForbiddenText: false,
                hasAcceptableText: false,
                representsEvent: false,
                hasWingsOrSupernatural: false,
                hasModernObjects: false,
                anatomyRealistic: false,
                historicalAccuracy: false,
                periodClothing: false,
                overallValid: false
            }
        };
    }
}

// ==============================================================================
// TRAITEMENT STRAT√âGIE HYBRIDE OPTIMALE (CONSERVATION + GEMINI)
// ==============================================================================

async function processEventWithHybridStrategy(event) {
    console.log(`\n   üñºÔ∏è [HYBRID] Traitement: "${event.titre}" (${event.year}) [Niveau ${event.difficultyLevel || 'N/A'}]`);
    
    // Phase 1: Enrichissement avec Gemini (remplace Claude 3.5 Sonnet)
    console.log(`      üìö Phase 1: [GEMINI] Enrichissement contextuel...`);
    const enrichedEvent = await enrichEventWithGemini(event);
    
    let successfullyCreated = false;
    let validationData = null; // CONSERVATION: Variable pour stocker les donn√©es de validation
    
    for (let attempt = 1; attempt <= MAX_IMAGE_ATTEMPTS && !successfullyCreated; attempt++) {
        console.log(`      üé® Phase 2: G√©n√©ration image - Tentative ${attempt}/${MAX_IMAGE_ATTEMPTS}`);
        
        try {
            // Phase 2a: G√©n√©ration prompt avec Gemini (remplace GPT-4o)
            const optimizedPrompt = await generateOptimizedFluxPromptWithGemini(enrichedEvent);
            
            // Phase 2b: G√©n√©ration image avec Flux-schnell (CONSERV√â)
            const imageUrl = await generateImageEnhanced(optimizedPrompt, enrichedEvent);
            
            if (!imageUrl) {
                console.log("      ‚ùå √âchec g√©n√©ration image");
                continue;
            }
            
            // Phase 3: Validation avec Gemini Vision (remplace GPT-4o-mini)
            const validationResult = await validateImageWithGemini(enrichedEvent, imageUrl);
            validationData = validationResult; // Sauvegarder les donn√©es de validation
            
            if (validationResult.isValid) {
                try {
                    console.log(`      üì§ [HYBRID] Upload vers Supabase...`);
                    const uploadedUrl = await uploadImageToSupabase(imageUrl, event.titre);
                    
                    // CONSERVATION: Passer les donn√©es de validation √† enrichAndFinalizeEvent
                    const finalEvent = enrichAndFinalizeEvent(enrichedEvent, uploadedUrl, optimizedPrompt, validationData);
                    await insertValidatedEvent(finalEvent);
                    
                    addToCache(event.titre);
                    console.log(`      ‚úÖ [HYBRID] √âv√©nement cr√©√© avec succ√®s !`);
                    console.log(`      üìä Strat√©gie: Gemini‚ÜíGemini‚ÜíFlux‚ÜíGemini-Vision (√âCONOMIES 90%+)`);
                    console.log(`      ü§ñ Validation IA sauvegard√©e: Score ${validationData.score}/10`);
                    console.log(`      üéØ Niveau de difficult√©: ${event.difficultyLevel || 'N/A'}`);
                    successfullyCreated = true;
                    return finalEvent;
                    
                } catch (uploadError) {
                    console.error(`      ‚ùå Erreur upload:`, uploadError.message);
                    
                    if (attempt === MAX_IMAGE_ATTEMPTS) {
                        try {
                            const finalEvent = enrichAndFinalizeEvent(enrichedEvent, imageUrl, optimizedPrompt, validationData);
                            await insertValidatedEvent(finalEvent);
                            addToCache(event.titre);
                            console.log(`      ‚úÖ [HYBRID] Cr√©√© avec URL directe !`);
                            console.log(`      ü§ñ Validation IA sauvegard√©e: Score ${validationData.score}/10`);
                            console.log(`      üéØ Niveau de difficult√©: ${event.difficultyLevel || 'N/A'}`);
                            return finalEvent;
                        } catch (directError) {
                            console.error(`      ‚ùå √âchec URL directe:`, directError.message);
                        }
                    }
                }
            } else {
                console.log("      ‚ùå Image non valid√©e, nouvelle tentative...");
                console.log(`      üìä Score obtenu: ${validationData.score}/10 (min requis: ${MIN_VALIDATION_SCORE})`);
            }
            
        } catch (error) {
            console.error(`      ‚ùå Erreur tentative ${attempt}:`, error.message);
        }
        
        if (attempt < MAX_IMAGE_ATTEMPTS) {
            await new Promise(resolve => setTimeout(resolve, 2000));
        }
    }
    
    // CONSERVATION: Fallback
    console.log(`      üîÑ FALLBACK: Image par d√©faut...`);
    try {
        const defaultImageUrl = `https://via.placeholder.com/800x450/8B4513/FFFFFF?text=${encodeURIComponent(event.year + ' - ' + event.type)}`;
        
        // CONSERVATION: Utiliser les derni√®res donn√©es de validation m√™me en fallback
        const finalEvent = enrichAndFinalizeEvent(enrichedEvent, defaultImageUrl, "Image par d√©faut", validationData);
        await insertValidatedEvent(finalEvent);
        
        addToCache(event.titre);
        console.log(`      ‚úÖ [HYBRID] Cr√©√© avec fallback !`);
        console.log(`      üéØ Niveau de difficult√©: ${event.difficultyLevel || 'N/A'}`);
        if (validationData) {
            console.log(`      ü§ñ Validation IA sauvegard√©e: Score ${validationData.score}/10`);
        }
        return finalEvent;
        
    } catch (fallbackError) {
        console.error(`      ‚ùå [HYBRID] √âchec total:`, fallbackError.message);
        return null;
    }
}

// ==============================================================================
// FONCTIONS UTILITAIRES (CONSERVATION COMPL√àTE)
// ==============================================================================

async function uploadImageToSupabase(imageUrl, eventTitle) {
    const response = await fetch(imageUrl);
    const imageBuffer = await response.arrayBuffer();
    const processedBuffer = await sharp(Buffer.from(imageBuffer))
        .webp({ quality: 85 })
        .resize(800, 450, { fit: 'cover' })
        .toBuffer();
        
    const fileName = `gemini_${eventTitle.toLowerCase().replace(/[^a-z0-9]/g, '_').substring(0, 30)}_${Date.now()}.webp`;
    
    const { error } = await supabase.storage
        .from('evenements-image')
        .upload(fileName, processedBuffer, { 
            contentType: 'image/webp', 
            upsert: true 
        });
        
    if (error) throw error;
    
    const { data: { publicUrl } } = supabase.storage
        .from('evenements-image')
        .getPublicUrl(fileName);
        
    return publicUrl;
}

// CONSERVATION: Fonction modifi√©e pour inclure les donn√©es de validation IA + niveau
function enrichAndFinalizeEvent(enrichedEvent, imageUrl, illustrationPrompt, validationData = null) {
    const year = parseInt(enrichedEvent.year);
    const epoch = year < 476 ? 'Antiquit√©' : 
                  year < 1492 ? 'Moyen √Çge' : 
                  year < 1789 ? 'Moderne' : 
                  year < 1914 ? 'Contemporaine' : 'XXe';
                  
    const finalEvent = {
        date: `${enrichedEvent.year.toString().padStart(4, '0')}-01-01`,
        titre: enrichedEvent.titre,
        universel: enrichedEvent.region?.toLowerCase() !== 'europe',
        langue: 'fr',
        ecart_temps_max: 300,
        facteur_variation: 1.5,
        illustration_url: imageUrl,
        region: enrichedEvent.region || enrichedEvent.specificLocation,
        niveau_difficulte: enrichedEvent.difficultyLevel || Math.min(6, Math.max(2, Math.floor((year - 1400) / 100) + 2)),
        types_evenement: [enrichedEvent.type],
        pays: [enrichedEvent.specificLocation || enrichedEvent.region],
        epoque: epoch,
        mots_cles: enrichedEvent.titre.toLowerCase().replace(/[^\w\s]/g, '').split(' ').filter(w => w.length > 3),
        date_formatee: enrichedEvent.year.toString(),
        code: `gem${Date.now().toString().slice(-6)}`,
        date_precision: 'year',
        ecart_temps_min: 50,
        frequency_score: 0,
        description_detaillee: enrichedEvent.enrichissement?.contextHistorique || enrichedEvent.description,
        prompt_flux: illustrationPrompt
    };

    // CONSERVATION: Ajouter les donn√©es de validation IA si disponibles
    if (validationData) {
        finalEvent.validation_score = validationData.score;
        finalEvent.validation_explanation = validationData.explanation;
        finalEvent.validation_detailed_analysis = validationData.detailedAnalysis;
        
        console.log(`      üíæ [HYBRID] Donn√©es de validation IA ajout√©es:`);
        console.log(`         üìä Score: ${validationData.score}/10`);
        console.log(`         üìù Explication: "${validationData.explanation}"`);
        console.log(`         üîç Analyse d√©taill√©e: ${Object.keys(validationData.detailedAnalysis).length} crit√®res`);
    } else {
        console.log(`      ‚ö†Ô∏è [HYBRID] Aucune donn√©e de validation IA √† sauvegarder`);
    }

    // NOUVEAU: Log niveau de difficult√©
    console.log(`      üéØ [HYBRID] Niveau de difficult√© assign√©: ${finalEvent.niveau_difficulte}`);

    return finalEvent;
}

async function insertValidatedEvent(finalEvent) {
    const { data, error } = await supabase.from('goju').insert([finalEvent]).select();
    if (error) {
        if (error.code === '23505') {
            finalEvent.code = `gem${Date.now().toString().slice(-6)}${Math.floor(Math.random()*100)}`;
            return await insertValidatedEvent(finalEvent);
        }
        throw error;
    }
    return data[0];
}

// ==============================================================================
// TRAITEMENT PRINCIPAL HYBRIDE OPTIMAL AVEC NIVEAUX (CONSERVATION + GEMINI)
// ==============================================================================

async function processBatchHybridWithLevels(startYear, endYear, batchSize, batchNumber, globalDistribution) {
    console.log(`\nüì¶ === LOT ${batchNumber} GEMINI AVEC NIVEAUX CIBL√âS (${batchSize} √©v√©nements) ===`);
    
    // Calculer la r√©partition pour ce lot
    const batchDistribution = calculateBatchDistribution(batchSize, globalDistribution);
    
    console.log(`   üéØ R√©partition cibl√©e pour ce lot:`);
    Object.entries(batchDistribution).forEach(([level, count]) => {
        if (count > 0) {
            console.log(`      Niveau ${level}: ${count} √©v√©nements`);
        }
    });
    
    // Phase 1: G√©n√©ration avec niveaux cibl√©s
    const events = await generateEventBatchWithGeminiLevels(startYear, endYear, batchDistribution, batchNumber);
    if (events.length === 0) {
        console.log("‚ùå [GEMINI] √âchec g√©n√©ration");
        return [];
    }
    
    // Phase 2: V√©rification (CONSERV√âE)
    const { validEvents } = await verifyEventBatchWithGemini(events);
    if (validEvents.length === 0) {
        console.log("‚ùå [GEMINI] Aucun √©v√©nement valid√©");
        return [];
    }
    
    console.log(`\n   üñºÔ∏è [HYBRID] Traitement des images pour ${validEvents.length} √©v√©nements...`);
    
    const completedEvents = [];
    
    for (const event of validEvents) {
        const result = await processEventWithHybridStrategy(event);
        if (result) {
            // NOUVEAU : Assurer que le niveau de difficult√© est pr√©serv√©
            result.niveau_difficulte = event.difficultyLevel || result.niveau_difficulte;
            completedEvents.push(result);
            console.log(`      ‚úÖ [HYBRID] "${event.titre}" trait√© avec succ√®s (Niveau ${result.niveau_difficulte})`);
            // CONSERVATION: Log de confirmation de sauvegarde des donn√©es IA
            if (result.validation_score) {
                console.log(`      ü§ñ [HYBRID] Validation IA: ${result.validation_score}/10 sauvegard√©e en base`);
            }
        } else {
            console.log(`      ‚ùå [HYBRID] √âchec traitement "${event.titre}"`);
        }
        
        await new Promise(resolve => setTimeout(resolve, 1500));
    }
    
    // Statistiques finales du lot avec niveaux
    console.log(`\n   üìä [HYBRID] Bilan lot ${batchNumber}: ${completedEvents.length}/${validEvents.length} r√©ussis`);
    
    const finalDistribution = {};
    for (let i = 1; i <= 7; i++) finalDistribution[i] = 0;
    completedEvents.forEach(event => {
        if (event.niveau_difficulte >= 1 && event.niveau_difficulte <= 7) {
            finalDistribution[event.niveau_difficulte]++;
        }
    });
    
    console.log(`   üìä R√©partition finale du lot:`);
    Object.entries(finalDistribution).forEach(([level, count]) => {
        if (count > 0) {
            const expected = batchDistribution[level] || 0;
            const status = count === expected ? '‚úÖ' : (count > expected ? '‚¨ÜÔ∏è' : '‚¨áÔ∏è');
            console.log(`      Niveau ${level}: ${count}/${expected} ${status}`);
        }
    });
    
    // CONSERVATION: Statistiques de validation IA pour le lot
    const validationStats = completedEvents.filter(e => e.validation_score).length;
    if (validationStats > 0) {
        const avgScore = completedEvents
            .filter(e => e.validation_score)
            .reduce((sum, e) => sum + e.validation_score, 0) / validationStats;
        console.log(`   ü§ñ [HYBRID] Validation IA: ${validationStats}/${completedEvents.length} √©v√©nements analys√©s (score moyen: ${avgScore.toFixed(1)}/10)`);
    }
    
    return completedEvents;
}

// ==============================================================================
// SCRIPT PRINCIPAL OPTIMAL AVEC NIVEAUX (CONSERVATION + GEMINI)
// ==============================================================================

async function mainWithLevels() {
    console.log("\nüöÄ === SAYON GEMINI VERSION COMPL√àTE - GESTION NIVEAUX PAR POURCENTAGES ===");
    console.log("üéØ Configuration IA GEMINI + R√©partition intelligente des niveaux:");
    console.log("   üß† Gemini 2.0 Flash: G√©n√©ration + V√©rification + Enrichissement + Prompts");
    console.log("   üëÅÔ∏è Gemini 2.0 Flash Vision: Validation images");
    console.log("   üñºÔ∏è Flux-schnell: G√©n√©ration images (CONSERV√â)");
    console.log("   üìä NOUVEAU: Gestion des niveaux de difficult√© par pourcentages");
    console.log("üìä Objectifs:");
    console.log("   üìà Taux de r√©ussite: 36% ‚Üí 70-90% (+200-300%)");
    console.log("   üí∞ R√©duction co√ªts: 90-95% vs Claude/GPT");
    console.log("   ‚è±Ô∏è Temps optimis√©: Moins de retry, plus d'efficacit√©");
    console.log("   üéØ Qualit√© maintenue: 8-9/10");
    console.log("   ü§ñ CONSERV√â: Sauvegarde automatique validation IA en base");
    console.log("   üö´ CONSERV√â: Liste COMPL√àTE √©v√©nements p√©riode (anti-doublons renforc√©)");
    console.log("   üÜï NOUVEAU: √âquilibrage parfait des niveaux de difficult√©");
    
    console.log("\nüéØ FONCTIONNALIT√âS CONSERV√âES + AM√âLIOR√âES:");
    console.log("   ‚úÖ 1. Validation intelligente (score min: 4, texte d'√©poque tol√©r√©)");
    console.log("   ‚úÖ 2. Regex compl√®te pour caract√®res fran√ßais");
    console.log("   ‚úÖ 3. Instructions dates renforc√©es");
    console.log("   ‚úÖ 4. ANN√âE + P√âRIODE obligatoires dans prompts Flux");
    console.log("   ‚úÖ 5. Lots optimaux (4 √©v√©nements, √©quilibre qualit√©/quantit√©)");
    console.log("   ‚úÖ 6. Retry automatique (Gemini, robustesse maximale)");
    console.log("   ‚úÖ 7. Diversit√© g√©ographique maximale (15 types d'√©v√©nements)");
    console.log("   ‚úÖ 8. Limite lots √©tendue (75 au lieu de 25)");
    console.log("   ‚úÖ 9. Gestion erreurs compl√®te (continuation forc√©e)");
    console.log("   ‚úÖ 10. Diagnostic intelligent (identification des blocages)");
    console.log("   ‚úÖ 11. Sauvegarde validation IA (score, explication, analyse d√©taill√©e)");
    console.log("   ‚úÖ 12. Liste COMPL√àTE √©v√©nements p√©riode (anti-doublons renforc√©)");
    console.log("   üÜï 13. √âCONOMIES 90-95% avec Gemini 2.0 Flash");
    console.log("   üÜï 14. GESTION NIVEAUX par pourcentages avec presets intelligents");
    console.log("   üÜï 15. DESCRIPTIONS NIVEAUX renforc√©es avec exemples concrets pour Gemini");
    
    // CONSERVATION: V√©rification APIs
    console.log("\nüîß === V√âRIFICATION DES APIS ===");
    if (!process.env.GEMINI_API_KEY) {
        console.error("‚ùå GEMINI_API_KEY manquante dans .env");
        process.exit(1);
    }
    if (!process.env.REPLICATE_API_TOKEN) {
        console.error("‚ùå REPLICATE_API_TOKEN manquante dans .env");
        process.exit(1);
    }
    if (!process.env.SUPABASE_URL) {
        console.error("‚ùå SUPABASE_URL manquante dans .env");
        process.exit(1);
    }
    console.log("‚úÖ APIs configur√©es: Gemini + Replicate + Supabase");
    
    const startYear = parseInt(await askQuestion('üìÖ Ann√©e de D√âBUT : '));
    const endYear = parseInt(await askQuestion('üìÖ Ann√©e de FIN : '));
    const targetCount = parseInt(await askQuestion('üéØ Nombre d\'√©v√©nements : '));
    
    // NOUVEAU: Choix de la r√©partition des niveaux
    const globalDistribution = await askDistributionChoice();
    
    console.log("\nüìä === R√âPARTITION S√âLECTIONN√âE ===");
    Object.entries(globalDistribution).forEach(([level, percentage]) => {
        if (percentage > 0) {
            const estimatedCount = Math.round((targetCount * percentage) / 100);
            console.log(`   Niveau ${level}: ${percentage}% (~${estimatedCount} √©v√©nements)`);
        }
    });
    
    const loadResult = await loadExistingTitles(startYear, endYear);
    
    console.log(`\nüö´ === PROTECTION ANTI-DOUBLONS RENFORC√âE ===`);
    console.log(`üìä Total √©v√©nements en base: ${existingNormalizedTitles.size}`);
    console.log(`üéØ P√©riode cibl√©e: ${startYear}-${endYear}`);
    console.log(`‚ö†Ô∏è D√©fi: ${loadResult.periodEvents.length} √©v√©nements d√©j√† pr√©sents dans cette p√©riode`);
    console.log(`üÜï CONSERV√â: TOUS les ${loadResult.periodEvents.length} √©v√©nements seront list√©s (au lieu de 15)`);
    
    if (loadResult.periodEvents.length > targetCount) {
        console.log(`üî• P√âRIODE TR√àS COUVERTE: ${loadResult.periodEvents.length} existants vs ${targetCount} demand√©s`);
        console.log(`üí° Conseil: Le script va privil√©gier des √©v√©nements moins connus pour √©viter les doublons`);
    }
    
    if (loadResult.periodEvents.length > 0) {
        console.log(`\nüìã √âv√©nements existants dans la p√©riode ${startYear}-${endYear}:`);
        loadResult.periodEvents.slice(0, 10).forEach(title => {
            console.log(`   - ${title}`);
        });
        if (loadResult.periodEvents.length > 10) {
            console.log(`   ... et ${loadResult.periodEvents.length - 10} autres`);
        }
    }
    
    let createdCount = 0;
    let batchNumber = 0;
    const startTime = Date.now();
    let totalValidationCount = 0;
    let totalValidationScoreSum = 0;
    let globalLevelStats = {};
    for (let i = 1; i <= 7; i++) globalLevelStats[i] = 0;
    
    while (createdCount < targetCount && batchNumber < 75) { // CONSERVATION: Limite augment√©e
        batchNumber++;
        const remainingEvents = targetCount - createdCount;
        const currentBatchSize = Math.min(BATCH_SIZE, remainingEvents);
        
        try {
            console.log(`\nüöÄ [GEMINI] D√©but lot ${batchNumber} avec niveaux cibl√©s...`);
            const completedEvents = await processBatchHybridWithLevels(startYear, endYear, currentBatchSize, batchNumber, globalDistribution);
            createdCount += completedEvents.length;
            
            // Mise √† jour des statistiques de niveaux
            completedEvents.forEach(event => {
                if (event.niveau_difficulte >= 1 && event.niveau_difficulte <= 7) {
                    globalLevelStats[event.niveau_difficulte]++;
                }
            });
            
            // CONSERVATION: Statistiques de validation IA globales
            const batchValidations = completedEvents.filter(e => e.validation_score);
            totalValidationCount += batchValidations.length;
            totalValidationScoreSum += batchValidations.reduce((sum, e) => sum + e.validation_score, 0);
            
            const elapsed = (Date.now() - startTime) / 1000;
            const rate = createdCount / (elapsed / 60);
            const lotSuccessRate = ((createdCount / (batchNumber * BATCH_SIZE)) * 100).toFixed(1);
            const realSuccessRate = ((createdCount / targetCount) * 100).toFixed(1);
            
            console.log(`\nüìä BILAN LOT ${batchNumber} GEMINI AVEC NIVEAUX:`);
            console.log(`   ‚úÖ Cr√©√©s: ${completedEvents.length}/${currentBatchSize}`);
            console.log(`   üìà Total: ${createdCount}/${targetCount} (${realSuccessRate}% de l'objectif)`);
            console.log(`   üéØ Taux de r√©ussite lot: ${lotSuccessRate}%`);
            console.log(`   ‚è±Ô∏è Rate: ${rate.toFixed(1)} √©v√©nements/min`);
            console.log(`   üí∞ √âconomies Gemini: 90-95%`);
            console.log(`   ü§ñ Strat√©gie: Gemini‚ÜíGemini‚ÜíFlux‚ÜíGemini-Vision`);
            console.log(`   üéØ Qualit√© maintenue: 8-9/10 avec validation intelligente`);
            
            // Statistiques de niveaux globales
            console.log(`   üìä R√©partition niveaux actuelle:`);
            Object.entries(globalLevelStats).forEach(([level, count]) => {
                if (count > 0) {
                    const percentage = ((count / createdCount) * 100).toFixed(1);
                    const target = globalDistribution[level];
                    const status = Math.abs(percentage - target) <= 5 ? '‚úÖ' : 'üìä';
                    console.log(`      Niveau ${level}: ${count} (${percentage}% vs ${target}% cibl√©) ${status}`);
                }
            });
            
            // CONSERVATION: Stats validation IA
            if (batchValidations.length > 0) {
                const batchAvgScore = batchValidations.reduce((sum, e) => sum + e.validation_score, 0) / batchValidations.length;
                console.log(`   ü§ñ Validation IA lot: ${batchValidations.length}/${completedEvents.length} analys√©s (score moyen: ${batchAvgScore.toFixed(1)}/10)`);
            }
            
        } catch (error) {
            console.error(`‚ùå [GEMINI] Erreur lot ${batchNumber}:`, error.message);
            // CONSERVATION: Continue m√™me en cas d'erreur de lot
            console.log(`üîÑ [GEMINI] Continuation malgr√© l'erreur du lot ${batchNumber}...`);
        }
        
        if (createdCount < targetCount) {
            console.log("   ‚è≥ Pause 3s...");
            await new Promise(resolve => setTimeout(resolve, 3000));
        }
    }
    
    const totalTime = (Date.now() - startTime) / 1000;
    const finalRate = createdCount / (totalTime / 60);
    const finalLotSuccessRate = ((createdCount / (batchNumber * BATCH_SIZE)) * 100).toFixed(1);
    const realFinalSuccessRate = ((createdCount / targetCount) * 100).toFixed(1);
    const globalAvgValidationScore = totalValidationCount > 0 ? (totalValidationScoreSum / totalValidationCount).toFixed(1) : 'N/A';
    
    console.log(`\nüéâ === TRAITEMENT GEMINI AVEC NIVEAUX TERMIN√â ===`);
    console.log(`‚úÖ √âv√©nements cr√©√©s: ${createdCount}/${targetCount} (${realFinalSuccessRate}% de l'objectif)`);
    console.log(`üì¶ Lots trait√©s: ${batchNumber}`);
    console.log(`üéØ Taux de r√©ussite par lot: ${finalLotSuccessRate}%`);
    console.log(`üéØ Taux de r√©ussite global: ${realFinalSuccessRate}%`);
    console.log(`‚è±Ô∏è Temps total: ${Math.floor(totalTime/60)}min ${(totalTime%60).toFixed(0)}s`);
    console.log(`üìà Rate finale: ${finalRate.toFixed(1)} √©v√©nements/min`);
    console.log(`üí∞ √âconomies Gemini: 90-95% vs Claude/GPT`);
    console.log(`ü§ñ Strat√©gie Gemini: 100% Gemini 2.0 Flash + Flux-schnell`);
    console.log(`üéØ Qualit√©: Pr√©cision Gemini + √âconomie maximale + Validation intelligente`);
    console.log(`üÜï Anti-doublons: Liste COMPL√àTE ${loadResult.periodEvents.length} √©v√©nements p√©riode`);
    console.log(`üÜï Niveaux: Gestion intelligente par pourcentages`);
    
    // Bilan final des niveaux
    console.log(`\nüìä === BILAN FINAL R√âPARTITION NIVEAUX ===`);
    Object.entries(globalLevelStats).forEach(([level, count]) => {
        if (count > 0) {
            const actualPercentage = ((count / createdCount) * 100).toFixed(1);
            const targetPercentage = globalDistribution[level];
            const difference = (actualPercentage - targetPercentage).toFixed(1);
            const status = Math.abs(difference) <= 5 ? '‚úÖ OBJECTIF ATTEINT' : 
                          difference > 0 ? `‚¨ÜÔ∏è +${difference}%` : `‚¨áÔ∏è ${difference}%`;
            console.log(`   Niveau ${level}: ${count} √©v√©nements (${actualPercentage}% vs ${targetPercentage}% cibl√©) ${status}`);
        }
    });
    
    // CONSERVATION: Stats finales validation IA
    console.log(`\nü§ñ Validation IA globale: ${totalValidationCount}/${createdCount} √©v√©nements analys√©s (${((totalValidationCount/createdCount)*100).toFixed(1)}%)`);
    if (totalValidationCount > 0) {
        console.log(`üìä Score moyen validation IA: ${globalAvgValidationScore}/10`);
        console.log(`üíæ Donn√©es IA sauvegard√©es en base pour utilisation dans l'interface de validation`);
    }
    
    // CONSERVATION: Diagnostic si taux faible
    if (realFinalSuccessRate < 60) {
        console.log(`\n‚ö†Ô∏è DIAGNOSTIC - Taux < 60% :`);
        console.log(`   ‚Ä¢ P√©riode ${startYear}-${endYear} d√©j√† bien couverte (${loadResult.periodEvents.length} √©v√©nements existants)`);
        console.log(`   ‚Ä¢ Essayez une p√©riode moins couverte ou augmentez la diversit√© g√©ographique`);
        console.log(`   ‚Ä¢ V√©rifiez les logs pour identifier les blocages principaux`);
        console.log(`   ‚Ä¢ R√©essayez avec une p√©riode diff√©rente pour de meilleurs r√©sultats`);
        console.log(`   ‚Ä¢ Ajustez la r√©partition des niveaux selon les besoins`);
    } else {
        console.log(`\nüéä EXCELLENT R√âSULTAT ! Taux > 60% atteint avec √©conomies 90%+ ET niveaux √©quilibr√©s`);
        if (totalValidationCount > 0) {
            console.log(`ü§ñ Bonus: ${totalValidationCount} √©v√©nements avec validation IA compl√®te sauvegard√©e`);
        }
        
        // Bilan des niveaux r√©ussis
        const successfulLevels = Object.entries(globalLevelStats).filter(([level, count]) => {
            const actualPercentage = (count / createdCount) * 100;
            const targetPercentage = globalDistribution[level];
            return Math.abs(actualPercentage - targetPercentage) <= 5;
        }).length;
        
        console.log(`üéØ Bonus Niveaux: ${successfulLevels}/${Object.keys(globalDistribution).filter(k => globalDistribution[k] > 0).length} niveaux dans la cible (¬±5%)`);
    }
    
    rl.close();
}

function askQuestion(query) { 
    return new Promise(resolve => rl.question(query, resolve)); 
}

// ==============================================================================
// LANCEMENT DU SCRIPT AVEC GESTION NIVEAUX
// ==============================================================================

mainWithLevels().catch(error => { 
    console.error("\nüí• [GEMINI] Erreur fatale:", error); 
    rl.close(); 
});