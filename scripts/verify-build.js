const fs = require('fs');
const path = require('path');

console.log('\nüîç V√©rification de la configuration du build...\n');

// 1. V√©rifier la structure des dossiers
const requiredDirs = [
  'plugins',
  'assets/images',
];

const requiredFiles = [
  'app.config.js',
  'eas.json',
  'google-services.json',
  'assets/images/icon.png',
  'assets/images/splash-icon.png',
  'assets/images/logo3.png',
  'plugins/withAdIdPermission.js'
];

let hasError = false;

// V√©rifier les dossiers
console.log('üìÅ V√©rification des dossiers...');
requiredDirs.forEach(dir => {
  if (!fs.existsSync(dir)) {
    console.error(`‚ùå Dossier manquant: ${dir}`);
    hasError = true;
  } else {
    console.log(`‚úÖ ${dir}`);
  }
});

// V√©rifier les fichiers
console.log('\nüìÑ V√©rification des fichiers...');
requiredFiles.forEach(file => {
  if (!fs.existsSync(file)) {
    console.error(`‚ùå Fichier manquant: ${file}`);
    hasError = true;
  } else {
    console.log(`‚úÖ ${file}`);
  }
});

// V√©rifier app.config.js
console.log('\n‚öôÔ∏è  V√©rification de app.config.js...');
try {
  const appConfig = require(path.join(process.cwd(), 'app.config.js'));
  const config = appConfig.default({ config: {} });
  
  if (config.android.versionCode) {
    console.log(`‚úÖ versionCode: ${config.android.versionCode}`);
  } else {
    console.error('‚ùå versionCode manquant');
    hasError = true;
  }
  
  if (config.version) {
    console.log(`‚úÖ version: ${config.version}`);
  } else {
    console.error('‚ùå version manquante');
    hasError = true;
  }
} catch (error) {
  console.error('‚ùå Erreur lors de la lecture de app.config.js:', error.message);
  hasError = true;
}

// V√©rifier eas.json
console.log('\nüì± V√©rification de eas.json...');
try {
  const easConfig = JSON.parse(fs.readFileSync('eas.json', 'utf8'));
  if (easConfig.build && easConfig.build.production) {
    console.log('‚úÖ Profil de production trouv√©');
  } else {
    console.error('‚ùå Profil de production manquant dans eas.json');
    hasError = true;
  }
} catch (error) {
  console.error('‚ùå Erreur lors de la lecture de eas.json:', error.message);
  hasError = true;
}

// Cr√©er le dossier XML si n√©cessaire
const xmlDir = path.join('android', 'app', 'src', 'main', 'res', 'xml');
if (fs.existsSync('android')) {
  if (!fs.existsSync(xmlDir)) {
    console.log('\nüìÇ Cr√©ation du dossier XML...');
    fs.mkdirSync(xmlDir, { recursive: true });
    console.log('‚úÖ Dossier XML cr√©√©');
  }
}

if (hasError) {
  console.log('\n‚ùå Des erreurs ont √©t√© d√©tect√©es. Corrigez-les avant de lancer le build.\n');
  process.exit(1);
} else {
  console.log('\n‚úÖ Toutes les v√©rifications sont pass√©es ! Pr√™t pour le build.\n');
}