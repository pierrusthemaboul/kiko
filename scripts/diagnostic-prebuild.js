const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('\nüîç DIAGNOSTIC COMPLET PR√â-BUILD ANDROID\n');

let hasError = false;
let hasWarning = false;

// 1. V√©rifier les versions des outils
console.log('üì¶ Versions des outils :');
try {
  const easVersion = execSync('eas --version', { encoding: 'utf8' }).trim();
  console.log(`‚úÖ EAS CLI: ${easVersion}`);
} catch (e) {
  console.error('‚ùå EAS CLI non install√©');
  hasError = true;
}

try {
  const expoVersion = execSync('expo --version', { encoding: 'utf8' }).trim();
  console.log(`‚úÖ Expo CLI: ${expoVersion}`);
} catch (e) {
  console.error('‚ùå Expo CLI non install√©');
  hasError = true;
}

// 2. V√©rifier AndroidManifest.xml
console.log('\nüìÑ V√©rification du AndroidManifest.xml :');
const manifestPath = path.join('android', 'app', 'src', 'main', 'AndroidManifest.xml');
if (fs.existsSync(manifestPath)) {
  const manifest = fs.readFileSync(manifestPath, 'utf8');
  
  // V√©rifier le namespace tools
  if (manifest.includes('xmlns:tools="http://schemas.android.com/tools"')) {
    console.log('‚úÖ Namespace tools pr√©sent');
  } else {
    console.error('‚ùå Namespace tools manquant');
    hasError = true;
  }
  
  // V√©rifier la permission AD_ID
  if (manifest.includes('com.google.android.gms.permission.AD_ID') && manifest.includes('tools:node="replace"')) {
    console.log('‚úÖ Permission AD_ID avec tools:node="replace"');
  } else {
    console.error('‚ùå Permission AD_ID mal configur√©e');
    hasError = true;
  }
  
  // V√©rifier ACCESS_ADSERVICES_AD_ID
  if (manifest.includes('android.permission.ACCESS_ADSERVICES_AD_ID')) {
    console.log('‚úÖ Permission ACCESS_ADSERVICES_AD_ID pr√©sente');
  } else {
    console.warn('‚ö†Ô∏è  Permission ACCESS_ADSERVICES_AD_ID manquante (Android 13+)');
    hasWarning = true;
  }
  
  // V√©rifier meta-data AD_SERVICES_CONFIG
  if (manifest.includes('android.adservices.AD_SERVICES_CONFIG')) {
    console.log('‚úÖ Meta-data AD_SERVICES_CONFIG pr√©sente');
  } else {
    console.error('‚ùå Meta-data AD_SERVICES_CONFIG manquante');
    hasError = true;
  }
} else {
  console.error('‚ùå AndroidManifest.xml non trouv√©');
  hasError = true;
}

// 3. V√©rifier le fichier XML de configuration
console.log('\nüìÇ V√©rification des fichiers de configuration :');
const xmlConfigPath = path.join('android', 'app', 'src', 'main', 'res', 'xml', 'gma_ad_services_config.xml');
if (fs.existsSync(xmlConfigPath)) {
  const xmlContent = fs.readFileSync(xmlConfigPath, 'utf8');
  if (xmlContent.includes('<ad-services-config>') && 
      xmlContent.includes('<topics-api>') && 
      xmlContent.includes('<attribution-api>') && 
      xmlContent.includes('<custom-audiences-api>')) {
    console.log('‚úÖ gma_ad_services_config.xml correctement configur√©');
  } else {
    console.error('‚ùå gma_ad_services_config.xml mal configur√©');
    hasError = true;
  }
} else {
  console.error('‚ùå gma_ad_services_config.xml manquant');
  hasError = true;
}

// 4. V√©rifier gradle.properties
console.log('\n‚öôÔ∏è  V√©rification de Gradle :');
const gradlePropertiesPath = path.join('android', 'gradle.properties');
if (fs.existsSync(gradlePropertiesPath)) {
  const gradleProps = fs.readFileSync(gradlePropertiesPath, 'utf8');
  
  // V√©rifier Kotlin version
  const kotlinMatch = gradleProps.match(/kotlinVersion=(.+)/);
  if (kotlinMatch) {
    const kotlinVersion = kotlinMatch[1];
    console.log(`üìå Kotlin version: ${kotlinVersion}`);
    if (kotlinVersion !== '1.9.25') {
      console.warn(`‚ö†Ô∏è  Version Kotlin diff√©rente de 1.9.25 (actuelle: ${kotlinVersion})`);
      hasWarning = true;
    }
  } else {
    console.warn('‚ö†Ô∏è  kotlinVersion non d√©finie dans gradle.properties');
    hasWarning = true;
  }
  
  // V√©rifier autres propri√©t√©s importantes
  if (gradleProps.includes('org.gradle.jvmargs=')) {
    console.log('‚úÖ JVM args configur√©s');
  } else {
    console.warn('‚ö†Ô∏è  JVM args non configur√©s (peut causer des probl√®mes de m√©moire)');
  }
} else {
  console.error('‚ùå gradle.properties non trouv√©');
  hasError = true;
}

// 5. V√©rifier build.gradle (app)
console.log('\nüì± V√©rification de build.gradle :');
const buildGradlePath = path.join('android', 'app', 'build.gradle');
if (fs.existsSync(buildGradlePath)) {
  const buildGradle = fs.readFileSync(buildGradlePath, 'utf8');
  
  // V√©rifier compileSdkVersion
  const compileSdkMatch = buildGradle.match(/compileSdk[Version]?\s*=?\s*(\d+)/);
  if (compileSdkMatch) {
    const compileSdk = parseInt(compileSdkMatch[1]);
    console.log(`‚úÖ compileSdkVersion: ${compileSdk}`);
    if (compileSdk < 35) {
      console.warn(`‚ö†Ô∏è  compileSdkVersion < 35 (actuel: ${compileSdk})`);
      hasWarning = true;
    }
  }
  
  // V√©rifier targetSdkVersion
  const targetSdkMatch = buildGradle.match(/targetSdk[Version]?\s*=?\s*(\d+)/);
  if (targetSdkMatch) {
    const targetSdk = parseInt(targetSdkMatch[1]);
    console.log(`‚úÖ targetSdkVersion: ${targetSdk}`);
    if (targetSdk < 35) {
      console.warn(`‚ö†Ô∏è  targetSdkVersion < 35 (actuel: ${targetSdk})`);
      hasWarning = true;
    }
  }
} else {
  console.error('‚ùå build.gradle non trouv√©');
  hasError = true;
}

// 6. V√©rifier google-services.json
console.log('\nüî• V√©rification Firebase :');
const googleServicesPath = path.join('android', 'app', 'google-services.json');
if (fs.existsSync(googleServicesPath)) {
  const googleServices = JSON.parse(fs.readFileSync(googleServicesPath, 'utf8'));
  if (googleServices.project_info && googleServices.client) {
    console.log('‚úÖ google-services.json pr√©sent et valide');
    console.log(`   Project ID: ${googleServices.project_info.project_id}`);
  } else {
    console.error('‚ùå google-services.json invalide');
    hasError = true;
  }
} else {
  console.error('‚ùå google-services.json manquant dans android/app/');
  hasError = true;
}

// 7. Afficher le contenu du manifest pour debug
if (fs.existsSync(manifestPath)) {
  console.log('\nüìã Extrait du AndroidManifest.xml (permissions AD) :');
  const manifest = fs.readFileSync(manifestPath, 'utf8');
  const lines = manifest.split('\n');
  let inPermissions = false;
  let relevantLines = [];
  
  lines.forEach(line => {
    if (line.includes('uses-permission') && line.includes('AD_ID')) {
      relevantLines.push(line.trim());
    }
    if (line.includes('AD_SERVICES_CONFIG')) {
      relevantLines.push(line.trim());
    }
  });
  
  if (relevantLines.length > 0) {
    relevantLines.forEach(line => console.log(`   ${line}`));
  } else {
    console.log('   Aucune permission AD trouv√©e !');
  }
}

// 8. R√©sum√©
console.log('\nüìä R√âSUM√â :');
if (hasError) {
  console.error('‚ùå Des erreurs critiques ont √©t√© d√©tect√©es. Corrigez-les avant de lancer le build.');
  process.exit(1);
} else if (hasWarning) {
  console.warn('‚ö†Ô∏è  Des avertissements ont √©t√© d√©tect√©s. Le build peut fonctionner mais v√©rifiez les points ci-dessus.');
} else {
  console.log('‚úÖ Toutes les v√©rifications sont pass√©es !');
}

console.log('\nüí° CONSEIL : Pour voir les logs d√©taill√©s du build qui a √©chou√© :');
console.log('   Allez sur le lien fourni par EAS et cliquez sur "View logs"');
console.log('   Cherchez l\'erreur dans la section "Run gradlew"\n');