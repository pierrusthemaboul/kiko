import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';

// Configuration OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

const HYBRID_CONFIG = {
  imageValidation: "gpt-4o-mini"
};

// Fonction reproduced exactement de sayon2.mjs
async function callOpenAIWithImage(prompt: string, imageUrl: string, options: any = {}) {
  const {
    model = HYBRID_CONFIG.imageValidation,
    max_tokens = 350,
    temperature = 0.05,
    retryAttempt = 1
  } = options;

  console.log(`ü§ñ [OPENAI-VISION] Appel ${model} pour validation image${retryAttempt > 1 ? ` - Retry ${retryAttempt}/3` : ''}`);

  try {
    const completion = await openai.chat.completions.create({
      model,
      messages: [{ 
        role: "user", 
        content: [
          { type: "text", text: prompt }, 
          { type: "image_url", image_url: { url: imageUrl } }
        ] 
      }],
      response_format: { type: "json_object" },
      max_tokens,
      temperature
    });

    console.log(`‚úÖ [OPENAI-VISION] Validation termin√©e`);
    return completion.choices[0].message.content;

  } catch (error: any) {
    console.error(`‚ùå [OPENAI-VISION] Erreur:`, error.message);

    // Retry automatique
    if ((error.message.includes('rate_limit') || 
         error.message.includes('timeout')) && retryAttempt < 3) {
      const waitTime = retryAttempt * 3000;
      console.log(`üîÑ [OPENAI-VISION] Retry automatique dans ${waitTime/1000}s...`);
      await new Promise(resolve => setTimeout(resolve, waitTime));
      return await callOpenAIWithImage(prompt, imageUrl, { ...options, retryAttempt: retryAttempt + 1 });
    }

    throw error;
  }
}

// Fonction de validation exactement reproduite de sayon2.mjs
async function validateImageWithGPTMini(titre: string, year: number, imageUrl: string) {
  console.log(`üîç [GPT-4O-MINI] Validation intelligente pour ${year}...`);

  const prompt = `√âvalue cette image pour l'√©v√©nement "${titre}" (${year}).

VALIDATION HISTORIQUE INTELLIGENTE :

üö´ CRIT√àRES DE REJET AUTOMATIQUE UNIQUEMENT SI :
1. TEXTE INTERDIT : Date "${year}" visible ou titre "${titre}" √©crit dans l'image
2. TEXTE PRO√âMINENT : Gros titre, panneau principal, inscription majeure au premier plan
3. ANACHRONISMES MYTHOLOGIQUES : ailes, cr√©atures volantes, anges, dieux, pouvoirs surnaturels
4. ANACHRONISMES MODERNES : voitures, smartphones, v√™tements contemporains
5. ANATOMIE IMPOSSIBLE : humains volants, cr√©atures fantastiques
6. √âPOQUE INCORRECTE : diff√©rence >50 ans avec ${year}

‚úÖ TEXTE ACCEPTABLE (ne pas rejeter) :
- Texte sur livres, manuscrits, parchemins (arri√®re-plan)
- Inscriptions sur banni√®res, blasons, architecture
- Texte flou, illisible ou d√©coratif
- √âcritures anciennes sur objets d'√©poque

‚úÖ ACCEPTER SI :
1. Aucun texte interdit (date ${year} ou titre "${titre}")
2. Texte √©ventuel reste discret et d'√©poque
3. PERSONNAGES HUMAINS NORMAUX avec anatomie r√©aliste
4. V√äTEMENTS coh√©rents avec l'√©poque (tol√©rance ¬±25 ans)
5. OBJETS/OUTILS d'√©poque appropri√©s
6. √âVOQUE l'√©v√©nement historique sans fantaisie

‚ö†Ô∏è ATTENTION SP√âCIALE :
- Les personnages historiques √©taient des HUMAINS NORMAUX
- Aucun pouvoir surnaturel, vol, magie
- R√©alisme documentaire requis
- Un peu de texte d'√©poque est historiquement normal

JSON OBLIGATOIRE:
{
  "hasForbiddenText": true/false,
  "forbiddenTextDescription": "description du texte interdit s'il y en a (date ${year} ou titre visible)",
  "hasAcceptableText": true/false,
  "acceptableTextDescription": "description du texte acceptable (livres, banni√®res, etc.)",
  "representsEvent": true/false,
  "eventRelevance": "description pr√©cise de ce que montre l'image",
  "hasWingsOrSupernatural": true/false,
  "hasModernObjects": true/false,
  "anatomyRealistic": true/false,
  "historicalAccuracy": true/false,
  "periodClothing": true/false,
  "overallValid": true/false,
  "score": number 1-10,
  "reason": "explication d√©taill√©e de l'√©valuation"
}`;

  try {
    const responseText = await callOpenAIWithImage(prompt, imageUrl, {
      model: HYBRID_CONFIG.imageValidation,
      max_tokens: 350,
      temperature: 0.05
    });

    const result = JSON.parse(responseText);

    console.log(`üìä [GPT-4O-MINI] Validation INTELLIGENTE:`);
    console.log(`üö´ Texte interdit (date/titre): ${result.hasForbiddenText ? '‚ùå' : '‚úÖ'}`);
    if (result.hasForbiddenText) {
      console.log(`üö´ Texte interdit d√©tect√©: "${result.forbiddenTextDescription}"`);
    }
    console.log(`üìù Texte acceptable: ${result.hasAcceptableText ? '‚úÖ' : 'Aucun'}`);
    if (result.hasAcceptableText) {
      console.log(`üìù Texte acceptable: "${result.acceptableTextDescription}"`);
    }
    console.log(`üéØ Repr√©sente √©v√©nement: ${result.representsEvent}`);
    console.log(`üëº Ailes/Surnaturel: ${result.hasWingsOrSupernatural}`);
    console.log(`üì± Objets modernes: ${result.hasModernObjects}`);
    console.log(`üßç Anatomie r√©aliste: ${result.anatomyRealistic}`);
    console.log(`üëî V√™tements d'√©poque: ${result.periodClothing}`);
    console.log(`üìù Pertinence: "${result.eventRelevance}"`);
    console.log(`üìä Score: ${result.score}/10`);
    console.log(`üí≠ Raison: "${result.reason}"`);

    // Validation finale avec la m√™me logique que sayon2.mjs
    const MIN_VALIDATION_SCORE = 4;

    // REJET SEULEMENT SI TEXTE VRAIMENT INTERDIT
    if (result.hasForbiddenText) {
      console.log(`‚ùå [GPT-4O-MINI] REJET: Texte interdit d√©tect√© (date ${year} ou titre "${titre}")`);
      return {
        isValid: false,
        score: result.score,
        explanation: `Texte interdit d√©tect√©: ${result.forbiddenTextDescription}`,
        detailedAnalysis: result
      };
    }

    if (result.hasWingsOrSupernatural) {
      console.log(`‚ùå [GPT-4O-MINI] REJET: √âl√©ments mythologiques d√©tect√©s`);
      return {
        isValid: false,
        score: result.score,
        explanation: "√âl√©ments surnaturels/mythologiques d√©tect√©s",
        detailedAnalysis: result
      };
    }

    if (result.hasModernObjects) {
      console.log(`‚ùå [GPT-4O-MINI] REJET: Anachronismes modernes d√©tect√©s`);
      return {
        isValid: false,
        score: result.score,
        explanation: "Objets modernes/anachronismes d√©tect√©s",
        detailedAnalysis: result
      };
    }

    if (!result.anatomyRealistic) {
      console.log(`‚ùå [GPT-4O-MINI] REJET: Anatomie non r√©aliste`);
      return {
        isValid: false,
        score: result.score,
        explanation: "Anatomie non r√©aliste",
        detailedAnalysis: result
      };
    }

    if (!result.periodClothing) {
      console.log(`‚ùå [GPT-4O-MINI] REJET: V√™tements non conformes √† l'√©poque`);
      return {
        isValid: false,
        score: result.score,
        explanation: "V√™tements non conformes √† l'√©poque",
        detailedAnalysis: result
      };
    }

    // Validation finale bas√©e sur score et crit√®res - IDENTIQUE √Ä SAYON2.MJS
    if (result.score >= MIN_VALIDATION_SCORE && result.overallValid && result.historicalAccuracy && result.representsEvent) {
      console.log(`‚úÖ [GPT-4O-MINI] Image VALID√âE (${result.score}/10) - Crit√®res respect√©s`);
      if (result.hasAcceptableText) {
        console.log(`üéØ SUCC√àS: Texte acceptable tol√©r√© + R√©alisme historique confirm√©`);
      } else {
        console.log(`üéØ SUCC√àS: Aucun texte + R√©alisme historique confirm√©`);
      }
      return {
        isValid: true,
        score: result.score,
        explanation: result.reason,
        detailedAnalysis: result
      };
    }

    console.log(`‚ùå [GPT-4O-MINI] Validation √©chou√©e - Score/crit√®res insuffisants`);
    return {
      isValid: false,
      score: result.score,
      explanation: `Score/crit√®res insuffisants: ${result.reason}`,
      detailedAnalysis: result
    };

  } catch (error: any) {
    console.error(`‚ùå [GPT-4O-MINI] Erreur validation:`, error.message);
    return {
      isValid: false,
      score: 0,
      explanation: `Erreur lors de la validation: ${error.message}`,
      detailedAnalysis: null
    };
  }
}

// Route API
export async function POST(request: NextRequest) {
  try {
    const { action, imageUrl, titre, year } = await request.json();

    if (!process.env.OPENAI_API_KEY) {
      return NextResponse.json(
        { error: 'Cl√© API OpenAI non configur√©e' },
        { status: 500 }
      );
    }

    if (action === 'evaluate') {
      if (!imageUrl || !titre || !year) {
        return NextResponse.json(
          { error: 'Param√®tres manquants: imageUrl, titre, year requis' },
          { status: 400 }
        );
      }

      console.log(`üîç [API] Validation demand√©e pour "${titre}" (${year})`);
      console.log(`üñºÔ∏è [API] Image URL: ${imageUrl.substring(0, 100)}...`);

      const validation = await validateImageWithGPTMini(titre, year, imageUrl);

      return NextResponse.json({
        success: true,
        score: validation.score,
        explanation: validation.explanation,
        isValid: validation.isValid,
        detailedAnalysis: validation.detailedAnalysis
      });
    }

    // Autres actions futures (generatePrompt, generateImage, etc.)
    if (action === 'generatePrompt') {
      return NextResponse.json({
        success: false,
        error: 'Action generatePrompt pas encore impl√©ment√©e'
      });
    }

    if (action === 'generateImage') {
      return NextResponse.json({
        success: false,
        error: 'Action generateImage pas encore impl√©ment√©e'
      });
    }

    return NextResponse.json(
      { error: `Action "${action}" non support√©e` },
      { status: 400 }
    );

  } catch (error: any) {
    console.error('‚ùå [API] Erreur validation:', error);
    return NextResponse.json(
      { 
        success: false,
        error: error.message || 'Erreur interne du serveur',
        score: 0,
        explanation: 'Erreur lors de la validation'
      },
      { status: 500 }
    );
  }
}

// Route GET pour documentation
export async function GET() {
  return NextResponse.json({
    message: 'API de validation d\'images historiques',
    endpoints: {
      'POST /api/validation': {
        description: 'Validation d\'image avec GPT-4o-mini',
        actions: {
          evaluate: {
            parameters: ['imageUrl', 'titre', 'year'],
            description: '√âvalue une image historique avec les m√™mes crit√®res que sayon2.mjs'
          },
          generatePrompt: '√Ä impl√©menter',
          generateImage: '√Ä impl√©menter'
        }
      }
    },
    config: {
      model: HYBRID_CONFIG.imageValidation,
      criteria: [
        'Pas de texte interdit (date/titre visible)',
        'Pas d\'√©l√©ments surnaturels/mythologiques',
        'Pas d\'objets modernes',
        'Anatomie r√©aliste',
        'V√™tements d\'√©poque',
        'Score minimum: 4/10'
      ]
    }
  });
}