// ==============================================================================
// sayon3_improved.mjs - VERSION AUTO-APPRENANTE BAS√âE SUR VOS VALIDATIONS
// NOUVEAUT√âS : Int√©gration automatique des retours Gemini Vision + Optimisations
// BAS√â SUR : 86% de r√©ussite (24/28 √©v√©nements ‚â•8/10) de votre derni√®re session
// AM√âLIORATIONS : Prompts optimis√©s + Validation intelligente + Anti-patterns
// ==============================================================================

import { GoogleGenerativeAI } from '@google/generative-ai';
import Replicate from 'replicate';
import { createClient } from '@supabase/supabase-js';
import fetch from 'node-fetch';
import sharp from 'sharp';
import readline from 'readline';
import 'dotenv/config';

// === LEARNINGS INT√âGR√âS DE VOS VALIDATIONS GEMINI ===
const VALIDATION_LEARNINGS = {
    // Top mots-cl√©s efficaces (bas√©s sur vos 24 succ√®s)
    EFFECTIVE_KEYWORDS: [
        "detailed", "cinematic", "realistic", "period", "medieval", 
        "robes", "stone", "gold", "wooden", "construction", 
        "architecture", "ceremonial", "merchants", "observing", 
        "armor", "sultan", "renaissance", "supervising"
    ],
    
    // Patterns gagnants identifi√©s
    WINNING_PATTERNS: {
        hasYear: 100,          // Ann√©e obligatoire
        hasPeriod: 95,         // R√©f√©rence p√©riode
        hasClothing: 87,       // V√™tements sp√©cifiques
        hasAction: 83,         // Actions concr√®tes
        hasCinematic: 97,      // Qualificateurs visuels
        hasObjects: 91         // Objets/mat√©riaux
    },
    
    // Anti-patterns √† √©viter (probl√®mes identifi√©s)
    AVOID_PATTERNS: [
        "prominent christian cross",
        "generic architectural details", 
        "anachronistic religious symbols",
        "too prominent religious elements",
        "modern crosses on buildings",
        "oversized religious symbols"
    ],
    
    // Am√©liorations sugg√©r√©es par Gemini
    IMPROVEMENTS: [
        "Add more specific location details",
        "Include period-appropriate materials",
        "Avoid prominent religious symbols unless central",
        "Enhance cultural specificity",
        "Add environmental context"
    ]
};

// Configuration optimis√©e bas√©e sur vos r√©sultats
const GEMINI_CONFIG = {
    eventGeneration: "gemini-2.0-flash",
    historicalVerification: "gemini-2.0-flash", 
    contextEnrichment: "gemini-2.0-flash",
    promptGeneration: "gemini-2.0-flash",
    imageValidation: "gemini-2.0-flash"
};

const MAX_IMAGE_ATTEMPTS = 4;
const BATCH_SIZE = 4;
const MIN_VALIDATION_SCORE = 7; // Augment√© bas√© sur vos excellents r√©sultats

// Limites Flux-schnell optimis√©es
const FLUX_SCHNELL_LIMITS = {
    MAX_T5_TOKENS: 256,
    OPTIMAL_T5_TOKENS: 200,
    TARGET_T5_TOKENS: 180,
    TARGET_WORDS: 45,
    MAX_WORDS: 60
};

const FLUX_SCHNELL_CONFIG = {
    steps: 4,
    quality: 85,
    seed: () => Math.floor(Math.random() * 1000000)
};

// Initialisation APIs
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const replicate = new Replicate({ auth: process.env.REPLICATE_API_TOKEN });
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_KEY);
const rl = readline.createInterface({ input: process.stdin, output: process.stdout });

// ==============================================================================
// WRAPPERS GEMINI OPTIMIS√âS AVEC LEARNINGS
// ==============================================================================

async function callGemini(prompt, options = {}) {
    const {
        model = GEMINI_CONFIG.eventGeneration,
        maxOutputTokens = 1000,
        temperature = 0.3,
        responseFormat = null,
        retryAttempt = 1
    } = options;
    
    console.log(`      ü§ñ [GEMINI] Appel ${model} (${prompt.length} chars)${retryAttempt > 1 ? ` - Retry ${retryAttempt}/3` : ''}`);
    
    try {
        const geminiModel = genAI.getGenerativeModel({ 
            model,
            generationConfig: {
                maxOutputTokens,
                temperature,
                ...(responseFormat === 'json' && { responseMimeType: "application/json" })
            }
        });
        
        const result = await geminiModel.generateContent(prompt);
        const response = result.response.text();
        
        console.log(`      ‚úÖ [GEMINI] R√©ponse re√ßue (${response.length} chars)`);
        return response;
        
    } catch (error) {
        console.error(`      ‚ùå [GEMINI] Erreur:`, error.message);
        
        if ((error.message.includes('quota') || 
             error.message.includes('rate_limit') || 
             error.message.includes('overloaded') ||
             error.message.includes('timeout')) && retryAttempt < 3) {
            const waitTime = retryAttempt * 5000;
            console.log(`      üîÑ [GEMINI] Retry automatique dans ${waitTime/1000}s...`);
            await new Promise(resolve => setTimeout(resolve, waitTime));
            return await callGemini(prompt, { ...options, retryAttempt: retryAttempt + 1 });
        }
        
        throw error;
    }
}

async function callGeminiWithImage(prompt, imageUrl, options = {}) {
    const {
        model = GEMINI_CONFIG.imageValidation,
        maxOutputTokens = 350,
        temperature = 0.05,
        retryAttempt = 1
    } = options;
    
    console.log(`      ü§ñ [GEMINI-VISION] Appel ${model} pour validation image${retryAttempt > 1 ? ` - Retry ${retryAttempt}/3` : ''}`);
    
    try {
        const geminiModel = genAI.getGenerativeModel({ 
            model,
            generationConfig: {
                maxOutputTokens,
                temperature,
                responseMimeType: "application/json"
            }
        });
        
        const imageResponse = await fetch(imageUrl);
        const imageBuffer = await imageResponse.arrayBuffer();
        
        const imagePart = {
            inlineData: {
                data: Buffer.from(imageBuffer).toString('base64'),
                mimeType: 'image/webp'
            }
        };
        
        const result = await geminiModel.generateContent([prompt, imagePart]);
        const response = result.response.text();
        
        console.log(`      ‚úÖ [GEMINI-VISION] Validation termin√©e`);
        return response;
        
    } catch (error) {
        console.error(`      ‚ùå [GEMINI-VISION] Erreur:`, error.message);
        
        if ((error.message.includes('quota') || 
             error.message.includes('rate_limit')) && retryAttempt < 3) {
            const waitTime = retryAttempt * 3000;
            console.log(`      üîÑ [GEMINI-VISION] Retry automatique dans ${waitTime/1000}s...`);
            await new Promise(resolve => setTimeout(resolve, waitTime));
            return await callGeminiWithImage(prompt, imageUrl, { ...options, retryAttempt: retryAttempt + 1 });
        }
        
        throw error;
    }
}

// ==============================================================================
// SYST√àME DE D√âTECTION DOUBLONS (CONSERVATION COMPL√àTE)
// ==============================================================================

let existingNormalizedTitles = new Set();
let titleMappings = new Map();

function extractYear(dateString) {
    if (!dateString) return null;
    const yearMatch = dateString.match(/(\d{4})/);
    return yearMatch ? parseInt(yearMatch[1]) : null;
}

function normalizeTitle(titre) {
    if (!titre) return '';
    
    let normalized = titre.toLowerCase().trim();
    
    normalized = normalized
        .replace(/\s*\(?\d{4}\)?$/g, '')
        .replace(/\s+\d{4}\s*$/g, '')
        .replace(/^trait√©\s+(de\s+|du\s+|des\s+)?/g, 'traite de ')
        .replace(/^traite\s+(de\s+|du\s+|des\s+)?/g, 'traite de ')
        .replace(/^acte\s+(de\s+|d'|du\s+|des\s+)?/g, 'acte de ')
        .replace(/^bataille\s+(de\s+|du\s+|des\s+)?/g, 'bataille de ')
        .replace(/^guerre\s+(de\s+|du\s+|des\s+)?/g, 'guerre de ')
        .replace(/^r√©volution\s+(de\s+|du\s+|des\s+)?/g, 'revolution de ')
        .replace(/^revolution\s+(de\s+|du\s+|des\s+)?/g, 'revolution de ')
        .replace(/^d√©couverte\s+(de\s+|du\s+|des\s+)?/g, 'decouverte de ')
        .replace(/^decouverte\s+(de\s+|du\s+|des\s+)?/g, 'decouverte de ')
        .normalize('NFD')
        .replace(/[\u0300-\u036f]/g, '')
        .replace(/\s+(le|la|les|du|de|des|en|et|ou|dans|pour|avec|par|sur)\s+/g, ' ')
        .replace(/\s+/g, ' ')
        .trim();
    
    return normalized;
}

async function loadExistingTitles(startYear, endYear) {
    console.log(`üîç Chargement de TOUS les √©v√©nements existants (tables 'evenements' + 'goju')...`);
    
    try {
        const [gojuResult, eventsResult] = await Promise.all([
            supabase.from('goju').select('titre, date, date_formatee'),
            supabase.from('evenements').select('titre, date, date_formatee')
        ]);
        
        const allEvents = [
            ...(gojuResult.data || []),
            ...(eventsResult.data || [])
        ];
        
        console.log(`   üìä Total √©v√©nements charg√©s: ${allEvents.length} (goju: ${gojuResult.data?.length || 0}, evenements: ${eventsResult.data?.length || 0})`);
        
        const periodEvents = [];
        const allNormalizedTitles = new Set();
        const allMappings = new Map();
        
        allEvents.forEach(event => {
            const eventYear = extractYear(event.date || event.date_formatee);
            const normalized = normalizeTitle(event.titre);
            
            allNormalizedTitles.add(normalized);
            if (!allMappings.has(normalized)) {
                allMappings.set(normalized, []);
            }
            allMappings.get(normalized).push(event.titre);
            
            if (eventYear >= startYear && eventYear <= endYear) {
                periodEvents.push(event);
            }
        });
        
        console.log(`   üéØ √âv√©nements dans la p√©riode ${startYear}-${endYear}: ${periodEvents.length}`);
        console.log(`   üö´ Titres normalis√©s √† √©viter: ${allNormalizedTitles.size}`);
        
        existingNormalizedTitles = allNormalizedTitles;
        titleMappings = allMappings;
        
        return { allNormalizedTitles, periodEvents: periodEvents.map(e => e.titre) };
        
    } catch (error) {
        console.error("‚ùå Erreur chargement titres:", error.message);
        return { allNormalizedTitles: new Set(), periodEvents: [] };
    }
}

function isDuplicate(titre) {
    const normalized = normalizeTitle(titre);
    const exists = existingNormalizedTitles.has(normalized);
    
    if (exists) {
        const existingVersions = titleMappings.get(normalized) || [];
        console.log(`   ‚ùå Doublon d√©tect√©: "${titre}" -> normalis√©: "${normalized}"`);
        console.log(`      Versions existantes: [${existingVersions.join(', ')}]`);
        return true;
    }
    
    if (normalized.length < 10) {
        for (const existingNormalized of existingNormalizedTitles) {
            if (existingNormalized.length < 10 && existingNormalized === normalized) {
                console.log(`   ‚ö†Ô∏è Similarit√© exacte d√©tect√©e: "${titre}" = "${existingNormalized}"`);
                return true;
            }
        }
    }
    
    return false;
}

function addToCache(titre) {
    const normalized = normalizeTitle(titre);
    existingNormalizedTitles.add(normalized);
    
    if (!titleMappings.has(normalized)) {
        titleMappings.set(normalized, []);
    }
    titleMappings.get(normalized).push(titre);
}

// ==============================================================================
// G√âN√âRATION D'√âV√âNEMENTS OPTIMIS√âE AVEC LEARNINGS
// ==============================================================================

async function generateEventBatchWithLearnings(startYear, endYear, count, attemptNumber = 1) {
    console.log(`   üì¶ [GEMINI-IMPROVED] G√©n√©ration optimis√©e de ${count} √©v√©nements (tentative ${attemptNumber})...`);
    
    // R√©cup√©rer tous les √©v√©nements de la p√©riode
    const periodExistingTitles = [];
    titleMappings.forEach((originals, normalized) => {
        originals.forEach(original => {
            const eventYear = extractYear(original);
            if (eventYear >= startYear && eventYear <= endYear) {
                periodExistingTitles.push(original);
            }
        });
    });
    
    const allExistingInPeriod = periodExistingTitles.join('", "');
    console.log(`      üö´ Anti-doublons: ${periodExistingTitles.length} √©v√©nements interdits`);
    
    // Variation sp√©cialis√©e avec learnings int√©gr√©s
    const promptVariations = [
        "innovations techniques document√©es avec outils sp√©cifiques d'√©poque",
        "constructions religieuses avec mat√©riaux et artisans pr√©cis", 
        "accords diplomatiques avec v√™tements et objets c√©r√©moniels",
        "d√©couvertes g√©ographiques avec navires et instruments navigation",
        "fondations urbaines avec architectures r√©gionales distinctives",
        "catastrophes naturelles avec populations et habitations locales",
        "d√©veloppements artistiques avec ateliers et m√©c√®nes identifi√©s",
        "innovations agricoles avec outils et techniques sp√©cifiques",
        "√©v√©nements militaires avec armements et fortifications pr√©cis",
        "√©volutions juridiques avec institutions et acteurs document√©s",
        "avanc√©es m√©dicales avec praticiens et instruments d'√©poque",
        "r√©formes religieuses avec personnages et contextes sp√©cifiques",
        "innovations financi√®res avec marchands et monnaies locales",
        "explorations scientifiques avec instruments et observations",
        "transformations sociales avec groupes et pratiques identifi√©s"
    ];
    
    const focusArea = promptVariations[attemptNumber % promptVariations.length];
    
    // Prompt am√©lior√© avec learnings int√©gr√©s
    const prompt = `Tu es un historien expert reconnu. G√©n√®re EXACTEMENT ${count} √©v√©nements historiques DOCUMENT√âS et V√âRIFIABLES entre ${startYear}-${endYear}.

üö´ √âV√âNEMENTS STRICTEMENT INTERDITS (TOUS ceux de la p√©riode ${startYear}-${endYear}) :
"${allExistingInPeriod}"

üéØ FOCUS SP√âCIALIS√â : ${focusArea}

üß† LEARNINGS INT√âGR√âS (bas√©s sur 86% de r√©ussite pr√©c√©dente) :
- PRIORIT√â aux √©v√©nements avec personnages, objets et actions CONCR√àTES
- √âVITER les symboles religieux pro√©minents sauf si centraux
- PRIVIL√âGIER les mat√©riaux et outils sp√©cifiques d'√©poque
- INCLURE des d√©tails culturels et g√©ographiques pr√©cis
- VISER la sp√©cificit√© plut√¥t que la g√©n√©ralit√©

üîß STRAT√âGIE ANTI-DOUBLONS RENFORC√âE : 
- Privil√©gie des √©v√©nements MOINS CONNUS mais historiquement v√©rifiables
- DIVERSIT√â G√âOGRAPHIQUE MAXIMALE (Europe, Asie, Am√©rique, Afrique, Oc√©anie)
- √âv√©nements avec acteurs pr√©cis et contextes document√©s

R√àGLES CRITIQUES :
1. DATES EXACTES obligatoires - V√âRIFIE CHAQUE DATE avec pr√©cision absolue
2. √âV√âNEMENTS DOCUMENT√âS uniquement - Sources historiques v√©rifiables
3. Z√âRO DOUBLON avec les ${periodExistingTitles.length} √©v√©nements interdits ci-dessus
4. DIVERSIT√â G√âOGRAPHIQUE ET CULTURELLE MAXIMALE
5. TITRES pr√©cis (max 60 caract√®res) SANS l'ann√©e
6. OBJETS/OUTILS/MAT√âRIAUX sp√©cifiques mentionn√©s

CONSIGNE QUALIT√â OPTIMIS√âE :
- Privil√©gie des √©v√©nements avec ACTEURS IDENTIFI√âS et OBJETS CONCRETS
- VARIE absolument les continents ET les types d'√©v√©nements
- Assure-toi de la pr√©cision des dates (¬±0 tol√©rance d'erreur)
- √âVITE les √©v√©nements "g√©n√©riques" - vise la sp√©cificit√© historique
- INCLUS des d√©tails permettant une illustration riche et pr√©cise

FORMAT JSON STRICT :
{
  "events": [
    {
      "year": number (ann√©e exacte v√©rifi√©e),
      "titre": "Titre factuel pr√©cis SANS ann√©e",
      "description": "Contexte historique avec acteurs et objets pr√©cis", 
      "type": "Militaire|Architecture|Invention|Institution|D√©couverte|Catastrophe|Exploration|Religion|√âconomie|Diplomatie|Arts|Sciences",
      "region": "Europe|Asie|Afrique|Am√©rique|Oc√©anie",
      "specificLocation": "Pays/r√©gion/ville pr√©cise",
      "keyActors": ["Personnage principal", "Institution/groupe"],
      "specificObjects": ["Objet/outil 1", "Mat√©riau/technique"],
      "confidence": "high|medium" (niveau de certitude historique)
    }
  ]
}

PRIORIT√â ABSOLUE : Pr√©cision historique + SP√âCIFICIT√â + DIVERSIT√â + Z√âRO ressemblance avec les ${periodExistingTitles.length} √©v√©nements interdits.`;

    try {
        const responseText = await callGemini(prompt, {
            model: GEMINI_CONFIG.eventGeneration,
            maxOutputTokens: 2500,
            temperature: 0.25,
            responseFormat: 'json'
        });
        
        // Extraction JSON
        let jsonText = responseText;
        if (responseText.includes('```json')) {
            const match = responseText.match(/```json\s*([\s\S]*?)\s*```/);
            if (match) {
                jsonText = match[1];
            }
        } else if (responseText.includes('{')) {
            const startIndex = responseText.indexOf('{');
            const endIndex = responseText.lastIndexOf('}') + 1;
            jsonText = responseText.substring(startIndex, endIndex);
        }
        
        console.log(`      üìä [GEMINI-IMPROVED] JSON extrait: ${jsonText.substring(0, 200)}...`);
        
        const batchData = JSON.parse(jsonText);
        
        if (!batchData.events || !Array.isArray(batchData.events)) {
            console.log(`      ‚ùå Structure invalide, tentative ${attemptNumber + 1}...`);
            if (attemptNumber < 3) {
                return await generateEventBatchWithLearnings(startYear, endYear, count, attemptNumber + 1);
            }
            return [];
        }
        
        const validEvents = [];
        const rejectedEvents = [];
        
        batchData.events.forEach(event => {
            if (!event.titre || !event.year || event.titre.length >= 100) {
                rejectedEvents.push({ event: event.titre, reason: 'Format invalide' });
                return;
            }
            
            // Validation caract√®res fran√ßais compl√®te
            if (!event.titre.match(/^[a-zA-Z0-9\s\-√†√°√¢√§√®√©√™√´√¨√≠√Æ√Ø√≤√≥√¥√∂√π√∫√ª√º√ß√±√Ä√Å√Ç√Ñ√à√â√ä√ã√å√ç√é√è√í√ì√î√ñ√ô√ö√õ√ú√á√ë'():.,]+$/) || event.titre.includes('undefined')) {
                rejectedEvents.push({ event: event.titre, reason: 'Caract√®res invalides' });
                return;
            }
            
            // V√©rification doublons AVANT validation
            if (isDuplicate(event.titre)) {
                rejectedEvents.push({ event: event.titre, reason: 'Doublon d√©tect√© (pr√©-v√©rification)' });
                return;
            }
            
            validEvents.push(event);
        });
        
        console.log(`      ‚úÖ [GEMINI-IMPROVED] Lot g√©n√©r√©: ${validEvents.length} √©v√©nements uniques apr√®s pr√©-v√©rification`);
        console.log(`      üîç [GEMINI-IMPROVED] Pr√©-v√©rification: ${batchData.events.length - validEvents.length} doublons √©vit√©s`);
        
        if (rejectedEvents.length > 0) {
            console.log(`      ‚ùå √âv√©nements rejet√©s en pr√©-v√©rification: ${rejectedEvents.length}`);
            rejectedEvents.slice(0, 3).forEach(rejected => {
                console.log(`        - "${rejected.event}" (${rejected.reason})`);
            });
        }
        
        validEvents.forEach(event => {
            console.log(`        ‚úÖ "${event.titre}" (${event.year}) [${event.type}|${event.region}] - Confiance: ${event.confidence || 'N/A'}`);
            if (event.keyActors && event.keyActors.length > 0) {
                console.log(`           üë• Acteurs: ${event.keyActors.join(', ')}`);
            }
            if (event.specificObjects && event.specificObjects.length > 0) {
                console.log(`           üîß Objets: ${event.specificObjects.join(', ')}`);
            }
        });
        
        return validEvents;
        
    } catch (error) {
        console.error(`      ‚ùå [GEMINI-IMPROVED] Erreur g√©n√©ration:`, error.message);
        
        if (attemptNumber < 3) {
            console.log(`      üîÑ Retry avec param√®tres modifi√©s...`);
            return await generateEventBatchWithLearnings(startYear, endYear, count, attemptNumber + 1);
        }
        return [];
    }
}

// ==============================================================================
// V√âRIFICATION HISTORIQUE OPTIMIS√âE
// ==============================================================================

async function verifyEventBatchWithGemini(events) {
    console.log(`   üïµÔ∏è [GEMINI] V√©rification historique approfondie avec standards √©lev√©s...`);
    
    const eventsText = events.map(e => `"${e.titre}" (${e.year})`).join('\n');
    
    const prompt = `Tu es un historien expert. V√âRIFIE RIGOUREUSEMENT ces √©v√©nements historiques avec le m√™me standard de qualit√© qui a produit 86% de r√©ussite pr√©c√©demment :

${eventsText}

Pour chaque √©v√©nement, VALIDE avec STANDARD √âLEV√â :
1. EXISTENCE dans l'histoire document√©e (sources primaires/secondaires fiables)
2. DATE EXACTE (tol√©rance ¬±1 an maximum) - V√âRIFIE CHAQUE DATE avec pr√©cision absolue
3. TITRE coh√©rent avec les faits historiques document√©s
4. ACTEURS/PERSONNAGES historiquement v√©rifiables
5. CONTEXTE g√©ographique et culturel pr√©cis

üéØ STANDARD DE QUALIT√â : Vise 8-9/10 comme dans la session pr√©c√©dente.

SOIS STRICT sur la pr√©cision factuelle. En cas de doute sur une date ou un fait, REJETTE.

FORMAT JSON REQUIS :
{
  "validations": [
    {
      "titre": "titre exact",
      "isValid": true/false,
      "dateCorrect": true/false,
      "actorsVerified": true/false,
      "reason": "explication d√©taill√©e si rejet√© ou commentaire de qualit√©",
      "confidence": "high|medium|low",
      "historicalRichness": "rich|moderate|basic"
    }
  ]
}

PRIORIT√â : Pr√©cision historique absolue avec dates v√©rifi√©es + richesse contextuelle.`;

    try {
        const responseText = await callGemini(prompt, {
            model: GEMINI_CONFIG.historicalVerification,
            maxOutputTokens: 1200,
            temperature: 0.1,
            responseFormat: 'json'
        });
        
        // Extraction JSON
        let jsonText = responseText;
        if (responseText.includes('```json')) {
            const match = responseText.match(/```json\s*([\s\S]*?)\s*```/);
            if (match) {
                jsonText = match[1];
            }
        } else if (responseText.includes('{')) {
            const startIndex = responseText.indexOf('{');
            const endIndex = responseText.lastIndexOf('}') + 1;
            jsonText = responseText.substring(startIndex, endIndex);
        }
        
        const verification = JSON.parse(jsonText);
        
        const validEvents = [];
        const invalidEvents = [];
        
        events.forEach((event, index) => {
            const validation = verification.validations?.[index];
            if (validation && validation.isValid && validation.dateCorrect && validation.actorsVerified !== false) {
                validEvents.push(event);
                console.log(`      ‚úÖ [GEMINI] "${event.titre}" (${event.year}) - Valid√© (${validation.confidence}, ${validation.historicalRichness})`);
                if (validation.reason && !validation.reason.includes('rejet√©')) {
                    console.log(`         üí≠ "${validation.reason}"`);
                }
            } else {
                invalidEvents.push({ event, reason: validation?.reason || 'Non v√©rifi√© par Gemini' });
                console.log(`      ‚ùå [GEMINI] "${event.titre}" (${event.year}) - ${validation?.reason || 'Erreur validation'}`);
            }
        });
        
        console.log(`      üìä [GEMINI] V√©rification: ${validEvents.length}/${events.length} valid√©s avec standard √©lev√©`);
        
        return { validEvents, invalidEvents };
        
    } catch (error) {
        console.error(`      ‚ùå [GEMINI] Erreur v√©rification:`, error.message);
        return { validEvents: events, invalidEvents: [] };
    }
}

// ==============================================================================
// ENRICHISSEMENT CONTEXTUEL OPTIMIS√â AVEC LEARNINGS
// ==============================================================================

async function enrichEventWithLearnings(event, attemptNumber = 1) {
    console.log(`      üîç [GEMINI-IMPROVED] Enrichissement optimis√©: "${event.titre}" (${event.year})...`);
    
    if (attemptNumber > 1) {
        console.log(`      üîÑ [GEMINI-IMPROVED] Tentative ${attemptNumber}/2 apr√®s erreur connexion`);
    }
    
    const prompt = `Tu es un historien expert. Enrichis cet √©v√©nement pour une illustration historiquement exacte avec les LEARNINGS de r√©ussite pr√©c√©dente :

√âV√âNEMENT : "${event.titre}" (${event.year})
TYPE : ${event.type}
R√âGION : ${event.region}
LIEU : ${event.specificLocation}
ACTEURS : ${event.keyActors ? event.keyActors.join(', ') : '√Ä identifier'}
OBJETS : ${event.specificObjects ? event.specificObjects.join(', ') : '√Ä identifier'}

üß† LEARNINGS APPLIQU√âS (bas√©s sur 86% de r√©ussite) :
- PRIORIT√â aux v√™tements sp√©cifiques d'√©poque (robes, tuniques, armures...)
- OBJETS/MAT√âRIAUX concrets (pierre, bois, soie, or, cuivre...)
- ACTIONS observables (supervisant, construisant, n√©gociant...)
- √âVITER symboles religieux pro√©minents sauf si centraux
- SP√âCIFICIT√â architecturale et culturelle

MISSION : Fournir contexte historique pr√©cis et √©l√©ments visuels OPTIMIS√âS pour Flux-schnell.

FORMAT JSON REQUIS :
{
  "contextHistorique": "Description pr√©cise 1-2 phrases avec acteurs et objets cl√©s",
  "elementsVisuelsEssentiels": [
    "Personnages avec v√™tements TR√àS sp√©cifiques ${event.year}",
    "Objets/outils/armes PR√âCIS et caract√©ristiques √©poque", 
    "Mat√©riaux de construction/artisanat distinctifs",
    "Architecture/environnement SP√âCIFIQUE r√©gion"
  ],
  "sceneIdeale": "Description concise sc√®ne principale avec ACTION concr√®te",
  "motsClesVisuelsOptimises": ["6-8 mots-cl√©s visuels EFFICACES proven"],
  "atmosphere": "Ambiance (c√©r√©monielle, dramatique, artisanale, etc.)",
  "materiaux": ["3-4 mat√©riaux sp√©cifiques √©poque"],
  "vetements": ["2-3 v√™tements pr√©cis avec couleurs/textures"],
  "objetsSpecifiques": ["3-4 objets/outils caract√©ristiques"],
  "actionConcrete": "Action principal observables",
  "antiPatterns": ["√âl√©ments √† √âVITER absolument"]
}

EXIGENCE : Exactitude historique absolue pour ${event.year} + optimisation pour illustration r√©ussie.`;

    try {
        const responseText = await callGemini(prompt, {
            model: GEMINI_CONFIG.contextEnrichment,
            maxOutputTokens: 800,
            temperature: 0.3,
            responseFormat: 'json'
        });
        
        // Extraction JSON
        let jsonText = responseText;
        if (responseText.includes('```json')) {
            const match = responseText.match(/```json\s*([\s\S]*?)\s*```/);
            if (match) {
                jsonText = match[1];
            }
        } else if (responseText.includes('{')) {
            const startIndex = responseText.indexOf('{');
            const endIndex = responseText.lastIndexOf('}') + 1;
            jsonText = responseText.substring(startIndex, endIndex);
        }
        
        const enrichedData = JSON.parse(jsonText);
        
        console.log(`      üìä [GEMINI-IMPROVED] Enrichissement optimis√© re√ßu:`);
        console.log(`      üìÑ Contexte: "${enrichedData.contextHistorique}"`);
        console.log(`      üé® √âl√©ments (${enrichedData.elementsVisuelsEssentiels.length}): ${JSON.stringify(enrichedData.elementsVisuelsEssentiels)}`);
        console.log(`      üè∑Ô∏è Mots-cl√©s optimis√©s: ${JSON.stringify(enrichedData.motsClesVisuelsOptimises)}`);
        console.log(`      üëî V√™tements: ${JSON.stringify(enrichedData.vetements)}`);
        console.log(`      üîß Objets: ${JSON.stringify(enrichedData.objetsSpecifiques)}`);
        console.log(`      üèóÔ∏è Mat√©riaux: ${JSON.stringify(enrichedData.materiaux)}`);
        console.log(`      üé¨ Action: "${enrichedData.actionConcrete}"`);
        console.log(`      üö´ Anti-patterns: ${JSON.stringify(enrichedData.antiPatterns)}`);
        
        return {
            ...event,
            enrichissement: enrichedData
        };
        
    } catch (error) {
        console.error(`      ‚ùå [GEMINI-IMPROVED] Erreur enrichissement:`, error.message);
        
        if (error.message.includes('Connection error') && attemptNumber < 2) {
            console.log(`      üîÑ [GEMINI-IMPROVED] Retry enrichissement (erreur connexion)...`);
            await new Promise(resolve => setTimeout(resolve, 3000));
            return await enrichEventWithLearnings(event, attemptNumber + 1);
        }
        
        return {
            ...event,
            enrichissement: {
                contextHistorique: `√âv√©nement historique de ${event.year}`,
                elementsVisuelsEssentiels: [`Sc√®ne ${event.type.toLowerCase()}`, `V√™tements ${event.year}`, "Architecture d'√©poque"],
                sceneIdeale: `Repr√©sentation ${event.titre}`,
                motsClesVisuelsOptimises: ["historical", "period", "scene", "detailed", "realistic"],
                atmosphere: "historique",
                materiaux: ["stone", "wood", "fabric"],
                vetements: [`${event.year} clothing`],
                objetsSpecifiques: ["period tools"],
                actionConcrete: "historical scene",
                antiPatterns: ["modern elements"]
            }
        };
    }
}

// ==============================================================================
// G√âN√âRATION PROMPTS ULTRA-OPTIMIS√âE AVEC LEARNINGS
// ==============================================================================

function countWords(text) {
    return text.trim().split(/\s+/).length;
}

function optimizePromptIntelligently(prompt) {
    console.log(`      üîß Optimisation intelligente de ${countWords(prompt)} mots:`);
    
    // Extraire et pr√©server les √©l√©ments critiques AVANT optimisation
    const yearMatch = prompt.match(/\b(1\d{3}|20\d{2})\b/);
    const periodMatch = prompt.match(/\b(ancient|medieval|renaissance|industrial|modern)\s+period\b/i);
    
    let optimized = prompt
        .replace(/\b(the|a|an|with|and|of|in|at|on|for|very|quite|rather|extremely)\b/gi, '')
        .replace(/\b(also|furthermore|moreover|however|therefore|thus)\b/gi, '')
        .replace(/historical accuracy/gi, 'historical')
        .replace(/photorealistic/gi, 'realistic')
        .replace(/dramatic scene/gi, 'dramatic')
        .replace(/\s+/g, ' ')
        .replace(/,\s*/g, ',')
        .replace(/\.\s*/g, ' ')
        .trim();
    
    // RESTAURER les √©l√©ments critiques si supprim√©s
    if (yearMatch && !optimized.includes(yearMatch[0])) {
        optimized = `${optimized}, ${yearMatch[0]}`;
        console.log(`      üîß Ann√©e ${yearMatch[0]} restaur√©e`);
    }
    
    if (periodMatch && !optimized.toLowerCase().includes(periodMatch[0].toLowerCase())) {
        optimized = `${optimized}, ${periodMatch[0]}`;
        console.log(`      üîß P√©riode ${periodMatch[0]} restaur√©e`);
    }
    
    const wordsAfter = countWords(optimized);
    console.log(`      üìä R√©duction intelligente: ${countWords(prompt)} ‚Üí ${wordsAfter} mots`);
    
    return optimized;
}

async function generateOptimizedFluxPromptWithLearnings(enrichedEvent) {
    console.log(`      üé® [GEMINI-IMPROVED] G√©n√©ration prompt ULTRA-OPTIMIS√â pour "${enrichedEvent.titre}"...`);
    
    const enrichissement = enrichedEvent.enrichissement;
    const epoch = enrichedEvent.year < 476 ? 'ancient' : 
                  enrichedEvent.year < 1492 ? 'medieval' : 
                  enrichedEvent.year < 1789 ? 'renaissance' : 
                  enrichedEvent.year < 1914 ? 'industrial' : 'modern';
    
    const promptForGemini = `Tu es un expert en prompts pour Flux-schnell. G√©n√®re le MEILLEUR prompt possible bas√© sur les LEARNINGS de 86% de r√©ussite pr√©c√©dente.

√âV√âNEMENT √Ä ILLUSTRER :
- Titre : "${enrichedEvent.titre}"
- Ann√©e : ${enrichedEvent.year} (p√©riode ${epoch})
- Contexte : ${enrichissement.contextHistorique}
- Action : ${enrichissement.actionConcrete}
- V√™tements : ${enrichissement.vetements ? enrichissement.vetements.join(', ') : 'v√™tements d\'√©poque'}
- Objets : ${enrichissement.objetsSpecifiques ? enrichissement.objetsSpecifiques.join(', ') : 'objets d\'√©poque'}
- Mat√©riaux : ${enrichissement.materiaux ? enrichissement.materiaux.join(', ') : 'mat√©riaux d\'√©poque'}

üß† LEARNINGS INT√âGR√âS (86% r√©ussite) :
- MOTS-CL√âS EFFICACES : ${VALIDATION_LEARNINGS.EFFECTIVE_KEYWORDS.slice(0, 8).join(', ')}
- STRUCTURE GAGNANTE : Personnages + v√™tements + action + objets + ann√©e + p√©riode
- ANTI-PATTERNS : ${enrichissement.antiPatterns ? enrichissement.antiPatterns.join(', ') : 'symboles religieux pro√©minents'}

üéØ MISSION CRITIQUE : Cr√©er un prompt Flux-schnell OPTIMIS√â qui g√©n√®re une illustration PARFAITE.

üìã R√àGLES ABSOLUES FLUX-SCHNELL :
1. INCLURE OBLIGATOIREMENT : "${enrichedEvent.year}" ET "${epoch} period"
2. Z√âRO TEXTE dans l'image : Aucun mot, chiffre, panneau, inscription visible
3. MAXIMUM ${FLUX_SCHNELL_LIMITS.TARGET_WORDS} mots (limite T5 : ${FLUX_SCHNELL_LIMITS.TARGET_T5_TOKENS} tokens)
4. PRIVIL√âGIER les mots-cl√©s PROVEN efficaces
5. Structure optimis√©e : [Personnages sp√©cifiques] [v√™tements pr√©cis] [action] [objets] [mat√©riaux] [ann√©e] [p√©riode] [qualificateurs]

üé® OPTIMISATIONS FLUX-SCHNELL PROVEN :
- OBLIGATOIRE : "detailed", "cinematic", "realistic" (top 3 mots efficaces)
- V√äTEMENTS pr√©cis avec mati√®res (wool, silk, cotton, leather)
- OBJETS/OUTILS sp√©cifiques (stone, wood, gold, copper, parchment)
- ACTIONS concr√®tes (observing, supervising, constructing, examining)

üö´ INTERDICTIONS STRICTES RENFORC√âES :
- text, writing, letters, numbers, signs, inscriptions, words
- wings, angel, flying, supernatural, god, deity, magical, glowing, divine
- modern objects, cars, phones, contemporary clothing
- prominent crosses, oversized religious symbols (sauf si central)

üìê STRUCTURE OPTIMALE PROVEN :
[Specific people] in [precise clothing material] [concrete action] [specific objects], [materials], ${enrichedEvent.year}, ${epoch} period, detailed, cinematic, realistic

‚ö° R√âPONDS UNIQUEMENT avec le prompt Flux-schnell OPTIMAL incluant OBLIGATOIREMENT "${enrichedEvent.year}", "${epoch} period", "detailed", "cinematic", "realistic", MAXIMUM ${FLUX_SCHNELL_LIMITS.TARGET_WORDS} MOTS.`;

    try {
        const fluxPrompt = await callGemini(promptForGemini, {
            model: GEMINI_CONFIG.promptGeneration,
            maxOutputTokens: 120,
            temperature: 0.7
        });
        
        let cleanPrompt = fluxPrompt.trim().replace(/^["']|["']$/g, '');
        
        const initialWords = countWords(cleanPrompt);
        console.log(`      üìä [GEMINI-IMPROVED] Prompt initial: "${cleanPrompt}" (${initialWords} mots)`);
        
        // V√âRIFICATION CRITIQUE : √âl√©ments obligatoires
        const hasYear = cleanPrompt.includes(enrichedEvent.year.toString());
        const hasPeriod = cleanPrompt.includes('period') || cleanPrompt.includes(epoch);
        const hasDetailed = cleanPrompt.includes('detailed');
        const hasCinematic = cleanPrompt.includes('cinematic');
        const hasRealistic = cleanPrompt.includes('realistic');
        
        console.log(`      üîç V√©rifications obligatoires:`);
        console.log(`         üìÖ Ann√©e ${enrichedEvent.year}: ${hasYear ? '‚úÖ' : '‚ùå'}`);
        console.log(`         üèõÔ∏è P√©riode ${epoch}: ${hasPeriod ? '‚úÖ' : '‚ùå'}`);
        console.log(`         üé® "detailed": ${hasDetailed ? '‚úÖ' : '‚ùå'}`);
        console.log(`         üé¨ "cinematic": ${hasCinematic ? '‚úÖ' : '‚ùå'}`);
        console.log(`         üì∏ "realistic": ${hasRealistic ? '‚úÖ' : '‚ùå'}`);
        
        // CORRECTION AUTOMATIQUE si manquants
        let corrections = [];
        if (!hasYear) corrections.push(enrichedEvent.year.toString());
        if (!hasPeriod) corrections.push(`${epoch} period`);
        if (!hasDetailed) corrections.push('detailed');
        if (!hasCinematic) corrections.push('cinematic');
        if (!hasRealistic) corrections.push('realistic');
        
        if (corrections.length > 0) {
            console.log(`      üîß Correction automatique: ajout ${corrections.length} √©l√©ments manquants`);
            cleanPrompt = `${cleanPrompt}, ${corrections.join(', ')}`;
            console.log(`      ‚úÖ Prompt corrig√©: "${cleanPrompt}"`);
        }
        
        // Optimisation si n√©cessaire
        if (countWords(cleanPrompt) > FLUX_SCHNELL_LIMITS.TARGET_WORDS) {
            console.log(`      ‚ö†Ô∏è D√©passement limite, optimisation intelligente...`);
            cleanPrompt = optimizePromptIntelligently(cleanPrompt);
            
            // Re-v√©rification apr√®s optimisation
            if (!cleanPrompt.includes(enrichedEvent.year.toString())) {
                cleanPrompt = `${cleanPrompt}, ${enrichedEvent.year}`;
            }
            if (!cleanPrompt.includes('period') && !cleanPrompt.includes(epoch)) {
                cleanPrompt = `${cleanPrompt}, ${epoch} period`;
            }
            if (!cleanPrompt.includes('detailed')) {
                cleanPrompt = `${cleanPrompt}, detailed`;
            }
        }
        
        const finalWordCount = countWords(cleanPrompt);
        
        console.log(`      üìä [GEMINI-IMPROVED] Prompt final ULTRA-OPTIMIS√â: "${cleanPrompt}"`);
        console.log(`      üìè Longueur: ${finalWordCount} mots (~${Math.round(finalWordCount * 4)} tokens T5)`);
        console.log(`      ‚úÖ Limite respect√©e: ${finalWordCount <= FLUX_SCHNELL_LIMITS.TARGET_WORDS ? 'OUI' : 'NON'}`);
        console.log(`      üß† Learnings int√©gr√©s: Mots-cl√©s proven + Structure optimale + Anti-patterns √©vit√©s`);
        
        return cleanPrompt;
        
    } catch (error) {
        console.error(`      ‚ùå [GEMINI-IMPROVED] Erreur g√©n√©ration prompt:`, error.message);
        // Fallback intelligent avec tous les √©l√©ments obligatoires
        const fallbackPrompt = `${enrichissement.motsClesVisuelsOptimises ? enrichissement.motsClesVisuelsOptimises.slice(0, 2).join(' ') : 'people'}, ${enrichedEvent.year}, ${epoch} period, detailed, cinematic, realistic`;
        console.log(`      üîÑ Prompt de secours ULTRA-OPTIMIS√â: "${fallbackPrompt}"`);
        return fallbackPrompt;
    }
}

// ==============================================================================
// VALIDATION INTELLIGENCE AUGMENT√âE AVEC LEARNINGS
// ==============================================================================

async function validateImageWithLearnings(event, imageUrl) {
    console.log(`   üîç [GEMINI-VISION-IMPROVED] Validation intelligente augment√©e pour ${event.year}...`);
    
    const prompt = `√âvalue cette image pour l'√©v√©nement "${event.titre}" (${event.year}) avec le STANDARD DE QUALIT√â qui a produit 86% de r√©ussite pr√©c√©dente.

VALIDATION INTELLIGENTE AUGMENT√âE :

üö´ CRIT√àRES DE REJET AUTOMATIQUE UNIQUEMENT SI :
1. TEXTE INTERDIT : Date "${event.year}" visible ou titre "${event.titre}" √©crit dans l'image
2. TEXTE PRO√âMINENT : Gros titre, panneau principal, inscription majeure au premier plan
3. ANACHRONISMES MYTHOLOGIQUES : ailes, cr√©atures volantes, anges, dieux, pouvoirs surnaturels
4. ANACHRONISMES MODERNES : voitures, smartphones, v√™tements contemporains
5. ANATOMIE IMPOSSIBLE : humains volants, cr√©atures fantastiques
6. √âPOQUE INCORRECTE : diff√©rence >50 ans avec ${event.year}
7. SYMBOLES RELIGIEUX TROP PRO√âMINENTS (sauf si √©v√©nement religieux central)

‚úÖ CRIT√àRES DE VALIDATION RENFORC√âS (viser score 8-9/10) :
1. V√äTEMENTS D'√âPOQUE pr√©cis et d√©taill√©s
2. OBJETS/OUTILS sp√©cifiques √† la p√©riode historique
3. ARCHITECTURE coh√©rente avec l'√©poque et la r√©gion
4. MAT√âRIAUX appropri√©s (pierre, bois, m√©taux d'√©poque)
5. ACTIONS CONCR√àTES et observables
6. PERSONNAGES avec anatomie r√©aliste et r√¥les d√©finis
7. CONTEXTE CULTUREL appropri√© √† la r√©gion
8. QUALIT√â VISUELLE "detailed, cinematic, realistic"

‚úÖ TEXTE ACCEPTABLE (ne pas rejeter) :
- Texte sur livres, manuscrits, parchemins (arri√®re-plan)
- Inscriptions sur banni√®res, blasons, architecture
- Texte flou, illisible ou d√©coratif
- √âcritures anciennes sur objets d'√©poque

üéØ STANDARD DE QUALIT√â VIS√â : 8-9/10 (comme session pr√©c√©dente)

‚ö†Ô∏è ATTENTION SP√âCIALE LEARNINGS :
- Privil√©gier la SP√âCIFICIT√â sur la g√©n√©ralit√©
- Valoriser les d√©tails culturels et techniques pr√©cis
- Accepter les imperfections mineures si l'ensemble est coh√©rent
- R√©compenser la richesse historique et la pr√©cision d'√©poque

JSON OBLIGATOIRE:
{
  "hasForbiddenText": true/false,
  "forbiddenTextDescription": "description du texte interdit s'il y en a",
  "hasAcceptableText": true/false,
  "acceptableTextDescription": "description du texte acceptable",
  "representsEvent": true/false,
  "eventRelevance": "description pr√©cise de ce que montre l'image",
  "hasWingsOrSupernatural": true/false,
  "hasModernObjects": true/false,
  "anatomyRealistic": true/false,
  "historicalAccuracy": true/false,
  "periodClothing": true/false,
  "specificObjects": true/false,
  "culturalAuthenticity": true/false,
  "visualQuality": "excellent|good|adequate|poor",
  "specificity": "high|medium|low",
  "overallValid": true/false,
  "score": number 1-10,
  "reason": "explication d√©taill√©e incluant points forts et am√©liorations possibles",
  "qualityAnalysis": "analyse de ce qui rend cette image r√©ussie ou non"
}`;

    try {
        const responseText = await callGeminiWithImage(prompt, imageUrl, {
            model: GEMINI_CONFIG.imageValidation,
            maxOutputTokens: 450,
            temperature: 0.05
        });

        const result = JSON.parse(responseText);
        
        console.log(`      üìä [GEMINI-VISION-IMPROVED] Validation INTELLIGENTE AUGMENT√âE:`);
        console.log(`      üö´ Texte interdit (date/titre): ${result.hasForbiddenText ? '‚ùå' : '‚úÖ'}`);
        if (result.hasForbiddenText) {
            console.log(`      üö´ Texte interdit d√©tect√©: "${result.forbiddenTextDescription}"`);
        }
        console.log(`      üìù Texte acceptable: ${result.hasAcceptableText ? '‚úÖ' : 'Aucun'}`);
        console.log(`      üéØ Repr√©sente √©v√©nement: ${result.representsEvent}`);
        console.log(`      üëî V√™tements d'√©poque: ${result.periodClothing}`);
        console.log(`      üîß Objets sp√©cifiques: ${result.specificObjects}`);
        console.log(`      üèõÔ∏è Authenticit√© culturelle: ${result.culturalAuthenticity}`);
        console.log(`      üé® Qualit√© visuelle: ${result.visualQuality}`);
        console.log(`      üéØ Sp√©cificit√©: ${result.specificity}`);
        console.log(`      üìä Score: ${result.score}/10`);
        console.log(`      üí≠ Raison: "${result.reason}"`);
        console.log(`      üîç Analyse qualit√©: "${result.qualityAnalysis}"`);
        
        // VALIDATION RENFORC√âE avec standard plus √©lev√©
        const isValid = !result.hasForbiddenText && 
                       !result.hasWingsOrSupernatural && 
                       !result.hasModernObjects && 
                       result.anatomyRealistic && 
                       result.periodClothing && 
                       result.historicalAccuracy && 
                       result.representsEvent &&
                       result.score >= MIN_VALIDATION_SCORE && 
                       result.overallValid;

        if (isValid) {
            console.log(`      ‚úÖ [GEMINI-VISION-IMPROVED] Image VALID√âE avec standard √©lev√© (${result.score}/10)`);
            console.log(`      üéä SUCC√àS: ${result.visualQuality} qualit√© + ${result.specificity} sp√©cificit√© + Authenticit√© historique`);
        } else {
            console.log(`      ‚ùå [GEMINI-VISION-IMPROVED] Validation √©chou√©e - Standard √©lev√© non atteint`);
            console.log(`      üìù Analyse: ${result.qualityAnalysis}`);
        }
        
        return {
            isValid,
            score: result.score,
            explanation: result.reason,
            qualityAnalysis: result.qualityAnalysis,
            detailedAnalysis: {
                hasForbiddenText: result.hasForbiddenText,
                forbiddenTextDescription: result.forbiddenTextDescription,
                hasAcceptableText: result.hasAcceptableText,
                acceptableTextDescription: result.acceptableTextDescription,
                representsEvent: result.representsEvent,
                eventRelevance: result.eventRelevance,
                hasWingsOrSupernatural: result.hasWingsOrSupernatural,
                hasModernObjects: result.hasModernObjects,
                anatomyRealistic: result.anatomyRealistic,
                historicalAccuracy: result.historicalAccuracy,
                periodClothing: result.periodClothing,
                specificObjects: result.specificObjects,
                culturalAuthenticity: result.culturalAuthenticity,
                visualQuality: result.visualQuality,
                specificity: result.specificity,
                overallValid: result.overallValid
            }
        };
        
    } catch (error) {
        console.error(`      ‚ùå [GEMINI-VISION-IMPROVED] Erreur validation:`, error.message);
        return {
            isValid: false,
            score: 0,
            explanation: `Erreur de validation: ${error.message}`,
            qualityAnalysis: "Erreur technique de validation",
            detailedAnalysis: {
                hasForbiddenText: false,
                hasAcceptableText: false,
                representsEvent: false,
                hasWingsOrSupernatural: false,
                hasModernObjects: false,
                anatomyRealistic: false,
                historicalAccuracy: false,
                periodClothing: false,
                specificObjects: false,
                culturalAuthenticity: false,
                visualQuality: "poor",
                specificity: "low",
                overallValid: false
            }
        };
    }
}

// ==============================================================================
// G√âN√âRATION D'IMAGE FLUX-SCHNELL (CONSERVATION COMPL√àTE)
// ==============================================================================

async function generateImageEnhanced(prompt, event) {
    console.log(`      üñºÔ∏è [FLUX] G√©n√©ration optimis√©e: ${prompt.substring(0, 60)}...`);
    console.log(`      üìä Analyse: ${countWords(prompt)} mots (~${Math.round(countWords(prompt) * 4)} tokens)`);
    
    // Configuration Flux-schnell optimis√©e avec anti-patterns renforc√©s
    const fluxConfig = {
        prompt,
        negative_prompt: `modern text, dates, titles, large inscriptions, contemporary writing, modern typography, ${event.year}, "${event.titre}", wings, angel, flying, supernatural, mythological, god, deity, magical, glowing, divine, fantasy creature, unrealistic anatomy, modern objects, smartphones, cars, phones, computers, electronics, contemporary clothing, jeans, t-shirt, sneakers, digital art, cartoon, anime, manga, abstract, blurry, low quality, science fiction, alien, spaceship, robot, cyberpunk, prominent christian cross, oversized religious symbols, anachronistic religious elements`,
        aspect_ratio: "16:9",
        num_inference_steps: FLUX_SCHNELL_CONFIG.steps,
        output_format: "webp",
        output_quality: FLUX_SCHNELL_CONFIG.quality,
        seed: FLUX_SCHNELL_CONFIG.seed(),
        guidance_scale: 2.5
    };
    
    console.log(`      üõ°Ô∏è [FLUX] Protection intelligente RENFORC√âE activ√©e`);
    console.log(`      üé® [FLUX] Configuration historique optimis√©e avec learnings`);
    
    try {
        const output = await replicate.run("black-forest-labs/flux-schnell", {
            input: fluxConfig
        });

        if (Array.isArray(output) && output[0] && typeof output[0] === 'string' && output[0].startsWith('http')) {
            console.log(`      ‚úÖ [FLUX] Image g√©n√©r√©e avec succ√®s: ${output[0]}`);
            return output[0];
        }

        // Fallback avec predictions pour monitoring
        console.log(`      üîÑ [FLUX] Passage en mode prediction pour monitoring...`);
        const model = await replicate.models.get("black-forest-labs", "flux-schnell");
        const prediction = await replicate.predictions.create({
            version: model.latest_version.id,
            input: fluxConfig
        });

        let finalPrediction = prediction;
        let attempts = 0;
        const maxAttempts = 30;

        while (finalPrediction.status !== 'succeeded' && finalPrediction.status !== 'failed' && attempts < maxAttempts) {
            await new Promise(resolve => setTimeout(resolve, 2000));
            finalPrediction = await replicate.predictions.get(prediction.id);
            attempts++;
            
            if (attempts % 5 === 0) {
                console.log(`      ‚è≥ [FLUX] G√©n√©ration en cours... (${attempts}/${maxAttempts}) - Status: ${finalPrediction.status}`);
            }
        }

        if (finalPrediction.status === 'succeeded' && finalPrediction.output?.[0]) {
            console.log(`      ‚úÖ [FLUX] Image g√©n√©r√©e avec succ√®s (prediction): ${finalPrediction.output[0]}`);
            return finalPrediction.output[0];
        }

        if (finalPrediction.status === 'failed') {
            console.log(`      ‚ùå [FLUX] √âchec de g√©n√©ration: ${finalPrediction.error || 'Erreur inconnue'}`);
            console.log(`      üìù [FLUX] Prompt utilis√©: "${prompt}"`);
        }

        return null;

    } catch (error) {
        console.error(`      ‚ùå [FLUX] Erreur de g√©n√©ration:`, error.message);
        console.log(`      üìù [FLUX] Prompt qui a √©chou√©: "${prompt}"`);
        return null;
    }
}

// ==============================================================================
// FONCTIONS UTILITAIRES (CONSERVATION COMPL√àTE + AM√âLIORATION)
// ==============================================================================

async function uploadImageToSupabase(imageUrl, eventTitle) {
    const response = await fetch(imageUrl);
    const imageBuffer = await response.arrayBuffer();
    const processedBuffer = await sharp(Buffer.from(imageBuffer))
        .webp({ quality: 85 })
        .resize(800, 450, { fit: 'cover' })
        .toBuffer();
        
    const fileName = `improved_${eventTitle.toLowerCase().replace(/[^a-z0-9]/g, '_').substring(0, 30)}_${Date.now()}.webp`;
    
    const { error } = await supabase.storage
        .from('evenements-image')
        .upload(fileName, processedBuffer, { 
            contentType: 'image/webp', 
            upsert: true 
        });
        
    if (error) throw error;
    
    const { data: { publicUrl } } = supabase.storage
        .from('evenements-image')
        .getPublicUrl(fileName);
        
    return publicUrl;
}

function enrichAndFinalizeEventWithLearnings(enrichedEvent, imageUrl, illustrationPrompt, validationData = null) {
    const year = parseInt(enrichedEvent.year);
    const epoch = year < 476 ? 'Antiquit√©' : 
                  year < 1492 ? 'Moyen √Çge' : 
                  year < 1789 ? 'Moderne' : 
                  year < 1914 ? 'Contemporaine' : 'XXe';
                  
    const finalEvent = {
        date: `${enrichedEvent.year.toString().padStart(4, '0')}-01-01`,
        titre: enrichedEvent.titre,
        universel: enrichedEvent.region?.toLowerCase() !== 'europe',
        langue: 'fr',
        ecart_temps_max: 300,
        facteur_variation: 1.5,
        illustration_url: imageUrl,
        region: enrichedEvent.region || enrichedEvent.specificLocation,
        niveau_difficulte: Math.min(6, Math.max(2, Math.floor((year - 1400) / 100) + 2)),
        types_evenement: [enrichedEvent.type],
        pays: [enrichedEvent.specificLocation || enrichedEvent.region],
        epoque: epoch,
        mots_cles: enrichedEvent.titre.toLowerCase().replace(/[^\w\s]/g, '').split(' ').filter(w => w.length > 3),
        date_formatee: enrichedEvent.year.toString(),
        code: `imp${Date.now().toString().slice(-6)}`,
        date_precision: 'year',
        ecart_temps_min: 50,
        frequency_score: 0,
        description_detaillee: enrichedEvent.enrichissement?.contextHistorique || enrichedEvent.description,
        prompt_flux: illustrationPrompt,
        // Nouveaux champs avec learnings
        learnings_version: "v3_improved",
        generation_strategy: "gemini_optimized_with_learnings"
    };

    // Ajouter les donn√©es de validation IA augment√©es
    if (validationData) {
        finalEvent.validation_score = validationData.score;
        finalEvent.validation_explanation = validationData.explanation;
        finalEvent.validation_quality_analysis = validationData.qualityAnalysis;
        finalEvent.validation_detailed_analysis = validationData.detailedAnalysis;
        
        console.log(`      üíæ [IMPROVED] Donn√©es de validation IA AUGMENT√âES ajout√©es:`);
        console.log(`         üìä Score: ${validationData.score}/10`);
        console.log(`         üìù Explication: "${validationData.explanation}"`);
        console.log(`         üîç Analyse qualit√©: "${validationData.qualityAnalysis}"`);
        console.log(`         üìã Crit√®res d√©taill√©s: ${Object.keys(validationData.detailedAnalysis).length} √©l√©ments`);
    }

    return finalEvent;
}

async function insertValidatedEvent(finalEvent) {
    const { data, error } = await supabase.from('goju').insert([finalEvent]).select();
    if (error) {
        if (error.code === '23505') {
            finalEvent.code = `imp${Date.now().toString().slice(-6)}${Math.floor(Math.random()*100)}`;
            return await insertValidatedEvent(finalEvent);
        }
        throw error;
    }
    return data[0];
}

// ==============================================================================
// TRAITEMENT STRAT√âGIE HYBRIDE OPTIMIS√âE AVEC LEARNINGS
// ==============================================================================

async function processEventWithOptimizedStrategy(event) {
    console.log(`\n   üñºÔ∏è [OPTIMIZED] Traitement optimis√©: "${event.titre}" (${event.year})`);
    
    // Phase 1: Enrichissement avec learnings
    console.log(`      üìö Phase 1: [GEMINI-IMPROVED] Enrichissement avec learnings...`);
    const enrichedEvent = await enrichEventWithLearnings(event);
    
    let successfullyCreated = false;
    let validationData = null;
    
    for (let attempt = 1; attempt <= MAX_IMAGE_ATTEMPTS && !successfullyCreated; attempt++) {
        console.log(`      üé® Phase 2: G√©n√©ration image OPTIMIS√âE - Tentative ${attempt}/${MAX_IMAGE_ATTEMPTS}`);
        
        try {
            // Phase 2a: G√©n√©ration prompt ultra-optimis√©
            const optimizedPrompt = await generateOptimizedFluxPromptWithLearnings(enrichedEvent);
            
            // Phase 2b: G√©n√©ration image avec Flux-schnell
            const imageUrl = await generateImageEnhanced(optimizedPrompt, enrichedEvent);
            
            if (!imageUrl) {
                console.log("      ‚ùå √âchec g√©n√©ration image");
                continue;
            }
            
            // Phase 3: Validation avec intelligence augment√©e
            const validationResult = await validateImageWithLearnings(enrichedEvent, imageUrl);
            validationData = validationResult;
            
            if (validationResult.isValid) {
                try {
                    console.log(`      üì§ [OPTIMIZED] Upload vers Supabase...`);
                    const uploadedUrl = await uploadImageToSupabase(imageUrl, event.titre);
                    
                    const finalEvent = enrichAndFinalizeEventWithLearnings(enrichedEvent, uploadedUrl, optimizedPrompt, validationData);
                    await insertValidatedEvent(finalEvent);
                    
                    addToCache(event.titre);
                    console.log(`      ‚úÖ [OPTIMIZED] √âv√©nement cr√©√© avec EXCELLENCE !`);
                    console.log(`      üìä Strat√©gie: Gemini-Improved‚ÜíLearnings‚ÜíFlux‚ÜíVision-Enhanced`);
                    console.log(`      ü§ñ Validation IA augment√©e: Score ${validationData.score}/10`);
                    console.log(`      üéØ Qualit√©: ${validationData.detailedAnalysis?.visualQuality}, Sp√©cificit√©: ${validationData.detailedAnalysis?.specificity}`);
                    successfullyCreated = true;
                    return finalEvent;
                    
                } catch (uploadError) {
                    console.error(`      ‚ùå Erreur upload:`, uploadError.message);
                    
                    if (attempt === MAX_IMAGE_ATTEMPTS) {
                        try {
                            const finalEvent = enrichAndFinalizeEventWithLearnings(enrichedEvent, imageUrl, optimizedPrompt, validationData);
                            await insertValidatedEvent(finalEvent);
                            addToCache(event.titre);
                            console.log(`      ‚úÖ [OPTIMIZED] Cr√©√© avec URL directe !`);
                            return finalEvent;
                        } catch (directError) {
                            console.error(`      ‚ùå √âchec URL directe:`, directError.message);
                        }
                    }
                }
            } else {
                console.log("      ‚ùå Image non valid√©e par standard √©lev√©, nouvelle tentative...");
                console.log(`      üìä Score obtenu: ${validationData.score}/10 (min requis: ${MIN_VALIDATION_SCORE})`);
                console.log(`      üìù Analyse: ${validationData.qualityAnalysis}`);
            }
            
        } catch (error) {
            console.error(`      ‚ùå Erreur tentative ${attempt}:`, error.message);
        }
        
        if (attempt < MAX_IMAGE_ATTEMPTS) {
            await new Promise(resolve => setTimeout(resolve, 2000));
        }
    }
    
    // Fallback
    console.log(`      üîÑ FALLBACK: Image par d√©faut...`);
    try {
        const defaultImageUrl = `https://via.placeholder.com/800x450/8B4513/FFFFFF?text=${encodeURIComponent(event.year + ' - ' + event.type)}`;
        
        const finalEvent = enrichAndFinalizeEventWithLearnings(enrichedEvent, defaultImageUrl, "Image par d√©faut", validationData);
        await insertValidatedEvent(finalEvent);
        
        addToCache(event.titre);
        console.log(`      ‚úÖ [OPTIMIZED] Cr√©√© avec fallback !`);
        return finalEvent;
        
    } catch (fallbackError) {
        console.error(`      ‚ùå [OPTIMIZED] √âchec total:`, fallbackError.message);
        return null;
    }
}

// ==============================================================================
// TRAITEMENT PRINCIPAL OPTIMIS√â AVEC LEARNINGS
// ==============================================================================

async function processBatchOptimized(startYear, endYear, batchSize, batchNumber) {
    console.log(`\nüì¶ === LOT ${batchNumber} GEMINI OPTIMIS√â AVEC LEARNINGS (${batchSize} √©v√©nements) ===`);
    
    // Phase 1: G√©n√©ration avec learnings
    const events = await generateEventBatchWithLearnings(startYear, endYear, batchSize, batchNumber);
    if (events.length === 0) {
        console.log("‚ùå [GEMINI-IMPROVED] √âchec g√©n√©ration");
        return [];
    }
    
    // Phase 2: V√©rification avec standard √©lev√©
    const { validEvents } = await verifyEventBatchWithGemini(events);
    if (validEvents.length === 0) {
        console.log("‚ùå [GEMINI-IMPROVED] Aucun √©v√©nement valid√©");
        return [];
    }
    
    console.log(`\n   üñºÔ∏è [OPTIMIZED] Traitement des images pour ${validEvents.length} √©v√©nements avec learnings...`);
    
    const completedEvents = [];
    
    for (const event of validEvents) {
        const result = await processEventWithOptimizedStrategy(event);
        if (result) {
            completedEvents.push(result);
            console.log(`      ‚úÖ [OPTIMIZED] "${event.titre}" trait√© avec EXCELLENCE`);
            if (result.validation_score) {
                console.log(`      ü§ñ [OPTIMIZED] Validation IA: ${result.validation_score}/10 (${result.validation_quality_analysis})`);
            }
        } else {
            console.log(`      ‚ùå [OPTIMIZED] √âchec traitement "${event.titre}"`);
        }
        
        await new Promise(resolve => setTimeout(resolve, 1500));
    }
    
    console.log(`\n   üìä [OPTIMIZED] Bilan lot ${batchNumber}: ${completedEvents.length}/${validEvents.length} r√©ussis avec learnings`);
    
    // Statistiques de validation IA pour le lot
    const validationStats = completedEvents.filter(e => e.validation_score).length;
    if (validationStats > 0) {
        const avgScore = completedEvents
            .filter(e => e.validation_score)
            .reduce((sum, e) => sum + e.validation_score, 0) / validationStats;
        const excellentCount = completedEvents.filter(e => e.validation_score >= 8).length;
        console.log(`   ü§ñ [OPTIMIZED] Validation IA: ${validationStats}/${completedEvents.length} √©v√©nements analys√©s`);
        console.log(`   üìä Score moyen: ${avgScore.toFixed(1)}/10, Excellents (‚â•8): ${excellentCount}/${validationStats} (${Math.round((excellentCount/validationStats)*100)}%)`);
    }
    
    return completedEvents;
}

// ==============================================================================
// SCRIPT PRINCIPAL OPTIMIS√â AVEC LEARNINGS
// ==============================================================================

async function main() {
    console.log("\nüöÄ === SAYON V3 IMPROVED - AUTO-APPRENTISSAGE AVEC LEARNINGS ===");
    console.log("üß† Configuration IA OPTIMIS√âE avec 86% de r√©ussite int√©gr√©e:");
    console.log("   üéØ Gemini 2.0 Flash: TOUTES fonctions avec learnings int√©gr√©s");
    console.log("   üñºÔ∏è Flux-schnell: G√©n√©ration images avec prompts ultra-optimis√©s");
    console.log("   üëÅÔ∏è Validation augment√©e: Standard √©lev√© bas√© sur vos succ√®s");
    
    console.log("\nüìä LEARNINGS INT√âGR√âS AUTOMATIQUEMENT:");
    console.log(`   üèÜ Taux de r√©ussite cible: 86%+ (bas√© sur vos 24/28 succ√®s)`);
    console.log(`   üé® Mots-cl√©s efficaces: ${VALIDATION_LEARNINGS.EFFECTIVE_KEYWORDS.slice(0, 6).join(', ')}...`);
    console.log(`   üìã Patterns gagnants: V√™tements pr√©cis + Objets sp√©cifiques + Actions concr√®tes`);
    console.log(`   üö´ Anti-patterns √©vit√©s: Symboles religieux pro√©minents, g√©n√©ralit√©s`);
    console.log(`   üìà Standard de validation: Score minimum ${MIN_VALIDATION_SCORE}/10`);
    
    console.log("\nüÜï AM√âLIORATIONS AUTO-APPRENANTES:");
    console.log("   ‚úÖ 1. Prompts ultra-optimis√©s (mots-cl√©s proven + structure gagnante)");
    console.log("   ‚úÖ 2. Validation intelligente augment√©e (crit√®res renforc√©s)");
    console.log("   ‚úÖ 3. Enrichissement avec sp√©cificit√© maximale");
    console.log("   ‚úÖ 4. Anti-patterns automatiques (√©vite erreurs identifi√©es)");
    console.log("   ‚úÖ 5. Standard de qualit√© √©lev√© (vise 8-9/10)");
    console.log("   ‚úÖ 6. Sauvegarde analyse qualit√© d√©taill√©e");
    console.log("   ‚úÖ 7. Corrections automatiques des prompts Flux");
    console.log("   ‚úÖ 8. √âconomies 90%+ maintenues avec qualit√© augment√©e");
    
    // V√©rification APIs
    console.log("\nüîß === V√âRIFICATION DES APIS ===");
    if (!process.env.GEMINI_API_KEY) {
        console.error("‚ùå GEMINI_API_KEY manquante dans .env");
        process.exit(1);
    }
    if (!process.env.REPLICATE_API_TOKEN) {
        console.error("‚ùå REPLICATE_API_TOKEN manquante dans .env");
        process.exit(1);
    }
    if (!process.env.SUPABASE_URL) {
        console.error("‚ùå SUPABASE_URL manquante dans .env");
        process.exit(1);
    }
    console.log("‚úÖ APIs configur√©es: Gemini + Replicate + Supabase");
    
    const startYear = parseInt(await askQuestion('üìÖ Ann√©e de D√âBUT : '));
    const endYear = parseInt(await askQuestion('üìÖ Ann√©e de FIN : '));
    const targetCount = parseInt(await askQuestion('üéØ Nombre d\'√©v√©nements : '));
    
    const loadResult = await loadExistingTitles(startYear, endYear);
    
    console.log(`\nüö´ === PROTECTION ANTI-DOUBLONS RENFORC√âE ===`);
    console.log(`üìä Total √©v√©nements en base: ${existingNormalizedTitles.size}`);
    console.log(`üéØ P√©riode cibl√©e: ${startYear}-${endYear}`);
    console.log(`‚ö†Ô∏è D√©fi: ${loadResult.periodEvents.length} √©v√©nements d√©j√† pr√©sents dans cette p√©riode`);
    console.log(`üß† Learnings: Le script va privil√©gier sp√©cificit√© et diversit√© g√©ographique`);
    
    if (loadResult.periodEvents.length > 0) {
        console.log(`\nüìã √âv√©nements existants dans la p√©riode ${startYear}-${endYear}:`);
        loadResult.periodEvents.slice(0, 10).forEach(title => {
            console.log(`   - ${title}`);
        });
        if (loadResult.periodEvents.length > 10) {
            console.log(`   ... et ${loadResult.periodEvents.length - 10} autres`);
        }
    }
    
    let createdCount = 0;
    let batchNumber = 0;
    const startTime = Date.now();
    let totalValidationCount = 0;
    let totalValidationScoreSum = 0;
    let excellentCount = 0;
    
    while (createdCount < targetCount && batchNumber < 75) {
        batchNumber++;
        const remainingEvents = targetCount - createdCount;
        const currentBatchSize = Math.min(BATCH_SIZE, remainingEvents);
        
        try {
            console.log(`\nüöÄ [OPTIMIZED] D√©but lot ${batchNumber} avec strat√©gie ultra-optimis√©e...`);
            const completedEvents = await processBatchOptimized(startYear, endYear, currentBatchSize, batchNumber);
            createdCount += completedEvents.length;
            
            // Statistiques de validation IA globales
            const batchValidations = completedEvents.filter(e => e.validation_score);
            totalValidationCount += batchValidations.length;
            totalValidationScoreSum += batchValidations.reduce((sum, e) => sum + e.validation_score, 0);
            excellentCount += batchValidations.filter(e => e.validation_score >= 8).length;
            
            const elapsed = (Date.now() - startTime) / 1000;
            const rate = createdCount / (elapsed / 60);
            const lotSuccessRate = ((createdCount / (batchNumber * BATCH_SIZE)) * 100).toFixed(1);
            const realSuccessRate = ((createdCount / targetCount) * 100).toFixed(1);
            
            console.log(`\nüìä BILAN LOT ${batchNumber} ULTRA-OPTIMIS√â:`);
            console.log(`   ‚úÖ Cr√©√©s: ${completedEvents.length}/${currentBatchSize}`);
            console.log(`   üìà Total: ${createdCount}/${targetCount} (${realSuccessRate}% de l'objectif)`);
            console.log(`   üéØ Taux de r√©ussite lot: ${lotSuccessRate}%`);
            console.log(`   ‚è±Ô∏è Rate: ${rate.toFixed(1)} √©v√©nements/min`);
            console.log(`   üí∞ √âconomies Gemini: 90%+ MAINTENUES`);
            console.log(`   üß† Learnings: Standards √©lev√©s + Optimisations proven`);
            
            // Stats validation IA
            if (batchValidations.length > 0) {
                const batchAvgScore = batchValidations.reduce((sum, e) => sum + e.validation_score, 0) / batchValidations.length;
                const batchExcellent = batchValidations.filter(e => e.validation_score >= 8).length;
                console.log(`   ü§ñ Validation IA lot: ${batchValidations.length}/${completedEvents.length} analys√©s (score moyen: ${batchAvgScore.toFixed(1)}/10)`);
                console.log(`   üèÜ Excellents (‚â•8): ${batchExcellent}/${batchValidations.length} (${Math.round((batchExcellent/batchValidations.length)*100)}%)`);
            }
            
        } catch (error) {
            console.error(`‚ùå [OPTIMIZED] Erreur lot ${batchNumber}:`, error.message);
            console.log(`üîÑ [OPTIMIZED] Continuation malgr√© l'erreur du lot ${batchNumber}...`);
        }
        
        if (createdCount < targetCount) {
            console.log("   ‚è≥ Pause 3s...");
            await new Promise(resolve => setTimeout(resolve, 3000));
        }
    }
    
    const totalTime = (Date.now() - startTime) / 1000;
    const finalRate = createdCount / (totalTime / 60);
    const finalLotSuccessRate = ((createdCount / (batchNumber * BATCH_SIZE)) * 100).toFixed(1);
    const realFinalSuccessRate = ((createdCount / targetCount) * 100).toFixed(1);
    const globalAvgValidationScore = totalValidationCount > 0 ? (totalValidationScoreSum / totalValidationCount).toFixed(1) : 'N/A';
    const globalExcellentRate = totalValidationCount > 0 ? Math.round((excellentCount / totalValidationCount) * 100) : 0;
    
    console.log(`\nüéâ === TRAITEMENT ULTRA-OPTIMIS√â AVEC LEARNINGS TERMIN√â ===`);
    console.log(`‚úÖ √âv√©nements cr√©√©s: ${createdCount}/${targetCount} (${realFinalSuccessRate}% de l'objectif)`);
    console.log(`üì¶ Lots trait√©s: ${batchNumber}`);
    console.log(`üéØ Taux de r√©ussite par lot: ${finalLotSuccessRate}%`);
    console.log(`üéØ Taux de r√©ussite global: ${realFinalSuccessRate}%`);
    console.log(`‚è±Ô∏è Temps total: ${Math.floor(totalTime/60)}min ${(totalTime%60).toFixed(0)}s`);
    console.log(`üìà Rate finale: ${finalRate.toFixed(1)} √©v√©nements/min`);
    console.log(`üí∞ √âconomies Gemini: 90%+ MAINTENUES avec qualit√© AUGMENT√âE`);
    console.log(`üß† Strat√©gie: Learnings int√©gr√©s + Standards √©lev√©s + Optimisations proven`);
    
    // Stats finales validation IA avec learnings
    console.log(`\nü§ñ === R√âSULTATS VALIDATION IA AVEC LEARNINGS ===`);
    console.log(`üìä √âv√©nements analys√©s: ${totalValidationCount}/${createdCount} (${((totalValidationCount/createdCount)*100).toFixed(1)}%)`);
    if (totalValidationCount > 0) {
        console.log(`üìà Score moyen global: ${globalAvgValidationScore}/10`);
        console.log(`üèÜ Taux d'excellence (‚â•8): ${excellentCount}/${totalValidationCount} (${globalExcellentRate}%)`);
        console.log(`üéØ Objectif atteint: ${globalExcellentRate >= 80 ? '‚úÖ EXCELLENT' : globalExcellentRate >= 60 ? '‚úÖ BON' : '‚ö†Ô∏è √Ä am√©liorer'} (cible: 80%+)`);
        console.log(`üíæ Toutes les analyses qualit√© sauvegard√©es en base`);
    }
    
    // Diagnostic final avec learnings
    if (realFinalSuccessRate >= 70 && globalExcellentRate >= 80) {
        console.log(`\nüéä === SUCC√àS EXCEPTIONNEL ! ===`);
        console.log(`üèÜ Taux de r√©ussite ${realFinalSuccessRate}% + Qualit√© ${globalExcellentRate}% excellent`);
        console.log(`üß† Les learnings ont permis d'atteindre et d√©passer les objectifs !`);
        console.log(`üí° Ce niveau de qualit√© peut servir de base pour futures optimisations`);
    } else if (realFinalSuccessRate >= 60) {
        console.log(`\nüéØ EXCELLENT R√âSULTAT ! Taux > 60% atteint avec √©conomies 90%+`);
        if (globalExcellentRate >= 70) {
            console.log(`üèÜ Bonus: Qualit√© exceptionnelle ${globalExcellentRate}% d'excellence`);
        }
    } else {
        console.log(`\n‚ö†Ô∏è DIAGNOSTIC AVEC LEARNINGS - Taux < 60% :`);
        console.log(`   ‚Ä¢ P√©riode ${startYear}-${endYear} possiblement satur√©e (${loadResult.periodEvents.length} √©v√©nements existants)`);
        console.log(`   ‚Ä¢ Les learnings optimisent la qualit√© mais peuvent r√©duire la quantit√©`);
        console.log(`   ‚Ä¢ Essayez une p√©riode moins couverte ou ajustez MIN_VALIDATION_SCORE`);
        console.log(`   ‚Ä¢ Qualit√© moyenne ${globalAvgValidationScore}/10 sugg√®re que les learnings fonctionnent`);
    }
    
    rl.close();
}

function askQuestion(query) { 
    return new Promise(resolve => rl.question(query, resolve)); 
}

// ==============================================================================
// LANCEMENT DU SCRIPT OPTIMIS√â
// ==============================================================================

main().catch(error => { 
    console.error("\nüí• [OPTIMIZED] Erreur fatale:", error); 
    rl.close(); 
});