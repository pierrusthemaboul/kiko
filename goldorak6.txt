===== INFORMATIONS SYSTÈME =====
Linux pierre-OptiPlex-390 6.8.0-52-generic #53-Ubuntu SMP PREEMPT_DYNAMIC Sat Jan 11 00:06:25 UTC 2025 x86_64 x86_64 x86_64 GNU/Linux

===== VERSION DE NODE & NPM =====
Node : v22.13.1
NPM  : 11.1.0

===== LISTE DES MODULES NPM (niveau 0) =====
kiko@1.0.0 /home/pierre/kiko
├── @babel/core@7.26.7
├── @expo-google-fonts/montserrat@0.2.3
├── @expo/config-plugins@9.0.14
├── @expo/vector-icons@14.0.4
├── @react-native-async-storage/async-storage@2.1.1
├── @react-native-community/cli@15.1.3
├── @react-navigation/bottom-tabs@7.2.0
├── @react-navigation/native@7.0.14
├── @supabase/supabase-js@2.48.1
├── @types/jest@29.5.14
├── @types/react-test-renderer@18.3.1
├── @types/react@18.3.18
├── babel-plugin-module-resolver@5.0.2
├── expo-av@15.0.2
├── expo-blur@14.0.3
├── expo-constants@17.0.5
├── expo-dev-client@5.0.11
├── expo-font@13.0.3
├── expo-haptics@14.0.1
├── expo-linear-gradient@14.0.2
├── expo-linking@7.0.5
├── expo-router@4.0.17
├── expo-splash-screen@0.29.21
├── expo-status-bar@2.0.1
├── expo-symbols@0.2.2
├── expo-system-ui@4.0.7
├── expo-web-browser@14.0.2
├── expo@52.0.28
├── jest-expo@52.0.3
├── jest@29.7.0
├── patch-package@8.0.0
├── react-dom@18.3.1
├── react-native-gesture-handler@2.20.2
├── react-native-google-mobile-ads@14.9.0
├── react-native-reanimated@3.16.7
├── react-native-safe-area-context@4.12.0
├── react-native-screens@4.4.0
├── react-native-url-polyfill@2.0.0
├── react-native-web@0.19.13
├── react-native-webview@13.12.5
├── react-native@0.76.6
├── react-test-renderer@18.3.1
├── react@18.3.1
└── typescript@5.7.3

===== CONTENU DU fichier package.json =====
{
  "name": "kiko",
  "main": "expo-router/entry",
  "version": "1.0.0",
  "scripts": {
    "start": "expo start",
    "reset-project": "node ./scripts/reset-project.js",
    "android": "expo run:android",
    "ios": "expo run:ios",
    "web": "expo start --web",
    "test": "jest --watchAll",
    "lint": "expo lint",
    "postinstall": "patch-package"
  },
  "jest": {
    "preset": "jest-expo"
  },
  "dependencies": {
    "@expo-google-fonts/montserrat": "^0.2.3",
    "@expo/config-plugins": "~9.0.0",
    "@expo/vector-icons": "^14.0.2",
    "@react-native-async-storage/async-storage": "^2.1.1",
    "@react-native-community/cli": "latest",
    "@react-navigation/bottom-tabs": "^7.2.0",
    "@react-navigation/native": "^7.0.14",
    "@supabase/supabase-js": "^2.48.1",
    "expo": "~52.0.28",
    "expo-av": "^15.0.2",
    "expo-blur": "~14.0.3",
    "expo-constants": "~17.0.5",
    "expo-dev-client": "~5.0.11",
    "expo-font": "~13.0.3",
    "expo-haptics": "~14.0.1",
    "expo-linear-gradient": "~14.0.2",
    "expo-linking": "~7.0.5",
    "expo-router": "~4.0.17",
    "expo-splash-screen": "~0.29.21",
    "expo-status-bar": "~2.0.1",
    "expo-symbols": "~0.2.1",
    "expo-system-ui": "~4.0.7",
    "expo-web-browser": "~14.0.2",
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "react-native": "0.76.6",
    "react-native-gesture-handler": "~2.20.2",
    "react-native-google-mobile-ads": "^14.9.0",
    "react-native-reanimated": "~3.16.1",
    "react-native-safe-area-context": "4.12.0",
    "react-native-screens": "~4.4.0",
    "react-native-url-polyfill": "^2.0.0",
    "react-native-web": "~0.19.13",
    "react-native-webview": "13.12.5"
  },
  "devDependencies": {
    "@babel/core": "^7.25.2",
    "@types/jest": "^29.5.12",
    "@types/react": "~18.3.12",
    "@types/react-test-renderer": "^18.3.0",
    "babel-plugin-module-resolver": "^5.0.2",
    "jest": "^29.2.1",
    "jest-expo": "~52.0.3",
    "patch-package": "^8.0.0",
    "react-test-renderer": "18.3.1",
    "typescript": "^5.3.3"
  },
  "overrides": {
    "expo-ads-admob": {
      "@expo/config-plugins": "9.0.14"
    }
  },
  "private": true
}

===== CONTENU DU fichier android/app/build.gradle =====
apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
    reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim())
                        .getParentFile().getAbsoluteFile()
    hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim())
                        .getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
    codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim())
                        .getParentFile().getAbsoluteFile()

    // Use Expo CLI to bundle the app, this ensures the Metro config works correctly with Expo projects.
    cliFile = new File(["node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"

    /* Folders */
    // root = file("../../")
    // reactNativeDir = file("../../node_modules/react-native")
    // codegenDir = file("../../node_modules/@react-native/codegen")

    /* Variants */
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    // nodeExecutableAndArgs = ["node"]
    // bundleConfig = file(../rn-cli.config.js)
    // bundleAssetName = "MyApplication.android.bundle"
    // entryFile = file("../js/MyApplication.android.js")
    // extraPackagerArgs = []

    /* Hermes Commands */
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    // hermesFlags = ["-O", "-output-source-map"]

    /* Autolinking */
    autolinkLibrariesWithApp()
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = (findProperty('android.enableProguardInReleaseBuilds') ?: false).toBoolean()

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 *   def jscFlavor = 'org.webkit:android-jsc-intl:+'
 *
 * The international variant includes ICU i18n library and necessary data allowing to use e.g. 
 * Date.toLocaleString and String.localeCompare that give correct results when using with locales 
 * other than en-US. Note that this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion

    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace 'com.pierretulle.kiko'
    defaultConfig {
        applicationId 'com.pierretulle.kiko'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.0"
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // See https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            shrinkResources (findProperty('android.enableShrinkResourcesInReleaseBuilds')?.toBoolean() ?: false)
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            crunchPngs (findProperty('android.enablePngCrunchInReleaseBuilds')?.toBoolean() ?: true)
        }
    }
    packagingOptions {
        jniLibs {
            useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
        }
    }
    androidResources {
        ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'
    }
}

// Apply static values from `gradle.properties` to the `android.packagingOptions`
// Accepts values in comma delimited lists, example: android.packagingOptions.pickFirsts=/LICENSE,**/picasa.ini
["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
    def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",");
    for (i in 0..<options.size()) options[i] = options[i].trim();
    options -= ""
    if (options.length > 0) {
        println "android.packagingOptions.$prop += $options ($options.length)"
        options.each {
            android.packagingOptions[prop] += it
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true"
    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true"
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true"

    if (isGifEnabled) {
        // For animated gif support
        implementation("com.facebook.fresco:animated-gif:${reactAndroidLibs.versions.fresco.get()}")
    }

    if (isWebpEnabled) {
        // For webp support
        implementation("com.facebook.fresco:webpsupport:${reactAndroidLibs.versions.fresco.get()}")
        if (isWebpAnimatedEnabled) {
            // Animated webp support
            implementation("com.facebook.fresco:animated-webp:${reactAndroidLibs.versions.fresco.get()}")
        }
    }

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    // Ajout de la dépendance pour Google Mobile Ads
    implementation 'com.google.android.gms:play-services-ads:21.2.0'
}

===== LOGS / ERREURS DE COMPILE =====
[Copiez ici, par exemple à partir de l'exécution de "expo run:android", l'intégralité des logs et erreurs]

===== CONFIGURATION EXPO (app.json) =====
{
  "expo": {
    "name": "kiko",
    "slug": "kiko",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/images/icon.png",
    "scheme": "myapp",
    "userInterfaceStyle": "automatic",
    "newArchEnabled": true,
    "ios": {
      "supportsTablet": true,
      "bundleIdentifier": "com.pierretulle.kiko"
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/images/adaptive-icon.png",
        "backgroundColor": "#ffffff"
      },
      "package": "com.pierretulle.kiko"
    },
    "web": {
      "bundler": "metro",
      "output": "static",
      "favicon": "./assets/images/favicon.png"
    },
    "plugins": [
      "expo-router",
      [
        "expo-splash-screen",
        {
          "image": "./assets/images/splash-icon.png",
          "imageWidth": 200,
          "resizeMode": "contain",
          "backgroundColor": "#ffffff"
        }
      ],
      [
        "react-native-google-mobile-ads",
        {
          "androidAppId": "ca-app-pub-3940256099942544~3347511713",
          "iosAppId": "ca-app-pub-3940256099942544~1458002511"
        }
      ]
    ],
    "experiments": {
      "typedRoutes": true
    },
    "extra": {
      "router": {
        "origin": false
      },
      "eas": {
        "projectId": "3cbda57c-1ec1-4949-af06-9e933dbc0050"
      }
    }
  }
}

===== AUTRES INFORMATIONS PERTINENTES =====
[Ajoutez ici toute autre information utile (configuration spécifique, versions de dépendances, détails sur le problème "this creen doesn't not exit", etc.)]
