===== INFORMATIONS SYSTÈME =====
Linux pierre-OptiPlex-390 6.8.0-52-generic #53-Ubuntu SMP PREEMPT_DYNAMIC Sat Jan 11 00:06:25 UTC 2025 x86_64 x86_64 x86_64 GNU/Linux

===== VERSION DE NODE & NPM =====
v22.13.1
11.1.0

===== LISTE DES MODULES NPM (niveau 0) =====
kiko@1.0.0 /home/pierre/kiko
├── @babel/core@7.26.7
├── @expo-google-fonts/montserrat@0.2.3
├── @expo/config-plugins@9.0.14
├── @expo/vector-icons@14.0.4
├── @react-native-async-storage/async-storage@2.1.1
├── @react-native-community/cli@15.1.3
├── @react-navigation/bottom-tabs@7.2.0
├── @react-navigation/native@7.0.14
├── @supabase/supabase-js@2.48.1
├── @types/jest@29.5.14
├── @types/react-test-renderer@18.3.1
├── @types/react@18.3.18
├── babel-plugin-module-resolver@5.0.2
├── expo-av@15.0.2
├── expo-blur@14.0.3
├── expo-constants@17.0.5
├── expo-dev-client@5.0.11
├── expo-font@13.0.3
├── expo-haptics@14.0.1
├── expo-linear-gradient@14.0.2
├── expo-linking@7.0.5
├── expo-router@4.0.17
├── expo-splash-screen@0.29.21
├── expo-status-bar@2.0.1
├── expo-symbols@0.2.2
├── expo-system-ui@4.0.7
├── expo-web-browser@14.0.2
├── expo@52.0.28
├── jest-expo@52.0.3
├── jest@29.7.0
├── patch-package@8.0.0
├── react-dom@18.3.1
├── react-native-gesture-handler@2.20.2
├── react-native-google-mobile-ads@14.8.1
├── react-native-reanimated@3.16.7
├── react-native-safe-area-context@4.12.0
├── react-native-screens@4.4.0
├── react-native-url-polyfill@2.0.0
├── react-native-web@0.19.13
├── react-native-webview@13.12.5
├── react-native@0.76.6
├── react-test-renderer@18.3.1
├── react@18.3.1
└── typescript@5.7.3


===== CONFIGURATION REACT NATIVE =====
{
  "root": "/home/pierre/kiko",
  "reactNativePath": "/home/pierre/kiko/node_modules/react-native",
  "reactNativeVersion": "0.76",
  "dependencies": {
    "@react-native-async-storage/async-storage": {
      "root": "/home/pierre/kiko/node_modules/@react-native-async-storage/async-storage",
      "name": "@react-native-async-storage/async-storage",
      "platforms": {
        "ios": {
          "podspecPath": "/home/pierre/kiko/node_modules/@react-native-async-storage/async-storage/RNCAsyncStorage.podspec",
          "version": "2.1.1",
          "configurations": [],
          "scriptPhases": []
        },
        "android": {
          "sourceDir": "/home/pierre/kiko/node_modules/@react-native-async-storage/async-storage/android",
          "packageImportPath": "import com.reactnativecommunity.asyncstorage.AsyncStoragePackage;",
          "packageInstance": "new AsyncStoragePackage()",
          "buildTypes": [],
          "libraryName": "rnasyncstorage",
          "componentDescriptors": [],
          "cmakeListsPath": "/home/pierre/kiko/node_modules/@react-native-async-storage/async-storage/android/build/generated/source/codegen/jni/CMakeLists.txt",
          "cxxModuleCMakeListsModuleName": null,
          "cxxModuleCMakeListsPath": null,
          "cxxModuleHeaderName": null,
          "isPureCxxDependency": false
        }
      }
    },
    "expo": {
      "root": "/home/pierre/kiko/node_modules/expo",
      "name": "expo",
      "platforms": {
        "ios": {
          "podspecPath": "/home/pierre/kiko/node_modules/expo/Expo.podspec",
          "version": "52.0.28",
          "configurations": [],
          "scriptPhases": []
        },
        "android": {
          "sourceDir": "/home/pierre/kiko/node_modules/expo/android",
          "packageImportPath": "import expo.modules.ExpoModulesPackage;",
          "packageInstance": "new ExpoModulesPackage()",
          "buildTypes": [],
          "componentDescriptors": [],
          "cmakeListsPath": "/home/pierre/kiko/node_modules/expo/android/build/generated/source/codegen/jni/CMakeLists.txt",
          "cxxModuleCMakeListsModuleName": null,
          "cxxModuleCMakeListsPath": null,
          "cxxModuleHeaderName": null,
          "isPureCxxDependency": false
        }
      }
    },
    "react-native-gesture-handler": {
      "root": "/home/pierre/kiko/node_modules/react-native-gesture-handler",
      "name": "react-native-gesture-handler",
      "platforms": {
        "ios": {
          "podspecPath": "/home/pierre/kiko/node_modules/react-native-gesture-handler/RNGestureHandler.podspec",
          "version": "2.20.2",
          "configurations": [],
          "scriptPhases": []
        },
        "android": {
          "sourceDir": "/home/pierre/kiko/node_modules/react-native-gesture-handler/android",
          "packageImportPath": "import com.swmansion.gesturehandler.RNGestureHandlerPackage;",
          "packageInstance": "new RNGestureHandlerPackage()",
          "buildTypes": [],
          "libraryName": "rngesturehandler_codegen",
          "componentDescriptors": [
            "RNGestureHandlerButtonComponentDescriptor",
            "RNGestureHandlerRootViewComponentDescriptor"
          ],
          "cmakeListsPath": "/home/pierre/kiko/node_modules/react-native-gesture-handler/android/build/generated/source/codegen/jni/CMakeLists.txt",
          "cxxModuleCMakeListsModuleName": null,
          "cxxModuleCMakeListsPath": null,
          "cxxModuleHeaderName": null,
          "isPureCxxDependency": false
        }
      }
    },
    "react-native-google-mobile-ads": {
      "root": "/home/pierre/kiko/node_modules/react-native-google-mobile-ads",
      "name": "react-native-google-mobile-ads",
      "platforms": {
        "ios": {
          "podspecPath": "/home/pierre/kiko/node_modules/react-native-google-mobile-ads/RNGoogleMobileAds.podspec",
          "version": "14.8.1",
          "configurations": [],
          "scriptPhases": [
            {
              "name": "[RNGoogleMobileAds] Configuration",
              "path": "./ios_config.sh",
              "execution_position": "after_compile",
              "input_files": [
                "$(BUILT_PRODUCTS_DIR)/$(INFOPLIST_PATH)"
              ]
            }
          ]
        },
        "android": {
          "sourceDir": "/home/pierre/kiko/node_modules/react-native-google-mobile-ads/android",
          "packageImportPath": "import io.invertase.googlemobileads.ReactNativeGoogleMobileAdsPackage;",
          "packageInstance": "new ReactNativeGoogleMobileAdsPackage()",
          "buildTypes": [],
          "libraryName": "RNGoogleMobileAdsSpec",
          "componentDescriptors": [
            "RNGoogleMobileAdsBannerViewComponentDescriptor",
            "RNGoogleMobileAdsMediaViewComponentDescriptor",
            "RNGoogleMobileAdsNativeViewComponentDescriptor"
          ],
          "cmakeListsPath": "/home/pierre/kiko/node_modules/react-native-google-mobile-ads/android/build/generated/source/codegen/jni/CMakeLists.txt",
          "cxxModuleCMakeListsModuleName": null,
          "cxxModuleCMakeListsPath": null,
          "cxxModuleHeaderName": null,
          "isPureCxxDependency": false
        }
      }
    },
    "react-native-reanimated": {
      "root": "/home/pierre/kiko/node_modules/react-native-reanimated",
      "name": "react-native-reanimated",
      "platforms": {
        "ios": {
          "podspecPath": "/home/pierre/kiko/node_modules/react-native-reanimated/RNReanimated.podspec",
          "version": "3.16.7",
          "configurations": [],
          "scriptPhases": []
        },
        "android": {
          "sourceDir": "/home/pierre/kiko/node_modules/react-native-reanimated/android",
          "packageImportPath": "import com.swmansion.reanimated.ReanimatedPackage;",
          "packageInstance": "new ReanimatedPackage()",
          "buildTypes": [],
          "libraryName": "rnreanimated",
          "componentDescriptors": [],
          "cmakeListsPath": "/home/pierre/kiko/node_modules/react-native-reanimated/android/build/generated/source/codegen/jni/CMakeLists.txt",
          "cxxModuleCMakeListsModuleName": null,
          "cxxModuleCMakeListsPath": null,
          "cxxModuleHeaderName": null,
          "isPureCxxDependency": false
        }
      }
    },
    "react-native-safe-area-context": {
      "root": "/home/pierre/kiko/node_modules/react-native-safe-area-context",
      "name": "react-native-safe-area-context",
      "platforms": {
        "ios": {
          "podspecPath": "/home/pierre/kiko/node_modules/react-native-safe-area-context/react-native-safe-area-context.podspec",
          "version": "4.12.0",
          "configurations": [],
          "scriptPhases": []
        },
        "android": {
          "sourceDir": "/home/pierre/kiko/node_modules/react-native-safe-area-context/android",
          "packageImportPath": "import com.th3rdwave.safeareacontext.SafeAreaContextPackage;",
          "packageInstance": "new SafeAreaContextPackage()",
          "buildTypes": [],
          "libraryName": "safeareacontext",
          "componentDescriptors": [
            "RNCSafeAreaProviderComponentDescriptor",
            "RNCSafeAreaViewComponentDescriptor"
          ],
          "cmakeListsPath": "/home/pierre/kiko/node_modules/react-native-safe-area-context/android/src/main/jni/CMakeLists.txt",
          "cxxModuleCMakeListsModuleName": null,
          "cxxModuleCMakeListsPath": null,
          "cxxModuleHeaderName": null,
          "isPureCxxDependency": false
        }
      }
    },
    "react-native-screens": {
      "root": "/home/pierre/kiko/node_modules/react-native-screens",
      "name": "react-native-screens",
      "platforms": {
        "ios": {
          "podspecPath": "/home/pierre/kiko/node_modules/react-native-screens/RNScreens.podspec",
          "version": "4.4.0",
          "configurations": [],
          "scriptPhases": []
        },
        "android": {
          "sourceDir": "/home/pierre/kiko/node_modules/react-native-screens/android",
          "packageImportPath": "import com.swmansion.rnscreens.RNScreensPackage;",
          "packageInstance": "new RNScreensPackage()",
          "buildTypes": [],
          "libraryName": "rnscreens",
          "componentDescriptors": [
            "RNSFullWindowOverlayComponentDescriptor",
            "RNSScreenContainerComponentDescriptor",
            "RNSScreenNavigationContainerComponentDescriptor",
            "RNSScreenStackHeaderConfigComponentDescriptor",
            "RNSScreenStackHeaderSubviewComponentDescriptor",
            "RNSScreenStackComponentDescriptor",
            "RNSSearchBarComponentDescriptor",
            "RNSScreenComponentDescriptor",
            "RNSScreenFooterComponentDescriptor",
            "RNSScreenContentWrapperComponentDescriptor",
            "RNSModalScreenComponentDescriptor"
          ],
          "cmakeListsPath": "/home/pierre/kiko/node_modules/react-native-screens/android/src/main/jni/CMakeLists.txt",
          "cxxModuleCMakeListsModuleName": null,
          "cxxModuleCMakeListsPath": null,
          "cxxModuleHeaderName": null,
          "isPureCxxDependency": false
        }
      }
    },
    "react-native-webview": {
      "root": "/home/pierre/kiko/node_modules/react-native-webview",
      "name": "react-native-webview",
      "platforms": {
        "ios": {
          "podspecPath": "/home/pierre/kiko/node_modules/react-native-webview/react-native-webview.podspec",
          "version": "13.12.5",
          "configurations": [],
          "scriptPhases": []
        },
        "android": {
          "sourceDir": "/home/pierre/kiko/node_modules/react-native-webview/android",
          "packageImportPath": "import com.reactnativecommunity.webview.RNCWebViewPackage;",
          "packageInstance": "new RNCWebViewPackage()",
          "buildTypes": [],
          "libraryName": "RNCWebViewSpec",
          "componentDescriptors": [
            "RNCWebViewComponentDescriptor"
          ],
          "cmakeListsPath": "/home/pierre/kiko/node_modules/react-native-webview/android/build/generated/source/codegen/jni/CMakeLists.txt",
          "cxxModuleCMakeListsModuleName": null,
          "cxxModuleCMakeListsPath": null,
          "cxxModuleHeaderName": null,
          "isPureCxxDependency": false
        }
      }
    }
  },
  "commands": [
    {
      "name": "bundle",
      "description": "Build the bundle for the provided JavaScript entry file.",
      "options": [
        {
          "name": "--entry-file <path>",
          "description": "Path to the root JS file, either absolute or relative to JS root"
        },
        {
          "name": "--platform <string>",
          "description": "Either \"ios\" or \"android\"",
          "default": "ios"
        },
        {
          "name": "--transformer <string>",
          "description": "Specify a custom transformer to be used"
        },
        {
          "name": "--dev [boolean]",
          "description": "If false, warnings are disabled and the bundle is minified",
          "default": true
        },
        {
          "name": "--minify [boolean]",
          "description": "Allows overriding whether bundle is minified. This defaults to false if dev is true, and true if dev is false. Disabling minification can be useful for speeding up production builds for testing purposes."
        },
        {
          "name": "--bundle-output <string>",
          "description": "File name where to store the resulting bundle, ex. /tmp/groups.bundle"
        },
        {
          "name": "--bundle-encoding <string>",
          "description": "Encoding the bundle should be written in (https://nodejs.org/api/buffer.html#buffer_buffer).",
          "default": "utf8"
        },
        {
          "name": "--max-workers <number>",
          "description": "Specifies the maximum number of workers the worker-pool will spawn for transforming files. This defaults to the number of the cores available on your machine."
        },
        {
          "name": "--sourcemap-output <string>",
          "description": "File name where to store the sourcemap file for resulting bundle, ex. /tmp/groups.map"
        },
        {
          "name": "--sourcemap-sources-root <string>",
          "description": "Path to make sourcemap's sources entries relative to, ex. /root/dir"
        },
        {
          "name": "--sourcemap-use-absolute-path",
          "description": "Report SourceMapURL using its full path",
          "default": false
        },
        {
          "name": "--assets-dest <string>",
          "description": "Directory name where to store assets referenced in the bundle"
        },
        {
          "name": "--unstable-transform-profile <string>",
          "description": "Experimental, transform JS for a specific JS engine. Currently supported: hermes, hermes-canary, default",
          "default": "default"
        },
        {
          "name": "--asset-catalog-dest [string]",
          "description": "Path where to create an iOS Asset Catalog for images"
        },
        {
          "name": "--reset-cache",
          "description": "Removes cached files",
          "default": false
        },
        {
          "name": "--read-global-cache",
          "description": "Try to fetch transformed JS code from the global cache, if configured.",
          "default": false
        },
        {
          "name": "--config <string>",
          "description": "Path to the CLI configuration file"
        },
        {
          "name": "--resolver-option <string...>",
          "description": "Custom resolver options of the form key=value. URL-encoded. May be specified multiple times."
        }
      ]
    },
    {
      "name": "start",
      "description": "Start the React Native development server.",
      "options": [
        {
          "name": "--port <number>"
        },
        {
          "name": "--host <string>",
          "default": ""
        },
        {
          "name": "--projectRoot <path>",
          "description": "Path to a custom project root"
        },
        {
          "name": "--watchFolders <list>",
          "description": "Specify any additional folders to be added to the watch list"
        },
        {
          "name": "--assetPlugins <list>",
          "description": "Specify any additional asset plugins to be used by the packager by full filepath"
        },
        {
          "name": "--sourceExts <list>",
          "description": "Specify any additional source extensions to be used by the packager"
        },
        {
          "name": "--max-workers <number>",
          "description": "Specifies the maximum number of workers the worker-pool will spawn for transforming files. This defaults to the number of the cores available on your machine."
        },
        {
          "name": "--transformer <string>",
          "description": "Specify a custom transformer to be used"
        },
        {
          "name": "--reset-cache, --resetCache",
          "description": "Removes cached files"
        },
        {
          "name": "--custom-log-reporter-path, --customLogReporterPath <string>",
          "description": "Path to a JavaScript file that exports a log reporter as a replacement for TerminalReporter"
        },
        {
          "name": "--https",
          "description": "Enables https connections to the server"
        },
        {
          "name": "--key <path>",
          "description": "Path to custom SSL key"
        },
        {
          "name": "--cert <path>",
          "description": "Path to custom SSL cert"
        },
        {
          "name": "--config <string>",
          "description": "Path to the CLI configuration file"
        },
        {
          "name": "--no-interactive",
          "description": "Disables interactive mode"
        }
      ]
    },
    {
      "name": "codegen",
      "options": [
        {
          "name": "--path <path>",
          "description": "Path to the React Native project root.",
          "default": "/home/pierre/kiko"
        },
        {
          "name": "--platform <string>",
          "description": "Target platform. Supported values: \"android\", \"ios\", \"all\".",
          "default": "all"
        },
        {
          "name": "--outputPath <path>",
          "description": "Path where generated artifacts will be output to."
        }
      ]
    },
    {
      "name": "log-ios",
      "description": "starts iOS device syslog tail",
      "options": [
        {
          "name": "-i --interactive",
          "description": "Explicitly select simulator to tail logs from. By default it will tail logs from the first booted and available simulator."
        }
      ]
    },
    {
      "name": "run-ios",
      "description": "builds your app and starts it on iOS simulator",
      "examples": [
        {
          "desc": "Run on a different simulator, e.g. iPhone SE (2nd generation)",
          "cmd": "npx react-native run-ios --simulator \"iPhone SE (2nd generation)\""
        },
        {
          "desc": "Run on a connected device, e.g. Max's iPhone",
          "cmd": "npx react-native run-ios --device \"Max's iPhone\""
        },
        {
          "desc": "Run on the AppleTV simulator",
          "cmd": "npx react-native run-ios --simulator \"Apple TV\"  --scheme \"helloworld-tvOS\""
        }
      ],
      "options": [
        {
          "name": "--no-packager",
          "description": "Do not launch packager while running the app"
        },
        {
          "name": "--port <number>",
          "default": 8081
        },
        {
          "name": "--terminal <string>",
          "description": "Launches the Metro Bundler in a new window using the specified terminal path.",
          "default": "xterm-256color"
        },
        {
          "name": "--binary-path <string>",
          "description": "Path relative to project root where pre-built .app binary lives."
        },
        {
          "name": "--list-devices",
          "description": "List all available iOS devices and simulators and let you choose one to run the app. "
        },
        {
          "name": "--udid <string>",
          "description": "Explicitly set the device to use by UDID"
        },
        {
          "name": "--simulator <string>",
          "description": "Explicitly set the simulator to use. Optionally set the iOS version between parentheses at the end to match an exact version: \"iPhone 15 (17.0)\""
        },
        {
          "name": "--mode <string>",
          "description": "Explicitly set the scheme configuration to use. This option is case sensitive."
        },
        {
          "name": "--scheme <string>",
          "description": "Explicitly set Xcode scheme to use"
        },
        {
          "name": "--destination <string>",
          "description": "Explicitly extend destination e.g. \"arch=x86_64\""
        },
        {
          "name": "--verbose",
          "description": "Do not use xcbeautify or xcpretty even if installed"
        },
        {
          "name": "--xcconfig [string]",
          "description": "Explicitly set xcconfig to use"
        },
        {
          "name": "--buildFolder <string>",
          "description": "Location for iOS build artifacts. Corresponds to Xcode's \"-derivedDataPath\"."
        },
        {
          "name": "--extra-params <string>",
          "description": "Custom params that will be passed to xcodebuild command."
        },
        {
          "name": "--target <string>",
          "description": "Explicitly set Xcode target to use."
        },
        {
          "name": "-i --interactive",
          "description": "Explicitly select which scheme and configuration to use before running a build"
        },
        {
          "name": "--force-pods",
          "description": "Force CocoaPods installation"
        },
        {
          "name": "--device [string]",
          "description": "Explicitly set the device to use by name or by unique device identifier . If the value is not provided,the app will run on the first available physical device."
        }
      ]
    },
    {
      "name": "build-ios",
      "description": "builds your app for iOS platform",
      "examples": [
        {
          "desc": "Build the app for all iOS devices in Release mode",
          "cmd": "npx react-native build-ios --mode \"Release\""
        }
      ],
      "options": [
        {
          "name": "--mode <string>",
          "description": "Explicitly set the scheme configuration to use. This option is case sensitive."
        },
        {
          "name": "--scheme <string>",
          "description": "Explicitly set Xcode scheme to use"
        },
        {
          "name": "--destination <string>",
          "description": "Explicitly extend destination e.g. \"arch=x86_64\""
        },
        {
          "name": "--verbose",
          "description": "Do not use xcbeautify or xcpretty even if installed"
        },
        {
          "name": "--xcconfig [string]",
          "description": "Explicitly set xcconfig to use"
        },
        {
          "name": "--buildFolder <string>",
          "description": "Location for iOS build artifacts. Corresponds to Xcode's \"-derivedDataPath\"."
        },
        {
          "name": "--extra-params <string>",
          "description": "Custom params that will be passed to xcodebuild command."
        },
        {
          "name": "--target <string>",
          "description": "Explicitly set Xcode target to use."
        },
        {
          "name": "-i --interactive",
          "description": "Explicitly select which scheme and configuration to use before running a build"
        },
        {
          "name": "--force-pods",
          "description": "Force CocoaPods installation"
        },
        {
          "name": "--device [string]",
          "description": "Explicitly set the device to use by name or by unique device identifier . If the value is not provided,the app will run on the first available physical device."
        }
      ]
    },
    {
      "name": "log-android",
      "description": "starts logkitty"
    },
    {
      "name": "run-android",
      "description": "builds your app and starts it on a connected Android emulator or device",
      "options": [
        {
          "name": "--mode <string>",
          "description": "Specify your app's build variant"
        },
        {
          "name": "--tasks <list>",
          "description": "Run custom Gradle tasks. By default it's \"assembleDebug\". Will override passed mode and variant arguments."
        },
        {
          "name": "--active-arch-only",
          "description": "Build native libraries only for the current device architecture for debug builds.",
          "default": false
        },
        {
          "name": "--extra-params <string>",
          "description": "Custom params passed to gradle build command"
        },
        {
          "name": "-i --interactive",
          "description": "Explicitly select build type and flavour to use before running a build"
        },
        {
          "name": "--no-packager",
          "description": "Do not launch packager while running the app"
        },
        {
          "name": "--port <number>",
          "default": 8081
        },
        {
          "name": "--terminal <string>",
          "description": "Launches the Metro Bundler in a new window using the specified terminal path.",
          "default": "xterm-256color"
        },
        {
          "name": "--appId <string>",
          "description": "Specify an applicationId to launch after build. If not specified, `package` from AndroidManifest.xml will be used.",
          "default": ""
        },
        {
          "name": "--appIdSuffix <string>",
          "description": "Specify an applicationIdSuffix to launch after build.",
          "default": ""
        },
        {
          "name": "--main-activity <string>",
          "description": "Name of the activity to start"
        },
        {
          "name": "--device <string>",
          "description": "Explicitly set the device to use by name. The value is not required if you have a single device connected."
        },
        {
          "name": "--deviceId <string>",
          "description": "**DEPRECATED** Builds your app and starts it on a specific device/simulator with the given device id (listed by running \"adb devices\" on the command line)."
        },
        {
          "name": "--list-devices",
          "description": "Lists all available Android devices and simulators and let you choose one to run the app",
          "default": false
        },
        {
          "name": "--binary-path <string>",
          "description": "Path relative to project root where pre-built .apk binary lives."
        },
        {
          "name": "--user <number>",
          "description": "Id of the User Profile you want to install the app on."
        }
      ]
    },
    {
      "name": "build-android",
      "description": "builds your app",
      "options": [
        {
          "name": "--mode <string>",
          "description": "Specify your app's build variant"
        },
        {
          "name": "--tasks <list>",
          "description": "Run custom Gradle tasks. By default it's \"assembleDebug\". Will override passed mode and variant arguments."
        },
        {
          "name": "--active-arch-only",
          "description": "Build native libraries only for the current device architecture for debug builds.",
          "default": false
        },
        {
          "name": "--extra-params <string>",
          "description": "Custom params passed to gradle build command"
        },
        {
          "name": "-i --interactive",
          "description": "Explicitly select build type and flavour to use before running a build"
        }
      ]
    }
  ],
  "healthChecks": [],
  "platforms": {
    "ios": {},
    "android": {}
  },
  "assets": [],
  "project": {
    "ios": {
      "sourceDir": "/home/pierre/kiko/ios",
      "xcodeProject": {
        "name": "kiko.xcodeproj",
        "path": ".",
        "isWorkspace": false
      },
      "assets": []
    },
    "android": {
      "sourceDir": "/home/pierre/kiko/android",
      "appName": "app",
      "packageName": "com.pierretulle.kiko",
      "applicationId": "com.pierretulle.kiko",
      "mainActivity": ".MainActivity",
      "assets": []
    }
  }
}

===== CONTENU de package.json =====
{
  "name": "kiko",
  "main": "expo-router/entry",
  "version": "1.0.0",
  "scripts": {
    "start": "expo start",
    "reset-project": "node ./scripts/reset-project.js",
    "android": "expo run:android",
    "ios": "expo run:ios",
    "web": "expo start --web",
    "test": "jest --watchAll",
    "lint": "expo lint",
    "postinstall": "patch-package"
  },
  "jest": {
    "preset": "jest-expo"
  },
  "dependencies": {
    "@expo-google-fonts/montserrat": "^0.2.3",
    "@expo/config-plugins": "~9.0.0",
    "@expo/vector-icons": "^14.0.2",
    "@react-native-async-storage/async-storage": "^2.1.1",
    "@react-native-community/cli": "latest",
    "@react-navigation/bottom-tabs": "^7.2.0",
    "@react-navigation/native": "^7.0.14",
    "@supabase/supabase-js": "^2.48.1",
    "expo": "~52.0.28",
    "expo-av": "^15.0.2",
    "expo-blur": "~14.0.3",
    "expo-constants": "~17.0.5",
    "expo-dev-client": "~5.0.11",
    "expo-font": "~13.0.3",
    "expo-haptics": "~14.0.1",
    "expo-linear-gradient": "~14.0.2",
    "expo-linking": "~7.0.5",
    "expo-router": "~4.0.17",
    "expo-splash-screen": "~0.29.21",
    "expo-status-bar": "~2.0.1",
    "expo-symbols": "~0.2.1",
    "expo-system-ui": "~4.0.7",
    "expo-web-browser": "~14.0.2",
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "react-native": "0.76.6",
    "react-native-gesture-handler": "~2.20.2",
    "react-native-google-mobile-ads": "^14.8.1",
    "react-native-reanimated": "~3.16.1",
    "react-native-safe-area-context": "4.12.0",
    "react-native-screens": "~4.4.0",
    "react-native-url-polyfill": "^2.0.0",
    "react-native-web": "~0.19.13",
    "react-native-webview": "13.12.5"
  },
  "devDependencies": {
    "@babel/core": "^7.25.2",
    "@types/jest": "^29.5.12",
    "@types/react": "~18.3.12",
    "@types/react-test-renderer": "^18.3.0",
    "babel-plugin-module-resolver": "^5.0.2",
    "jest": "^29.2.1",
    "jest-expo": "~52.0.3",
    "patch-package": "^8.0.0",
    "react-test-renderer": "18.3.1",
    "typescript": "^5.3.3"
  },
  "overrides": {
    "expo-ads-admob": {
      "@expo/config-plugins": "9.0.14"
    }
  },
  "private": true
}

===== CONTENU de android/app/src/main/AndroidManifest.xml =====
<manifest xmlns:android="http://schemas.android.com/apk/res/android" xmlns:tools="http://schemas.android.com/tools">
  <uses-permission android:name="android.permission.INTERNET"/>
  <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
  <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW"/>
  <uses-permission android:name="android.permission.VIBRATE"/>
  <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
  <queries>
    <intent>
      <action android:name="android.intent.action.VIEW"/>
      <category android:name="android.intent.category.BROWSABLE"/>
      <data android:scheme="https"/>
    </intent>
  </queries>
  <application android:name=".MainApplication" android:label="@string/app_name" android:icon="@mipmap/ic_launcher" android:roundIcon="@mipmap/ic_launcher_round" android:allowBackup="true" android:theme="@style/AppTheme" android:supportsRtl="true">
    <meta-data android:name="com.google.android.gms.ads.APPLICATION_ID" android:value="ca-app-pub-3940256099942544~3347511713" tools:replace="android:value"/>
    <meta-data android:name="com.google.android.gms.ads.flag.OPTIMIZE_AD_LOADING" android:value="true" tools:replace="android:value"/>
    <meta-data android:name="com.google.android.gms.ads.flag.OPTIMIZE_INITIALIZATION" android:value="true" tools:replace="android:value"/>
    <meta-data android:name="expo.modules.updates.ENABLED" android:value="false"/>
    <meta-data android:name="expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH" android:value="ALWAYS"/>
    <meta-data android:name="expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS" android:value="0"/>
    <activity android:name=".MainActivity" android:configChanges="keyboard|keyboardHidden|orientation|screenSize|screenLayout|uiMode" android:launchMode="singleTask" android:windowSoftInputMode="adjustResize" android:theme="@style/Theme.App.SplashScreen" android:exported="true" android:screenOrientation="portrait">
      <intent-filter>
        <action android:name="android.intent.action.MAIN"/>
        <category android:name="android.intent.category.LAUNCHER"/>
      </intent-filter>
      <intent-filter>
        <action android:name="android.intent.action.VIEW"/>
        <category android:name="android.intent.category.DEFAULT"/>
        <category android:name="android.intent.category.BROWSABLE"/>
        <data android:scheme="myapp"/>
        <data android:scheme="com.pierretulle.kiko"/>
        <data android:scheme="exp+kiko"/>
      </intent-filter>
    </activity>
  </application>
</manifest>
===== CONTENU de android/app/build.gradle =====
apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
    reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
    codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()

    // Use Expo CLI to bundle the app, this ensures the Metro config
    // works correctly with Expo projects.
    cliFile = new File(["node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"

    /* Folders */
     //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]

    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]

    /* Autolinking */
    autolinkLibrariesWithApp()
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = (findProperty('android.enableProguardInReleaseBuilds') ?: false).toBoolean()

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion

    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace 'com.pierretulle.kiko'
    defaultConfig {
        applicationId 'com.pierretulle.kiko'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.0"
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            shrinkResources (findProperty('android.enableShrinkResourcesInReleaseBuilds')?.toBoolean() ?: false)
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            crunchPngs (findProperty('android.enablePngCrunchInReleaseBuilds')?.toBoolean() ?: true)
        }
    }
    packagingOptions {
        jniLibs {
            useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
        }
    }
    androidResources {
        ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'
    }
}

// Apply static values from `gradle.properties` to the `android.packagingOptions`
// Accepts values in comma delimited lists, example:
// android.packagingOptions.pickFirsts=/LICENSE,**/picasa.ini
["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
    // Split option: 'foo,bar' -> ['foo', 'bar']
    def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",");
    // Trim all elements in place.
    for (i in 0..<options.size()) options[i] = options[i].trim();
    // `[] - ""` is essentially `[""].filter(Boolean)` removing all empty strings.
    options -= ""

    if (options.length > 0) {
        println "android.packagingOptions.$prop += $options ($options.length)"
        // Ex: android.packagingOptions.pickFirsts += '**/SCCS/**'
        options.each {
            android.packagingOptions[prop] += it
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true";
    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true";
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true";

    if (isGifEnabled) {
        // For animated gif support
        implementation("com.facebook.fresco:animated-gif:${reactAndroidLibs.versions.fresco.get()}")
    }

    if (isWebpEnabled) {
        // For webp support
        implementation("com.facebook.fresco:webpsupport:${reactAndroidLibs.versions.fresco.get()}")
        if (isWebpAnimatedEnabled) {
            // Animated webp support
            implementation("com.facebook.fresco:animated-webp:${reactAndroidLibs.versions.fresco.get()}")
        }
    }

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

===== CONTENU de MainApplication.kt =====
package com.pierretulle.kiko

import android.app.Application
import android.content.res.Configuration
import com.google.android.gms.ads.MobileAds

import com.facebook.react.PackageList
import com.facebook.react.ReactApplication
import com.facebook.react.ReactNativeHost
import com.facebook.react.ReactPackage
import com.facebook.react.ReactHost
import com.facebook.react.defaults.DefaultNewArchitectureEntryPoint.load
import com.facebook.react.defaults.DefaultReactNativeHost
import com.facebook.react.soloader.OpenSourceMergedSoMapping
import com.facebook.soloader.SoLoader

import expo.modules.ApplicationLifecycleDispatcher
import expo.modules.ReactNativeHostWrapper

class MainApplication : Application(), ReactApplication {

  override val reactNativeHost: ReactNativeHost = ReactNativeHostWrapper(
    this,
    object : DefaultReactNativeHost(this) {
      override fun getPackages(): List<ReactPackage> {
        val packages = PackageList(this).packages
        // Ajoutez ici les packages qui ne sont pas autolinkés, si nécessaire.
        return packages
      }

      override fun getJSMainModuleName(): String = ".expo/.virtual-metro-entry"

      override fun getUseDeveloperSupport(): Boolean = BuildConfig.DEBUG

      override val isNewArchEnabled: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED
      override val isHermesEnabled: Boolean = BuildConfig.IS_HERMES_ENABLED
    }
  )

  override val reactHost: ReactHost
    get() = ReactNativeHostWrapper.createReactHost(applicationContext, reactNativeHost)

  override fun onCreate() {
    super.onCreate()
    // Initialisation du SDK Google Mobile Ads (pour react-native-google-mobile-ads)
    MobileAds.initialize(this) {}

    SoLoader.init(this, OpenSourceMergedSoMapping)
    if (BuildConfig.IS_NEW_ARCHITECTURE_ENABLED) {
      // Chargement du point d'entrée natif pour la nouvelle architecture.
      load()
    }
    ApplicationLifecycleDispatcher.onApplicationCreate(this)
  }

  override fun onConfigurationChanged(newConfig: Configuration) {
    super.onConfigurationChanged(newConfig)
    ApplicationLifecycleDispatcher.onConfigurationChanged(this, newConfig)
  }
}

===== CONTENU de MainActivity.kt =====
package com.pierretulle.kiko

import expo.modules.splashscreen.SplashScreenManager

import android.os.Build
import android.os.Bundle

import com.facebook.react.ReactActivity
import com.facebook.react.ReactActivityDelegate
import com.facebook.react.defaults.DefaultNewArchitectureEntryPoint.fabricEnabled
import com.facebook.react.defaults.DefaultReactActivityDelegate

import expo.modules.ReactActivityDelegateWrapper

class MainActivity : ReactActivity() {
  override fun onCreate(savedInstanceState: Bundle?) {
    // Pour expo-splash-screen : enregistrez l'activité
    SplashScreenManager.registerOnActivity(this)
    super.onCreate(null)
  }

  /**
   * Renvoie le nom du composant principal enregistré depuis JavaScript.
   */
  override fun getMainComponentName(): String = "main"

  /**
   * Renvoie une instance de ReactActivityDelegate.
   * Ici, nous utilisons ReactActivityDelegateWrapper et DefaultReactActivityDelegate pour supporter la nouvelle architecture.
   */
  override fun createReactActivityDelegate(): ReactActivityDelegate {
    return ReactActivityDelegateWrapper(
      this,
      BuildConfig.IS_NEW_ARCHITECTURE_ENABLED,
      object : DefaultReactActivityDelegate(
        this,
        mainComponentName,
        fabricEnabled
      ) {}
    )
  }

  /**
   * Personnalisation du comportement du bouton "retour" sur Android.
   */
  override fun invokeDefaultOnBackPressed() {
    if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.R) {
      if (!moveTaskToBack(false)) {
        // Pour les activités non racines, on utilise le comportement par défaut.
        super.invokeDefaultOnBackPressed()
      }
      return
    }
    // Sur Android S et versions ultérieures, on utilise le comportement par défaut.
    super.invokeDefaultOnBackPressed()
  }
}

