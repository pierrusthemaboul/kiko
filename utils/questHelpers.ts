import { supabase } from '@/lib/supabase/supabaseClients';

/**
 * Retourne le timestamp de minuit aujourd'hui en ISO
 */
export function getTodayResetTime(): string {
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  return today.toISOString();
}

/**
 * Retourne le timestamp de minuit demain en ISO
 */
export function getTomorrowResetTime(): string {
  const tomorrow = new Date();
  tomorrow.setHours(0, 0, 0, 0);
  tomorrow.setDate(tomorrow.getDate() + 1);
  return tomorrow.toISOString();
}

/**
 * VÃ©rifie si les quÃªtes doivent Ãªtre rÃ©initialisÃ©es
 * @param lastResetAt - Date ISO du dernier reset
 */
export function shouldResetQuests(lastResetAt: string | null): boolean {
  if (!lastResetAt) return true;

  const lastReset = new Date(lastResetAt);
  const today = new Date();
  today.setHours(0, 0, 0, 0);

  return lastReset < today;
}

/**
 * Initialise les quÃªtes quotidiennes pour un utilisateur
 * CrÃ©e les entrÃ©es dans quest_progress pour toutes les quÃªtes actives
 */
export async function initializeDailyQuests(userId: string): Promise<void> {
  try {
    // RÃ©cupÃ©rer toutes les quÃªtes quotidiennes disponibles
    const { data: dailyQuests, error: questsError } = await supabase
      .from('daily_quests')
      .select('quest_key');

    if (questsError) throw questsError;
    if (!dailyQuests || dailyQuests.length === 0) {
      console.warn('Aucune quÃªte quotidienne trouvÃ©e');
      return;
    }

    const tomorrowReset = getTomorrowResetTime();

    // CrÃ©er les entrÃ©es de progression pour chaque quÃªte
    const progressEntries = dailyQuests.map(quest => ({
      user_id: userId,
      quest_key: quest.quest_key,
      current_value: 0,
      completed: false,
      reset_at: tomorrowReset,
    }));

    const { error: insertError } = await supabase
      .from('quest_progress')
      .insert(progressEntries);

    if (insertError) throw insertError;

    console.log(`âœ… QuÃªtes quotidiennes initialisÃ©es pour l'utilisateur ${userId}`);
  } catch (error) {
    console.error('Erreur lors de l\'initialisation des quÃªtes:', error);
    throw error;
  }
}

/**
 * RÃ©initialise les quÃªtes quotidiennes pour un utilisateur
 * Supprime les anciennes entrÃ©es et en crÃ©e de nouvelles
 */
export async function resetDailyQuests(userId: string): Promise<void> {
  try {
    // Supprimer les anciennes progressions
    const { error: deleteError } = await supabase
      .from('quest_progress')
      .delete()
      .eq('user_id', userId);

    if (deleteError) throw deleteError;

    // RÃ©initialiser les quÃªtes
    await initializeDailyQuests(userId);

    console.log(`ðŸ”„ QuÃªtes quotidiennes rÃ©initialisÃ©es pour l'utilisateur ${userId}`);
  } catch (error) {
    console.error('Erreur lors du reset des quÃªtes:', error);
    throw error;
  }
}

/**
 * VÃ©rifie si c'est un nouveau jour de jeu pour l'utilisateur
 * Compare la derniÃ¨re date de jeu avec aujourd'hui
 */
export function isNewDay(lastPlayDate: string | null): boolean {
  if (!lastPlayDate) return true;

  const lastPlay = new Date(lastPlayDate);
  const today = new Date();

  lastPlay.setHours(0, 0, 0, 0);
  today.setHours(0, 0, 0, 0);

  return lastPlay.getTime() !== today.getTime();
}

/**
 * Calcule le nouveau streak basÃ© sur la derniÃ¨re date de jeu
 * @param lastPlayDate - DerniÃ¨re date de jeu (ISO string)
 * @param currentStreak - Streak actuel
 * @returns Le nouveau streak
 */
export function calculateNewStreak(
  lastPlayDate: string | null,
  currentStreak: number
): number {
  if (!lastPlayDate) {
    // PremiÃ¨re partie
    return 1;
  }

  const lastPlay = new Date(lastPlayDate);
  const today = new Date();

  lastPlay.setHours(0, 0, 0, 0);
  today.setHours(0, 0, 0, 0);

  const diffInDays = Math.floor(
    (today.getTime() - lastPlay.getTime()) / (1000 * 60 * 60 * 24)
  );

  if (diffInDays === 0) {
    // MÃªme jour, pas de changement
    return currentStreak;
  } else if (diffInDays === 1) {
    // Jour consÃ©cutif
    return currentStreak + 1;
  } else {
    // Streak cassÃ©
    return 1;
  }
}

/**
 * Retourne la date d'aujourd'hui en format YYYY-MM-DD
 */
export function getTodayDateString(): string {
  const today = new Date();
  return today.toISOString().split('T')[0];
}
